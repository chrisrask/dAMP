
D-amp final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc4  0800ae08  0800ae08  0001ae08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbcc  0800dbcc  00020634  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbcc  0800dbcc  00020634  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbcc  0800dbcc  00020634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbcc  0800dbcc  0001dbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000634  20000000  0800dbd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000634  0800e208  00020634  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  0800e208  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020634  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ceb  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc4  00000000  00000000  00038347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7b6  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c4a  00000000  00000000  0005ab86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac473  00000000  00000000  000707d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cc43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef4  00000000  00000000  0011cc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000634 	.word	0x20000634
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800adec 	.word	0x0800adec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000638 	.word	0x20000638
 8000100:	0800adec 	.word	0x0800adec

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f97d 	bl	8001738 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8c7 	bl	80015dc <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f96f 	bl	8001738 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f965 	bl	8001738 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8e9 	bl	8001654 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8df 	bl	8001654 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f9b3 	bl	8000818 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f937 	bl	8000730 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f9a5 	bl	8000818 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f99b 	bl	8000818 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f945 	bl	8000780 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f93b 	bl	8000780 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fdiv>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	464f      	mov	r7, r9
 800051c:	4646      	mov	r6, r8
 800051e:	46d6      	mov	lr, sl
 8000520:	0245      	lsls	r5, r0, #9
 8000522:	b5c0      	push	{r6, r7, lr}
 8000524:	0047      	lsls	r7, r0, #1
 8000526:	1c0c      	adds	r4, r1, #0
 8000528:	0a6d      	lsrs	r5, r5, #9
 800052a:	0e3f      	lsrs	r7, r7, #24
 800052c:	0fc6      	lsrs	r6, r0, #31
 800052e:	2f00      	cmp	r7, #0
 8000530:	d066      	beq.n	8000600 <__aeabi_fdiv+0xe8>
 8000532:	2fff      	cmp	r7, #255	; 0xff
 8000534:	d06c      	beq.n	8000610 <__aeabi_fdiv+0xf8>
 8000536:	2300      	movs	r3, #0
 8000538:	00ea      	lsls	r2, r5, #3
 800053a:	2580      	movs	r5, #128	; 0x80
 800053c:	4699      	mov	r9, r3
 800053e:	469a      	mov	sl, r3
 8000540:	04ed      	lsls	r5, r5, #19
 8000542:	4315      	orrs	r5, r2
 8000544:	3f7f      	subs	r7, #127	; 0x7f
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0061      	lsls	r1, r4, #1
 800054a:	0a43      	lsrs	r3, r0, #9
 800054c:	4698      	mov	r8, r3
 800054e:	0e09      	lsrs	r1, r1, #24
 8000550:	0fe4      	lsrs	r4, r4, #31
 8000552:	2900      	cmp	r1, #0
 8000554:	d048      	beq.n	80005e8 <__aeabi_fdiv+0xd0>
 8000556:	29ff      	cmp	r1, #255	; 0xff
 8000558:	d010      	beq.n	800057c <__aeabi_fdiv+0x64>
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	00d8      	lsls	r0, r3, #3
 800055e:	04d2      	lsls	r2, r2, #19
 8000560:	4302      	orrs	r2, r0
 8000562:	4690      	mov	r8, r2
 8000564:	2000      	movs	r0, #0
 8000566:	397f      	subs	r1, #127	; 0x7f
 8000568:	464a      	mov	r2, r9
 800056a:	0033      	movs	r3, r6
 800056c:	1a7f      	subs	r7, r7, r1
 800056e:	4302      	orrs	r2, r0
 8000570:	496c      	ldr	r1, [pc, #432]	; (8000724 <__aeabi_fdiv+0x20c>)
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	588a      	ldr	r2, [r1, r2]
 8000576:	4063      	eors	r3, r4
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4697      	mov	pc, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d16d      	bne.n	800065c <__aeabi_fdiv+0x144>
 8000580:	2002      	movs	r0, #2
 8000582:	3fff      	subs	r7, #255	; 0xff
 8000584:	e033      	b.n	80005ee <__aeabi_fdiv+0xd6>
 8000586:	2300      	movs	r3, #0
 8000588:	4698      	mov	r8, r3
 800058a:	0026      	movs	r6, r4
 800058c:	4645      	mov	r5, r8
 800058e:	4682      	mov	sl, r0
 8000590:	4653      	mov	r3, sl
 8000592:	2b02      	cmp	r3, #2
 8000594:	d100      	bne.n	8000598 <__aeabi_fdiv+0x80>
 8000596:	e07f      	b.n	8000698 <__aeabi_fdiv+0x180>
 8000598:	2b03      	cmp	r3, #3
 800059a:	d100      	bne.n	800059e <__aeabi_fdiv+0x86>
 800059c:	e094      	b.n	80006c8 <__aeabi_fdiv+0x1b0>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d017      	beq.n	80005d2 <__aeabi_fdiv+0xba>
 80005a2:	0038      	movs	r0, r7
 80005a4:	307f      	adds	r0, #127	; 0x7f
 80005a6:	2800      	cmp	r0, #0
 80005a8:	dd5f      	ble.n	800066a <__aeabi_fdiv+0x152>
 80005aa:	076b      	lsls	r3, r5, #29
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fdiv+0xa0>
 80005ae:	230f      	movs	r3, #15
 80005b0:	402b      	ands	r3, r5
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fdiv+0xa0>
 80005b6:	3504      	adds	r5, #4
 80005b8:	012b      	lsls	r3, r5, #4
 80005ba:	d503      	bpl.n	80005c4 <__aeabi_fdiv+0xac>
 80005bc:	0038      	movs	r0, r7
 80005be:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <__aeabi_fdiv+0x210>)
 80005c0:	3080      	adds	r0, #128	; 0x80
 80005c2:	401d      	ands	r5, r3
 80005c4:	28fe      	cmp	r0, #254	; 0xfe
 80005c6:	dc67      	bgt.n	8000698 <__aeabi_fdiv+0x180>
 80005c8:	01ad      	lsls	r5, r5, #6
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	b2c0      	uxtb	r0, r0
 80005ce:	e002      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 80005d0:	001e      	movs	r6, r3
 80005d2:	2000      	movs	r0, #0
 80005d4:	2500      	movs	r5, #0
 80005d6:	05c0      	lsls	r0, r0, #23
 80005d8:	4328      	orrs	r0, r5
 80005da:	07f6      	lsls	r6, r6, #31
 80005dc:	4330      	orrs	r0, r6
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d12b      	bne.n	8000644 <__aeabi_fdiv+0x12c>
 80005ec:	2001      	movs	r0, #1
 80005ee:	464a      	mov	r2, r9
 80005f0:	0033      	movs	r3, r6
 80005f2:	494e      	ldr	r1, [pc, #312]	; (800072c <__aeabi_fdiv+0x214>)
 80005f4:	4302      	orrs	r2, r0
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	588a      	ldr	r2, [r1, r2]
 80005fa:	4063      	eors	r3, r4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4697      	mov	pc, r2
 8000600:	2d00      	cmp	r5, #0
 8000602:	d113      	bne.n	800062c <__aeabi_fdiv+0x114>
 8000604:	2304      	movs	r3, #4
 8000606:	4699      	mov	r9, r3
 8000608:	3b03      	subs	r3, #3
 800060a:	2700      	movs	r7, #0
 800060c:	469a      	mov	sl, r3
 800060e:	e79a      	b.n	8000546 <__aeabi_fdiv+0x2e>
 8000610:	2d00      	cmp	r5, #0
 8000612:	d105      	bne.n	8000620 <__aeabi_fdiv+0x108>
 8000614:	2308      	movs	r3, #8
 8000616:	4699      	mov	r9, r3
 8000618:	3b06      	subs	r3, #6
 800061a:	27ff      	movs	r7, #255	; 0xff
 800061c:	469a      	mov	sl, r3
 800061e:	e792      	b.n	8000546 <__aeabi_fdiv+0x2e>
 8000620:	230c      	movs	r3, #12
 8000622:	4699      	mov	r9, r3
 8000624:	3b09      	subs	r3, #9
 8000626:	27ff      	movs	r7, #255	; 0xff
 8000628:	469a      	mov	sl, r3
 800062a:	e78c      	b.n	8000546 <__aeabi_fdiv+0x2e>
 800062c:	0028      	movs	r0, r5
 800062e:	f001 ffe3 	bl	80025f8 <__clzsi2>
 8000632:	2776      	movs	r7, #118	; 0x76
 8000634:	1f43      	subs	r3, r0, #5
 8000636:	409d      	lsls	r5, r3
 8000638:	2300      	movs	r3, #0
 800063a:	427f      	negs	r7, r7
 800063c:	4699      	mov	r9, r3
 800063e:	469a      	mov	sl, r3
 8000640:	1a3f      	subs	r7, r7, r0
 8000642:	e780      	b.n	8000546 <__aeabi_fdiv+0x2e>
 8000644:	0018      	movs	r0, r3
 8000646:	f001 ffd7 	bl	80025f8 <__clzsi2>
 800064a:	4642      	mov	r2, r8
 800064c:	1f43      	subs	r3, r0, #5
 800064e:	2176      	movs	r1, #118	; 0x76
 8000650:	409a      	lsls	r2, r3
 8000652:	4249      	negs	r1, r1
 8000654:	1a09      	subs	r1, r1, r0
 8000656:	4690      	mov	r8, r2
 8000658:	2000      	movs	r0, #0
 800065a:	e785      	b.n	8000568 <__aeabi_fdiv+0x50>
 800065c:	21ff      	movs	r1, #255	; 0xff
 800065e:	2003      	movs	r0, #3
 8000660:	e782      	b.n	8000568 <__aeabi_fdiv+0x50>
 8000662:	001e      	movs	r6, r3
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	2500      	movs	r5, #0
 8000668:	e7b5      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 800066a:	2301      	movs	r3, #1
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	2b1b      	cmp	r3, #27
 8000670:	dcaf      	bgt.n	80005d2 <__aeabi_fdiv+0xba>
 8000672:	379e      	adds	r7, #158	; 0x9e
 8000674:	0029      	movs	r1, r5
 8000676:	40bd      	lsls	r5, r7
 8000678:	40d9      	lsrs	r1, r3
 800067a:	1e6a      	subs	r2, r5, #1
 800067c:	4195      	sbcs	r5, r2
 800067e:	430d      	orrs	r5, r1
 8000680:	076b      	lsls	r3, r5, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fdiv+0x176>
 8000684:	230f      	movs	r3, #15
 8000686:	402b      	ands	r3, r5
 8000688:	2b04      	cmp	r3, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fdiv+0x176>
 800068c:	3504      	adds	r5, #4
 800068e:	016b      	lsls	r3, r5, #5
 8000690:	d544      	bpl.n	800071c <__aeabi_fdiv+0x204>
 8000692:	2001      	movs	r0, #1
 8000694:	2500      	movs	r5, #0
 8000696:	e79e      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	2500      	movs	r5, #0
 800069c:	e79b      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 800069e:	2580      	movs	r5, #128	; 0x80
 80006a0:	2600      	movs	r6, #0
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	03ed      	lsls	r5, r5, #15
 80006a6:	e796      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 80006a8:	2300      	movs	r3, #0
 80006aa:	4698      	mov	r8, r3
 80006ac:	2080      	movs	r0, #128	; 0x80
 80006ae:	03c0      	lsls	r0, r0, #15
 80006b0:	4205      	tst	r5, r0
 80006b2:	d009      	beq.n	80006c8 <__aeabi_fdiv+0x1b0>
 80006b4:	4643      	mov	r3, r8
 80006b6:	4203      	tst	r3, r0
 80006b8:	d106      	bne.n	80006c8 <__aeabi_fdiv+0x1b0>
 80006ba:	4645      	mov	r5, r8
 80006bc:	4305      	orrs	r5, r0
 80006be:	026d      	lsls	r5, r5, #9
 80006c0:	0026      	movs	r6, r4
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	e786      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 80006c8:	2080      	movs	r0, #128	; 0x80
 80006ca:	03c0      	lsls	r0, r0, #15
 80006cc:	4305      	orrs	r5, r0
 80006ce:	026d      	lsls	r5, r5, #9
 80006d0:	20ff      	movs	r0, #255	; 0xff
 80006d2:	0a6d      	lsrs	r5, r5, #9
 80006d4:	e77f      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 80006d6:	4641      	mov	r1, r8
 80006d8:	016a      	lsls	r2, r5, #5
 80006da:	0148      	lsls	r0, r1, #5
 80006dc:	4282      	cmp	r2, r0
 80006de:	d219      	bcs.n	8000714 <__aeabi_fdiv+0x1fc>
 80006e0:	211b      	movs	r1, #27
 80006e2:	2500      	movs	r5, #0
 80006e4:	3f01      	subs	r7, #1
 80006e6:	2601      	movs	r6, #1
 80006e8:	0014      	movs	r4, r2
 80006ea:	006d      	lsls	r5, r5, #1
 80006ec:	0052      	lsls	r2, r2, #1
 80006ee:	2c00      	cmp	r4, #0
 80006f0:	db01      	blt.n	80006f6 <__aeabi_fdiv+0x1de>
 80006f2:	4290      	cmp	r0, r2
 80006f4:	d801      	bhi.n	80006fa <__aeabi_fdiv+0x1e2>
 80006f6:	1a12      	subs	r2, r2, r0
 80006f8:	4335      	orrs	r5, r6
 80006fa:	3901      	subs	r1, #1
 80006fc:	2900      	cmp	r1, #0
 80006fe:	d1f3      	bne.n	80006e8 <__aeabi_fdiv+0x1d0>
 8000700:	1e50      	subs	r0, r2, #1
 8000702:	4182      	sbcs	r2, r0
 8000704:	0038      	movs	r0, r7
 8000706:	307f      	adds	r0, #127	; 0x7f
 8000708:	001e      	movs	r6, r3
 800070a:	4315      	orrs	r5, r2
 800070c:	2800      	cmp	r0, #0
 800070e:	dd00      	ble.n	8000712 <__aeabi_fdiv+0x1fa>
 8000710:	e74b      	b.n	80005aa <__aeabi_fdiv+0x92>
 8000712:	e7aa      	b.n	800066a <__aeabi_fdiv+0x152>
 8000714:	211a      	movs	r1, #26
 8000716:	2501      	movs	r5, #1
 8000718:	1a12      	subs	r2, r2, r0
 800071a:	e7e4      	b.n	80006e6 <__aeabi_fdiv+0x1ce>
 800071c:	01ad      	lsls	r5, r5, #6
 800071e:	2000      	movs	r0, #0
 8000720:	0a6d      	lsrs	r5, r5, #9
 8000722:	e758      	b.n	80005d6 <__aeabi_fdiv+0xbe>
 8000724:	0800aebc 	.word	0x0800aebc
 8000728:	f7ffffff 	.word	0xf7ffffff
 800072c:	0800aefc 	.word	0x0800aefc

08000730 <__eqsf2>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	0042      	lsls	r2, r0, #1
 8000734:	024e      	lsls	r6, r1, #9
 8000736:	004c      	lsls	r4, r1, #1
 8000738:	0245      	lsls	r5, r0, #9
 800073a:	0a6d      	lsrs	r5, r5, #9
 800073c:	0e12      	lsrs	r2, r2, #24
 800073e:	0fc3      	lsrs	r3, r0, #31
 8000740:	0a76      	lsrs	r6, r6, #9
 8000742:	0e24      	lsrs	r4, r4, #24
 8000744:	0fc9      	lsrs	r1, r1, #31
 8000746:	2aff      	cmp	r2, #255	; 0xff
 8000748:	d00f      	beq.n	800076a <__eqsf2+0x3a>
 800074a:	2cff      	cmp	r4, #255	; 0xff
 800074c:	d011      	beq.n	8000772 <__eqsf2+0x42>
 800074e:	2001      	movs	r0, #1
 8000750:	42a2      	cmp	r2, r4
 8000752:	d000      	beq.n	8000756 <__eqsf2+0x26>
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	42b5      	cmp	r5, r6
 8000758:	d1fc      	bne.n	8000754 <__eqsf2+0x24>
 800075a:	428b      	cmp	r3, r1
 800075c:	d00d      	beq.n	800077a <__eqsf2+0x4a>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d1f8      	bne.n	8000754 <__eqsf2+0x24>
 8000762:	0028      	movs	r0, r5
 8000764:	1e45      	subs	r5, r0, #1
 8000766:	41a8      	sbcs	r0, r5
 8000768:	e7f4      	b.n	8000754 <__eqsf2+0x24>
 800076a:	2001      	movs	r0, #1
 800076c:	2d00      	cmp	r5, #0
 800076e:	d1f1      	bne.n	8000754 <__eqsf2+0x24>
 8000770:	e7eb      	b.n	800074a <__eqsf2+0x1a>
 8000772:	2001      	movs	r0, #1
 8000774:	2e00      	cmp	r6, #0
 8000776:	d1ed      	bne.n	8000754 <__eqsf2+0x24>
 8000778:	e7e9      	b.n	800074e <__eqsf2+0x1e>
 800077a:	2000      	movs	r0, #0
 800077c:	e7ea      	b.n	8000754 <__eqsf2+0x24>
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <__gesf2>:
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	0042      	lsls	r2, r0, #1
 8000784:	0246      	lsls	r6, r0, #9
 8000786:	024d      	lsls	r5, r1, #9
 8000788:	004c      	lsls	r4, r1, #1
 800078a:	0fc3      	lsrs	r3, r0, #31
 800078c:	0a76      	lsrs	r6, r6, #9
 800078e:	0e12      	lsrs	r2, r2, #24
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	0e24      	lsrs	r4, r4, #24
 8000794:	0fc8      	lsrs	r0, r1, #31
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d01f      	beq.n	80007da <__gesf2+0x5a>
 800079a:	2cff      	cmp	r4, #255	; 0xff
 800079c:	d010      	beq.n	80007c0 <__gesf2+0x40>
 800079e:	2a00      	cmp	r2, #0
 80007a0:	d11f      	bne.n	80007e2 <__gesf2+0x62>
 80007a2:	4271      	negs	r1, r6
 80007a4:	4171      	adcs	r1, r6
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d101      	bne.n	80007ae <__gesf2+0x2e>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d01e      	beq.n	80007ec <__gesf2+0x6c>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d10e      	bne.n	80007d0 <__gesf2+0x50>
 80007b2:	4283      	cmp	r3, r0
 80007b4:	d01e      	beq.n	80007f4 <__gesf2+0x74>
 80007b6:	2102      	movs	r1, #2
 80007b8:	1e58      	subs	r0, r3, #1
 80007ba:	4008      	ands	r0, r1
 80007bc:	3801      	subs	r0, #1
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d126      	bne.n	8000812 <__gesf2+0x92>
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d1f4      	bne.n	80007b2 <__gesf2+0x32>
 80007c8:	4271      	negs	r1, r6
 80007ca:	4171      	adcs	r1, r6
 80007cc:	2900      	cmp	r1, #0
 80007ce:	d0f0      	beq.n	80007b2 <__gesf2+0x32>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d1f4      	bne.n	80007be <__gesf2+0x3e>
 80007d4:	2001      	movs	r0, #1
 80007d6:	4240      	negs	r0, r0
 80007d8:	e7f1      	b.n	80007be <__gesf2+0x3e>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d119      	bne.n	8000812 <__gesf2+0x92>
 80007de:	2cff      	cmp	r4, #255	; 0xff
 80007e0:	d0ee      	beq.n	80007c0 <__gesf2+0x40>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d1e5      	bne.n	80007b2 <__gesf2+0x32>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d1e3      	bne.n	80007b2 <__gesf2+0x32>
 80007ea:	e7e4      	b.n	80007b6 <__gesf2+0x36>
 80007ec:	2000      	movs	r0, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d0e5      	beq.n	80007be <__gesf2+0x3e>
 80007f2:	e7e0      	b.n	80007b6 <__gesf2+0x36>
 80007f4:	42a2      	cmp	r2, r4
 80007f6:	dc05      	bgt.n	8000804 <__gesf2+0x84>
 80007f8:	dbea      	blt.n	80007d0 <__gesf2+0x50>
 80007fa:	42ae      	cmp	r6, r5
 80007fc:	d802      	bhi.n	8000804 <__gesf2+0x84>
 80007fe:	d3e7      	bcc.n	80007d0 <__gesf2+0x50>
 8000800:	2000      	movs	r0, #0
 8000802:	e7dc      	b.n	80007be <__gesf2+0x3e>
 8000804:	4241      	negs	r1, r0
 8000806:	4141      	adcs	r1, r0
 8000808:	4248      	negs	r0, r1
 800080a:	2102      	movs	r1, #2
 800080c:	4008      	ands	r0, r1
 800080e:	3801      	subs	r0, #1
 8000810:	e7d5      	b.n	80007be <__gesf2+0x3e>
 8000812:	2002      	movs	r0, #2
 8000814:	4240      	negs	r0, r0
 8000816:	e7d2      	b.n	80007be <__gesf2+0x3e>

08000818 <__lesf2>:
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	0042      	lsls	r2, r0, #1
 800081c:	0246      	lsls	r6, r0, #9
 800081e:	024d      	lsls	r5, r1, #9
 8000820:	004c      	lsls	r4, r1, #1
 8000822:	0fc3      	lsrs	r3, r0, #31
 8000824:	0a76      	lsrs	r6, r6, #9
 8000826:	0e12      	lsrs	r2, r2, #24
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e24      	lsrs	r4, r4, #24
 800082c:	0fc8      	lsrs	r0, r1, #31
 800082e:	2aff      	cmp	r2, #255	; 0xff
 8000830:	d00d      	beq.n	800084e <__lesf2+0x36>
 8000832:	2cff      	cmp	r4, #255	; 0xff
 8000834:	d00f      	beq.n	8000856 <__lesf2+0x3e>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d123      	bne.n	8000882 <__lesf2+0x6a>
 800083a:	4271      	negs	r1, r6
 800083c:	4171      	adcs	r1, r6
 800083e:	2c00      	cmp	r4, #0
 8000840:	d10f      	bne.n	8000862 <__lesf2+0x4a>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d10d      	bne.n	8000862 <__lesf2+0x4a>
 8000846:	2000      	movs	r0, #0
 8000848:	2e00      	cmp	r6, #0
 800084a:	d014      	beq.n	8000876 <__lesf2+0x5e>
 800084c:	e00d      	b.n	800086a <__lesf2+0x52>
 800084e:	2e00      	cmp	r6, #0
 8000850:	d110      	bne.n	8000874 <__lesf2+0x5c>
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d115      	bne.n	8000882 <__lesf2+0x6a>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d10c      	bne.n	8000874 <__lesf2+0x5c>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d103      	bne.n	8000866 <__lesf2+0x4e>
 800085e:	4271      	negs	r1, r6
 8000860:	4171      	adcs	r1, r6
 8000862:	2900      	cmp	r1, #0
 8000864:	d108      	bne.n	8000878 <__lesf2+0x60>
 8000866:	4283      	cmp	r3, r0
 8000868:	d010      	beq.n	800088c <__lesf2+0x74>
 800086a:	2102      	movs	r1, #2
 800086c:	1e58      	subs	r0, r3, #1
 800086e:	4008      	ands	r0, r1
 8000870:	3801      	subs	r0, #1
 8000872:	e000      	b.n	8000876 <__lesf2+0x5e>
 8000874:	2002      	movs	r0, #2
 8000876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000878:	2800      	cmp	r0, #0
 800087a:	d1fc      	bne.n	8000876 <__lesf2+0x5e>
 800087c:	2001      	movs	r0, #1
 800087e:	4240      	negs	r0, r0
 8000880:	e7f9      	b.n	8000876 <__lesf2+0x5e>
 8000882:	2c00      	cmp	r4, #0
 8000884:	d1ef      	bne.n	8000866 <__lesf2+0x4e>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d1ed      	bne.n	8000866 <__lesf2+0x4e>
 800088a:	e7ee      	b.n	800086a <__lesf2+0x52>
 800088c:	42a2      	cmp	r2, r4
 800088e:	dc05      	bgt.n	800089c <__lesf2+0x84>
 8000890:	dbf2      	blt.n	8000878 <__lesf2+0x60>
 8000892:	42ae      	cmp	r6, r5
 8000894:	d802      	bhi.n	800089c <__lesf2+0x84>
 8000896:	d3ef      	bcc.n	8000878 <__lesf2+0x60>
 8000898:	2000      	movs	r0, #0
 800089a:	e7ec      	b.n	8000876 <__lesf2+0x5e>
 800089c:	4241      	negs	r1, r0
 800089e:	4141      	adcs	r1, r0
 80008a0:	4248      	negs	r0, r1
 80008a2:	2102      	movs	r1, #2
 80008a4:	4008      	ands	r0, r1
 80008a6:	3801      	subs	r0, #1
 80008a8:	e7e5      	b.n	8000876 <__lesf2+0x5e>
 80008aa:	46c0      	nop			; (mov r8, r8)

080008ac <__aeabi_i2f>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d013      	beq.n	80008da <__aeabi_i2f+0x2e>
 80008b2:	17c3      	asrs	r3, r0, #31
 80008b4:	18c5      	adds	r5, r0, r3
 80008b6:	405d      	eors	r5, r3
 80008b8:	0fc4      	lsrs	r4, r0, #31
 80008ba:	0028      	movs	r0, r5
 80008bc:	f001 fe9c 	bl	80025f8 <__clzsi2>
 80008c0:	239e      	movs	r3, #158	; 0x9e
 80008c2:	0001      	movs	r1, r0
 80008c4:	1a1b      	subs	r3, r3, r0
 80008c6:	2b96      	cmp	r3, #150	; 0x96
 80008c8:	dc0f      	bgt.n	80008ea <__aeabi_i2f+0x3e>
 80008ca:	2808      	cmp	r0, #8
 80008cc:	dd01      	ble.n	80008d2 <__aeabi_i2f+0x26>
 80008ce:	3908      	subs	r1, #8
 80008d0:	408d      	lsls	r5, r1
 80008d2:	026d      	lsls	r5, r5, #9
 80008d4:	0a6d      	lsrs	r5, r5, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e002      	b.n	80008e0 <__aeabi_i2f+0x34>
 80008da:	2400      	movs	r4, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	2500      	movs	r5, #0
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	4328      	orrs	r0, r5
 80008e4:	07e4      	lsls	r4, r4, #31
 80008e6:	4320      	orrs	r0, r4
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	2b99      	cmp	r3, #153	; 0x99
 80008ec:	dd0b      	ble.n	8000906 <__aeabi_i2f+0x5a>
 80008ee:	2205      	movs	r2, #5
 80008f0:	002e      	movs	r6, r5
 80008f2:	1a12      	subs	r2, r2, r0
 80008f4:	40d6      	lsrs	r6, r2
 80008f6:	0002      	movs	r2, r0
 80008f8:	321b      	adds	r2, #27
 80008fa:	4095      	lsls	r5, r2
 80008fc:	0028      	movs	r0, r5
 80008fe:	1e45      	subs	r5, r0, #1
 8000900:	41a8      	sbcs	r0, r5
 8000902:	0035      	movs	r5, r6
 8000904:	4305      	orrs	r5, r0
 8000906:	2905      	cmp	r1, #5
 8000908:	dd01      	ble.n	800090e <__aeabi_i2f+0x62>
 800090a:	1f4a      	subs	r2, r1, #5
 800090c:	4095      	lsls	r5, r2
 800090e:	002a      	movs	r2, r5
 8000910:	4e08      	ldr	r6, [pc, #32]	; (8000934 <__aeabi_i2f+0x88>)
 8000912:	4032      	ands	r2, r6
 8000914:	0768      	lsls	r0, r5, #29
 8000916:	d009      	beq.n	800092c <__aeabi_i2f+0x80>
 8000918:	200f      	movs	r0, #15
 800091a:	4028      	ands	r0, r5
 800091c:	2804      	cmp	r0, #4
 800091e:	d005      	beq.n	800092c <__aeabi_i2f+0x80>
 8000920:	3204      	adds	r2, #4
 8000922:	0150      	lsls	r0, r2, #5
 8000924:	d502      	bpl.n	800092c <__aeabi_i2f+0x80>
 8000926:	239f      	movs	r3, #159	; 0x9f
 8000928:	4032      	ands	r2, r6
 800092a:	1a5b      	subs	r3, r3, r1
 800092c:	0192      	lsls	r2, r2, #6
 800092e:	0a55      	lsrs	r5, r2, #9
 8000930:	b2d8      	uxtb	r0, r3
 8000932:	e7d5      	b.n	80008e0 <__aeabi_i2f+0x34>
 8000934:	fbffffff 	.word	0xfbffffff

08000938 <__aeabi_dadd>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	464f      	mov	r7, r9
 800093c:	46d6      	mov	lr, sl
 800093e:	4646      	mov	r6, r8
 8000940:	000d      	movs	r5, r1
 8000942:	0001      	movs	r1, r0
 8000944:	0018      	movs	r0, r3
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0017      	movs	r7, r2
 800094a:	032b      	lsls	r3, r5, #12
 800094c:	0a5a      	lsrs	r2, r3, #9
 800094e:	0f4b      	lsrs	r3, r1, #29
 8000950:	4313      	orrs	r3, r2
 8000952:	00ca      	lsls	r2, r1, #3
 8000954:	4691      	mov	r9, r2
 8000956:	0302      	lsls	r2, r0, #12
 8000958:	006e      	lsls	r6, r5, #1
 800095a:	0041      	lsls	r1, r0, #1
 800095c:	0a52      	lsrs	r2, r2, #9
 800095e:	0fec      	lsrs	r4, r5, #31
 8000960:	0f7d      	lsrs	r5, r7, #29
 8000962:	4315      	orrs	r5, r2
 8000964:	0d76      	lsrs	r6, r6, #21
 8000966:	0d49      	lsrs	r1, r1, #21
 8000968:	0fc0      	lsrs	r0, r0, #31
 800096a:	4682      	mov	sl, r0
 800096c:	46ac      	mov	ip, r5
 800096e:	00ff      	lsls	r7, r7, #3
 8000970:	1a72      	subs	r2, r6, r1
 8000972:	4284      	cmp	r4, r0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x40>
 8000976:	e098      	b.n	8000aaa <__aeabi_dadd+0x172>
 8000978:	2a00      	cmp	r2, #0
 800097a:	dc00      	bgt.n	800097e <__aeabi_dadd+0x46>
 800097c:	e081      	b.n	8000a82 <__aeabi_dadd+0x14a>
 800097e:	2900      	cmp	r1, #0
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x4c>
 8000982:	e0b6      	b.n	8000af2 <__aeabi_dadd+0x1ba>
 8000984:	49c9      	ldr	r1, [pc, #804]	; (8000cac <__aeabi_dadd+0x374>)
 8000986:	428e      	cmp	r6, r1
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x54>
 800098a:	e172      	b.n	8000c72 <__aeabi_dadd+0x33a>
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0028      	movs	r0, r5
 8000990:	0409      	lsls	r1, r1, #16
 8000992:	4308      	orrs	r0, r1
 8000994:	4684      	mov	ip, r0
 8000996:	2a38      	cmp	r2, #56	; 0x38
 8000998:	dd00      	ble.n	800099c <__aeabi_dadd+0x64>
 800099a:	e15e      	b.n	8000c5a <__aeabi_dadd+0x322>
 800099c:	2a1f      	cmp	r2, #31
 800099e:	dd00      	ble.n	80009a2 <__aeabi_dadd+0x6a>
 80009a0:	e1ee      	b.n	8000d80 <__aeabi_dadd+0x448>
 80009a2:	2020      	movs	r0, #32
 80009a4:	0039      	movs	r1, r7
 80009a6:	4665      	mov	r5, ip
 80009a8:	1a80      	subs	r0, r0, r2
 80009aa:	4087      	lsls	r7, r0
 80009ac:	40d1      	lsrs	r1, r2
 80009ae:	4085      	lsls	r5, r0
 80009b0:	430d      	orrs	r5, r1
 80009b2:	0039      	movs	r1, r7
 80009b4:	1e4f      	subs	r7, r1, #1
 80009b6:	41b9      	sbcs	r1, r7
 80009b8:	4667      	mov	r7, ip
 80009ba:	40d7      	lsrs	r7, r2
 80009bc:	4329      	orrs	r1, r5
 80009be:	1bdb      	subs	r3, r3, r7
 80009c0:	464a      	mov	r2, r9
 80009c2:	1a55      	subs	r5, r2, r1
 80009c4:	45a9      	cmp	r9, r5
 80009c6:	4189      	sbcs	r1, r1
 80009c8:	4249      	negs	r1, r1
 80009ca:	1a5b      	subs	r3, r3, r1
 80009cc:	4698      	mov	r8, r3
 80009ce:	4643      	mov	r3, r8
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	d400      	bmi.n	80009d6 <__aeabi_dadd+0x9e>
 80009d4:	e0cc      	b.n	8000b70 <__aeabi_dadd+0x238>
 80009d6:	4643      	mov	r3, r8
 80009d8:	025b      	lsls	r3, r3, #9
 80009da:	0a5b      	lsrs	r3, r3, #9
 80009dc:	4698      	mov	r8, r3
 80009de:	4643      	mov	r3, r8
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0xae>
 80009e4:	e12c      	b.n	8000c40 <__aeabi_dadd+0x308>
 80009e6:	4640      	mov	r0, r8
 80009e8:	f001 fe06 	bl	80025f8 <__clzsi2>
 80009ec:	0001      	movs	r1, r0
 80009ee:	3908      	subs	r1, #8
 80009f0:	2220      	movs	r2, #32
 80009f2:	0028      	movs	r0, r5
 80009f4:	4643      	mov	r3, r8
 80009f6:	1a52      	subs	r2, r2, r1
 80009f8:	408b      	lsls	r3, r1
 80009fa:	40d0      	lsrs	r0, r2
 80009fc:	408d      	lsls	r5, r1
 80009fe:	4303      	orrs	r3, r0
 8000a00:	428e      	cmp	r6, r1
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_dadd+0xce>
 8000a04:	e117      	b.n	8000c36 <__aeabi_dadd+0x2fe>
 8000a06:	1b8e      	subs	r6, r1, r6
 8000a08:	1c72      	adds	r2, r6, #1
 8000a0a:	2a1f      	cmp	r2, #31
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dadd+0xd8>
 8000a0e:	e1a7      	b.n	8000d60 <__aeabi_dadd+0x428>
 8000a10:	2120      	movs	r1, #32
 8000a12:	0018      	movs	r0, r3
 8000a14:	002e      	movs	r6, r5
 8000a16:	1a89      	subs	r1, r1, r2
 8000a18:	408d      	lsls	r5, r1
 8000a1a:	4088      	lsls	r0, r1
 8000a1c:	40d6      	lsrs	r6, r2
 8000a1e:	40d3      	lsrs	r3, r2
 8000a20:	1e69      	subs	r1, r5, #1
 8000a22:	418d      	sbcs	r5, r1
 8000a24:	4330      	orrs	r0, r6
 8000a26:	4698      	mov	r8, r3
 8000a28:	2600      	movs	r6, #0
 8000a2a:	4305      	orrs	r5, r0
 8000a2c:	076b      	lsls	r3, r5, #29
 8000a2e:	d009      	beq.n	8000a44 <__aeabi_dadd+0x10c>
 8000a30:	230f      	movs	r3, #15
 8000a32:	402b      	ands	r3, r5
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d005      	beq.n	8000a44 <__aeabi_dadd+0x10c>
 8000a38:	1d2b      	adds	r3, r5, #4
 8000a3a:	42ab      	cmp	r3, r5
 8000a3c:	41ad      	sbcs	r5, r5
 8000a3e:	426d      	negs	r5, r5
 8000a40:	44a8      	add	r8, r5
 8000a42:	001d      	movs	r5, r3
 8000a44:	4643      	mov	r3, r8
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	d400      	bmi.n	8000a4c <__aeabi_dadd+0x114>
 8000a4a:	e094      	b.n	8000b76 <__aeabi_dadd+0x23e>
 8000a4c:	4b97      	ldr	r3, [pc, #604]	; (8000cac <__aeabi_dadd+0x374>)
 8000a4e:	1c72      	adds	r2, r6, #1
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x11e>
 8000a54:	e09d      	b.n	8000b92 <__aeabi_dadd+0x25a>
 8000a56:	4641      	mov	r1, r8
 8000a58:	4b95      	ldr	r3, [pc, #596]	; (8000cb0 <__aeabi_dadd+0x378>)
 8000a5a:	08ed      	lsrs	r5, r5, #3
 8000a5c:	4019      	ands	r1, r3
 8000a5e:	000b      	movs	r3, r1
 8000a60:	0552      	lsls	r2, r2, #21
 8000a62:	0749      	lsls	r1, r1, #29
 8000a64:	025b      	lsls	r3, r3, #9
 8000a66:	4329      	orrs	r1, r5
 8000a68:	0b1b      	lsrs	r3, r3, #12
 8000a6a:	0d52      	lsrs	r2, r2, #21
 8000a6c:	0512      	lsls	r2, r2, #20
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	07e4      	lsls	r4, r4, #31
 8000a72:	4323      	orrs	r3, r4
 8000a74:	0008      	movs	r0, r1
 8000a76:	0019      	movs	r1, r3
 8000a78:	bce0      	pop	{r5, r6, r7}
 8000a7a:	46ba      	mov	sl, r7
 8000a7c:	46b1      	mov	r9, r6
 8000a7e:	46a8      	mov	r8, r5
 8000a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d043      	beq.n	8000b0e <__aeabi_dadd+0x1d6>
 8000a86:	1b8a      	subs	r2, r1, r6
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_dadd+0x156>
 8000a8c:	e12a      	b.n	8000ce4 <__aeabi_dadd+0x3ac>
 8000a8e:	464c      	mov	r4, r9
 8000a90:	431c      	orrs	r4, r3
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x15e>
 8000a94:	e1d1      	b.n	8000e3a <__aeabi_dadd+0x502>
 8000a96:	1e54      	subs	r4, r2, #1
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dadd+0x166>
 8000a9c:	e21f      	b.n	8000ede <__aeabi_dadd+0x5a6>
 8000a9e:	4d83      	ldr	r5, [pc, #524]	; (8000cac <__aeabi_dadd+0x374>)
 8000aa0:	42aa      	cmp	r2, r5
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x16e>
 8000aa4:	e272      	b.n	8000f8c <__aeabi_dadd+0x654>
 8000aa6:	0022      	movs	r2, r4
 8000aa8:	e123      	b.n	8000cf2 <__aeabi_dadd+0x3ba>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	dc00      	bgt.n	8000ab0 <__aeabi_dadd+0x178>
 8000aae:	e098      	b.n	8000be2 <__aeabi_dadd+0x2aa>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	d042      	beq.n	8000b3a <__aeabi_dadd+0x202>
 8000ab4:	497d      	ldr	r1, [pc, #500]	; (8000cac <__aeabi_dadd+0x374>)
 8000ab6:	428e      	cmp	r6, r1
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x184>
 8000aba:	e0da      	b.n	8000c72 <__aeabi_dadd+0x33a>
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	0028      	movs	r0, r5
 8000ac0:	0409      	lsls	r1, r1, #16
 8000ac2:	4308      	orrs	r0, r1
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	2a38      	cmp	r2, #56	; 0x38
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_dadd+0x194>
 8000aca:	e129      	b.n	8000d20 <__aeabi_dadd+0x3e8>
 8000acc:	2a1f      	cmp	r2, #31
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_dadd+0x19a>
 8000ad0:	e187      	b.n	8000de2 <__aeabi_dadd+0x4aa>
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	4665      	mov	r5, ip
 8000ad6:	3920      	subs	r1, #32
 8000ad8:	40cd      	lsrs	r5, r1
 8000ada:	2a20      	cmp	r2, #32
 8000adc:	d004      	beq.n	8000ae8 <__aeabi_dadd+0x1b0>
 8000ade:	2040      	movs	r0, #64	; 0x40
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	1a82      	subs	r2, r0, r2
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	430f      	orrs	r7, r1
 8000ae8:	0039      	movs	r1, r7
 8000aea:	1e4f      	subs	r7, r1, #1
 8000aec:	41b9      	sbcs	r1, r7
 8000aee:	430d      	orrs	r5, r1
 8000af0:	e11b      	b.n	8000d2a <__aeabi_dadd+0x3f2>
 8000af2:	0029      	movs	r1, r5
 8000af4:	4339      	orrs	r1, r7
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0x1c2>
 8000af8:	e0b5      	b.n	8000c66 <__aeabi_dadd+0x32e>
 8000afa:	1e51      	subs	r1, r2, #1
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x1ca>
 8000b00:	e1ab      	b.n	8000e5a <__aeabi_dadd+0x522>
 8000b02:	486a      	ldr	r0, [pc, #424]	; (8000cac <__aeabi_dadd+0x374>)
 8000b04:	4282      	cmp	r2, r0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x1d2>
 8000b08:	e1b2      	b.n	8000e70 <__aeabi_dadd+0x538>
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	e743      	b.n	8000996 <__aeabi_dadd+0x5e>
 8000b0e:	4969      	ldr	r1, [pc, #420]	; (8000cb4 <__aeabi_dadd+0x37c>)
 8000b10:	1c75      	adds	r5, r6, #1
 8000b12:	420d      	tst	r5, r1
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x1e0>
 8000b16:	e0cf      	b.n	8000cb8 <__aeabi_dadd+0x380>
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_dadd+0x1e6>
 8000b1c:	e193      	b.n	8000e46 <__aeabi_dadd+0x50e>
 8000b1e:	4649      	mov	r1, r9
 8000b20:	4319      	orrs	r1, r3
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x1ee>
 8000b24:	e1d1      	b.n	8000eca <__aeabi_dadd+0x592>
 8000b26:	4661      	mov	r1, ip
 8000b28:	4339      	orrs	r1, r7
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x1f6>
 8000b2c:	e1e3      	b.n	8000ef6 <__aeabi_dadd+0x5be>
 8000b2e:	4649      	mov	r1, r9
 8000b30:	0758      	lsls	r0, r3, #29
 8000b32:	08c9      	lsrs	r1, r1, #3
 8000b34:	4301      	orrs	r1, r0
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	e026      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000b3a:	0029      	movs	r1, r5
 8000b3c:	4339      	orrs	r1, r7
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x20a>
 8000b40:	e091      	b.n	8000c66 <__aeabi_dadd+0x32e>
 8000b42:	1e51      	subs	r1, r2, #1
 8000b44:	2a01      	cmp	r2, #1
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dadd+0x21c>
 8000b48:	4858      	ldr	r0, [pc, #352]	; (8000cac <__aeabi_dadd+0x374>)
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x218>
 8000b4e:	e18f      	b.n	8000e70 <__aeabi_dadd+0x538>
 8000b50:	000a      	movs	r2, r1
 8000b52:	e7b8      	b.n	8000ac6 <__aeabi_dadd+0x18e>
 8000b54:	003d      	movs	r5, r7
 8000b56:	444d      	add	r5, r9
 8000b58:	454d      	cmp	r5, r9
 8000b5a:	4189      	sbcs	r1, r1
 8000b5c:	4463      	add	r3, ip
 8000b5e:	4698      	mov	r8, r3
 8000b60:	4249      	negs	r1, r1
 8000b62:	4488      	add	r8, r1
 8000b64:	4643      	mov	r3, r8
 8000b66:	2602      	movs	r6, #2
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	d500      	bpl.n	8000b6e <__aeabi_dadd+0x236>
 8000b6c:	e0eb      	b.n	8000d46 <__aeabi_dadd+0x40e>
 8000b6e:	3e01      	subs	r6, #1
 8000b70:	076b      	lsls	r3, r5, #29
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dadd+0x23e>
 8000b74:	e75c      	b.n	8000a30 <__aeabi_dadd+0xf8>
 8000b76:	4643      	mov	r3, r8
 8000b78:	08e9      	lsrs	r1, r5, #3
 8000b7a:	075a      	lsls	r2, r3, #29
 8000b7c:	4311      	orrs	r1, r2
 8000b7e:	0032      	movs	r2, r6
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	484a      	ldr	r0, [pc, #296]	; (8000cac <__aeabi_dadd+0x374>)
 8000b84:	4282      	cmp	r2, r0
 8000b86:	d021      	beq.n	8000bcc <__aeabi_dadd+0x294>
 8000b88:	031b      	lsls	r3, r3, #12
 8000b8a:	0552      	lsls	r2, r2, #21
 8000b8c:	0b1b      	lsrs	r3, r3, #12
 8000b8e:	0d52      	lsrs	r2, r2, #21
 8000b90:	e76c      	b.n	8000a6c <__aeabi_dadd+0x134>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	e769      	b.n	8000a6c <__aeabi_dadd+0x134>
 8000b98:	002a      	movs	r2, r5
 8000b9a:	433a      	orrs	r2, r7
 8000b9c:	d069      	beq.n	8000c72 <__aeabi_dadd+0x33a>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	0758      	lsls	r0, r3, #29
 8000ba2:	08d1      	lsrs	r1, r2, #3
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	031b      	lsls	r3, r3, #12
 8000baa:	4308      	orrs	r0, r1
 8000bac:	421a      	tst	r2, r3
 8000bae:	d007      	beq.n	8000bc0 <__aeabi_dadd+0x288>
 8000bb0:	0029      	movs	r1, r5
 8000bb2:	08ed      	lsrs	r5, r5, #3
 8000bb4:	421d      	tst	r5, r3
 8000bb6:	d103      	bne.n	8000bc0 <__aeabi_dadd+0x288>
 8000bb8:	002a      	movs	r2, r5
 8000bba:	08ff      	lsrs	r7, r7, #3
 8000bbc:	0748      	lsls	r0, r1, #29
 8000bbe:	4338      	orrs	r0, r7
 8000bc0:	0f43      	lsrs	r3, r0, #29
 8000bc2:	00c1      	lsls	r1, r0, #3
 8000bc4:	075b      	lsls	r3, r3, #29
 8000bc6:	08c9      	lsrs	r1, r1, #3
 8000bc8:	4319      	orrs	r1, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x29c>
 8000bd2:	e213      	b.n	8000ffc <__aeabi_dadd+0x6c4>
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	4a33      	ldr	r2, [pc, #204]	; (8000cac <__aeabi_dadd+0x374>)
 8000bde:	0b1b      	lsrs	r3, r3, #12
 8000be0:	e744      	b.n	8000a6c <__aeabi_dadd+0x134>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d04b      	beq.n	8000c7e <__aeabi_dadd+0x346>
 8000be6:	1b8a      	subs	r2, r1, r6
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x2b6>
 8000bec:	e0e7      	b.n	8000dbe <__aeabi_dadd+0x486>
 8000bee:	482f      	ldr	r0, [pc, #188]	; (8000cac <__aeabi_dadd+0x374>)
 8000bf0:	4281      	cmp	r1, r0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x2be>
 8000bf4:	e195      	b.n	8000f22 <__aeabi_dadd+0x5ea>
 8000bf6:	2080      	movs	r0, #128	; 0x80
 8000bf8:	0400      	lsls	r0, r0, #16
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	2a38      	cmp	r2, #56	; 0x38
 8000bfe:	dd00      	ble.n	8000c02 <__aeabi_dadd+0x2ca>
 8000c00:	e143      	b.n	8000e8a <__aeabi_dadd+0x552>
 8000c02:	2a1f      	cmp	r2, #31
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_dadd+0x2d0>
 8000c06:	e1db      	b.n	8000fc0 <__aeabi_dadd+0x688>
 8000c08:	2020      	movs	r0, #32
 8000c0a:	001d      	movs	r5, r3
 8000c0c:	464e      	mov	r6, r9
 8000c0e:	1a80      	subs	r0, r0, r2
 8000c10:	4085      	lsls	r5, r0
 8000c12:	40d6      	lsrs	r6, r2
 8000c14:	4335      	orrs	r5, r6
 8000c16:	464e      	mov	r6, r9
 8000c18:	4086      	lsls	r6, r0
 8000c1a:	0030      	movs	r0, r6
 8000c1c:	40d3      	lsrs	r3, r2
 8000c1e:	1e46      	subs	r6, r0, #1
 8000c20:	41b0      	sbcs	r0, r6
 8000c22:	449c      	add	ip, r3
 8000c24:	4305      	orrs	r5, r0
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	42bd      	cmp	r5, r7
 8000c2a:	419b      	sbcs	r3, r3
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	4463      	add	r3, ip
 8000c30:	4698      	mov	r8, r3
 8000c32:	000e      	movs	r6, r1
 8000c34:	e07f      	b.n	8000d36 <__aeabi_dadd+0x3fe>
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <__aeabi_dadd+0x378>)
 8000c38:	1a76      	subs	r6, r6, r1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	e6f5      	b.n	8000a2c <__aeabi_dadd+0xf4>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f001 fcd9 	bl	80025f8 <__clzsi2>
 8000c46:	0001      	movs	r1, r0
 8000c48:	3118      	adds	r1, #24
 8000c4a:	291f      	cmp	r1, #31
 8000c4c:	dc00      	bgt.n	8000c50 <__aeabi_dadd+0x318>
 8000c4e:	e6cf      	b.n	80009f0 <__aeabi_dadd+0xb8>
 8000c50:	002b      	movs	r3, r5
 8000c52:	3808      	subs	r0, #8
 8000c54:	4083      	lsls	r3, r0
 8000c56:	2500      	movs	r5, #0
 8000c58:	e6d2      	b.n	8000a00 <__aeabi_dadd+0xc8>
 8000c5a:	4662      	mov	r2, ip
 8000c5c:	433a      	orrs	r2, r7
 8000c5e:	0011      	movs	r1, r2
 8000c60:	1e4f      	subs	r7, r1, #1
 8000c62:	41b9      	sbcs	r1, r7
 8000c64:	e6ac      	b.n	80009c0 <__aeabi_dadd+0x88>
 8000c66:	4649      	mov	r1, r9
 8000c68:	0758      	lsls	r0, r3, #29
 8000c6a:	08c9      	lsrs	r1, r1, #3
 8000c6c:	4301      	orrs	r1, r0
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	e787      	b.n	8000b82 <__aeabi_dadd+0x24a>
 8000c72:	4649      	mov	r1, r9
 8000c74:	075a      	lsls	r2, r3, #29
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	4311      	orrs	r1, r2
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	e7a6      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <__aeabi_dadd+0x37c>)
 8000c80:	1c70      	adds	r0, r6, #1
 8000c82:	4208      	tst	r0, r1
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x350>
 8000c86:	e0bb      	b.n	8000e00 <__aeabi_dadd+0x4c8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x356>
 8000c8c:	e114      	b.n	8000eb8 <__aeabi_dadd+0x580>
 8000c8e:	4649      	mov	r1, r9
 8000c90:	4319      	orrs	r1, r3
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x35e>
 8000c94:	e175      	b.n	8000f82 <__aeabi_dadd+0x64a>
 8000c96:	0029      	movs	r1, r5
 8000c98:	4339      	orrs	r1, r7
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_dadd+0x366>
 8000c9c:	e17e      	b.n	8000f9c <__aeabi_dadd+0x664>
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	0758      	lsls	r0, r3, #29
 8000ca2:	08c9      	lsrs	r1, r1, #3
 8000ca4:	4301      	orrs	r1, r0
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	e76e      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	000007ff 	.word	0x000007ff
 8000cb0:	ff7fffff 	.word	0xff7fffff
 8000cb4:	000007fe 	.word	0x000007fe
 8000cb8:	4649      	mov	r1, r9
 8000cba:	1bcd      	subs	r5, r1, r7
 8000cbc:	4661      	mov	r1, ip
 8000cbe:	1a58      	subs	r0, r3, r1
 8000cc0:	45a9      	cmp	r9, r5
 8000cc2:	4189      	sbcs	r1, r1
 8000cc4:	4249      	negs	r1, r1
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	0001      	movs	r1, r0
 8000cca:	4640      	mov	r0, r8
 8000ccc:	1a09      	subs	r1, r1, r0
 8000cce:	4688      	mov	r8, r1
 8000cd0:	0209      	lsls	r1, r1, #8
 8000cd2:	d500      	bpl.n	8000cd6 <__aeabi_dadd+0x39e>
 8000cd4:	e0a6      	b.n	8000e24 <__aeabi_dadd+0x4ec>
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	4329      	orrs	r1, r5
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x3a6>
 8000cdc:	e67f      	b.n	80009de <__aeabi_dadd+0xa6>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	e751      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000ce4:	4cc7      	ldr	r4, [pc, #796]	; (8001004 <__aeabi_dadd+0x6cc>)
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x3b4>
 8000cea:	e0c7      	b.n	8000e7c <__aeabi_dadd+0x544>
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	2a38      	cmp	r2, #56	; 0x38
 8000cf4:	dc54      	bgt.n	8000da0 <__aeabi_dadd+0x468>
 8000cf6:	2a1f      	cmp	r2, #31
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x3c4>
 8000cfa:	e0cc      	b.n	8000e96 <__aeabi_dadd+0x55e>
 8000cfc:	2420      	movs	r4, #32
 8000cfe:	4648      	mov	r0, r9
 8000d00:	1aa4      	subs	r4, r4, r2
 8000d02:	001d      	movs	r5, r3
 8000d04:	464e      	mov	r6, r9
 8000d06:	40a0      	lsls	r0, r4
 8000d08:	40d6      	lsrs	r6, r2
 8000d0a:	40a5      	lsls	r5, r4
 8000d0c:	0004      	movs	r4, r0
 8000d0e:	40d3      	lsrs	r3, r2
 8000d10:	4662      	mov	r2, ip
 8000d12:	4335      	orrs	r5, r6
 8000d14:	1e66      	subs	r6, r4, #1
 8000d16:	41b4      	sbcs	r4, r6
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	469c      	mov	ip, r3
 8000d1c:	4325      	orrs	r5, r4
 8000d1e:	e044      	b.n	8000daa <__aeabi_dadd+0x472>
 8000d20:	4662      	mov	r2, ip
 8000d22:	433a      	orrs	r2, r7
 8000d24:	0015      	movs	r5, r2
 8000d26:	1e6f      	subs	r7, r5, #1
 8000d28:	41bd      	sbcs	r5, r7
 8000d2a:	444d      	add	r5, r9
 8000d2c:	454d      	cmp	r5, r9
 8000d2e:	4189      	sbcs	r1, r1
 8000d30:	4249      	negs	r1, r1
 8000d32:	4688      	mov	r8, r1
 8000d34:	4498      	add	r8, r3
 8000d36:	4643      	mov	r3, r8
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	d400      	bmi.n	8000d3e <__aeabi_dadd+0x406>
 8000d3c:	e718      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000d3e:	4bb1      	ldr	r3, [pc, #708]	; (8001004 <__aeabi_dadd+0x6cc>)
 8000d40:	3601      	adds	r6, #1
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d049      	beq.n	8000dda <__aeabi_dadd+0x4a2>
 8000d46:	4642      	mov	r2, r8
 8000d48:	4baf      	ldr	r3, [pc, #700]	; (8001008 <__aeabi_dadd+0x6d0>)
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	086a      	lsrs	r2, r5, #1
 8000d52:	400d      	ands	r5, r1
 8000d54:	4315      	orrs	r5, r2
 8000d56:	07d9      	lsls	r1, r3, #31
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	430d      	orrs	r5, r1
 8000d5e:	e665      	b.n	8000a2c <__aeabi_dadd+0xf4>
 8000d60:	0018      	movs	r0, r3
 8000d62:	3e1f      	subs	r6, #31
 8000d64:	40f0      	lsrs	r0, r6
 8000d66:	2a20      	cmp	r2, #32
 8000d68:	d003      	beq.n	8000d72 <__aeabi_dadd+0x43a>
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	431d      	orrs	r5, r3
 8000d72:	1e69      	subs	r1, r5, #1
 8000d74:	418d      	sbcs	r5, r1
 8000d76:	2300      	movs	r3, #0
 8000d78:	2600      	movs	r6, #0
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	4305      	orrs	r5, r0
 8000d7e:	e6f7      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000d80:	0011      	movs	r1, r2
 8000d82:	4665      	mov	r5, ip
 8000d84:	3920      	subs	r1, #32
 8000d86:	40cd      	lsrs	r5, r1
 8000d88:	2a20      	cmp	r2, #32
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_dadd+0x45e>
 8000d8c:	2040      	movs	r0, #64	; 0x40
 8000d8e:	4661      	mov	r1, ip
 8000d90:	1a82      	subs	r2, r0, r2
 8000d92:	4091      	lsls	r1, r2
 8000d94:	430f      	orrs	r7, r1
 8000d96:	0039      	movs	r1, r7
 8000d98:	1e4f      	subs	r7, r1, #1
 8000d9a:	41b9      	sbcs	r1, r7
 8000d9c:	4329      	orrs	r1, r5
 8000d9e:	e60f      	b.n	80009c0 <__aeabi_dadd+0x88>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4313      	orrs	r3, r2
 8000da4:	001d      	movs	r5, r3
 8000da6:	1e6b      	subs	r3, r5, #1
 8000da8:	419d      	sbcs	r5, r3
 8000daa:	1b7d      	subs	r5, r7, r5
 8000dac:	42af      	cmp	r7, r5
 8000dae:	419b      	sbcs	r3, r3
 8000db0:	4662      	mov	r2, ip
 8000db2:	425b      	negs	r3, r3
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4698      	mov	r8, r3
 8000db8:	4654      	mov	r4, sl
 8000dba:	000e      	movs	r6, r1
 8000dbc:	e607      	b.n	80009ce <__aeabi_dadd+0x96>
 8000dbe:	4648      	mov	r0, r9
 8000dc0:	4318      	orrs	r0, r3
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dadd+0x48e>
 8000dc4:	e0b3      	b.n	8000f2e <__aeabi_dadd+0x5f6>
 8000dc6:	1e50      	subs	r0, r2, #1
 8000dc8:	2a01      	cmp	r2, #1
 8000dca:	d100      	bne.n	8000dce <__aeabi_dadd+0x496>
 8000dcc:	e10d      	b.n	8000fea <__aeabi_dadd+0x6b2>
 8000dce:	4d8d      	ldr	r5, [pc, #564]	; (8001004 <__aeabi_dadd+0x6cc>)
 8000dd0:	42aa      	cmp	r2, r5
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x49e>
 8000dd4:	e0a5      	b.n	8000f22 <__aeabi_dadd+0x5ea>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	e710      	b.n	8000bfc <__aeabi_dadd+0x2c4>
 8000dda:	0032      	movs	r2, r6
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	e644      	b.n	8000a6c <__aeabi_dadd+0x134>
 8000de2:	2120      	movs	r1, #32
 8000de4:	0038      	movs	r0, r7
 8000de6:	1a89      	subs	r1, r1, r2
 8000de8:	4665      	mov	r5, ip
 8000dea:	408f      	lsls	r7, r1
 8000dec:	408d      	lsls	r5, r1
 8000dee:	40d0      	lsrs	r0, r2
 8000df0:	1e79      	subs	r1, r7, #1
 8000df2:	418f      	sbcs	r7, r1
 8000df4:	4305      	orrs	r5, r0
 8000df6:	433d      	orrs	r5, r7
 8000df8:	4667      	mov	r7, ip
 8000dfa:	40d7      	lsrs	r7, r2
 8000dfc:	19db      	adds	r3, r3, r7
 8000dfe:	e794      	b.n	8000d2a <__aeabi_dadd+0x3f2>
 8000e00:	4a80      	ldr	r2, [pc, #512]	; (8001004 <__aeabi_dadd+0x6cc>)
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d100      	bne.n	8000e08 <__aeabi_dadd+0x4d0>
 8000e06:	e0ec      	b.n	8000fe2 <__aeabi_dadd+0x6aa>
 8000e08:	0039      	movs	r1, r7
 8000e0a:	4449      	add	r1, r9
 8000e0c:	4549      	cmp	r1, r9
 8000e0e:	4192      	sbcs	r2, r2
 8000e10:	4463      	add	r3, ip
 8000e12:	4252      	negs	r2, r2
 8000e14:	189b      	adds	r3, r3, r2
 8000e16:	07dd      	lsls	r5, r3, #31
 8000e18:	0849      	lsrs	r1, r1, #1
 8000e1a:	085b      	lsrs	r3, r3, #1
 8000e1c:	4698      	mov	r8, r3
 8000e1e:	0006      	movs	r6, r0
 8000e20:	430d      	orrs	r5, r1
 8000e22:	e6a5      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000e24:	464a      	mov	r2, r9
 8000e26:	1abd      	subs	r5, r7, r2
 8000e28:	42af      	cmp	r7, r5
 8000e2a:	4189      	sbcs	r1, r1
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	4249      	negs	r1, r1
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	1a5b      	subs	r3, r3, r1
 8000e34:	4698      	mov	r8, r3
 8000e36:	4654      	mov	r4, sl
 8000e38:	e5d1      	b.n	80009de <__aeabi_dadd+0xa6>
 8000e3a:	076c      	lsls	r4, r5, #29
 8000e3c:	08f9      	lsrs	r1, r7, #3
 8000e3e:	4321      	orrs	r1, r4
 8000e40:	08eb      	lsrs	r3, r5, #3
 8000e42:	0004      	movs	r4, r0
 8000e44:	e69d      	b.n	8000b82 <__aeabi_dadd+0x24a>
 8000e46:	464a      	mov	r2, r9
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	d175      	bne.n	8000f38 <__aeabi_dadd+0x600>
 8000e4c:	4661      	mov	r1, ip
 8000e4e:	4339      	orrs	r1, r7
 8000e50:	d114      	bne.n	8000e7c <__aeabi_dadd+0x544>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	2400      	movs	r4, #0
 8000e56:	031b      	lsls	r3, r3, #12
 8000e58:	e6bc      	b.n	8000bd4 <__aeabi_dadd+0x29c>
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	1bd5      	subs	r5, r2, r7
 8000e5e:	45a9      	cmp	r9, r5
 8000e60:	4189      	sbcs	r1, r1
 8000e62:	4662      	mov	r2, ip
 8000e64:	4249      	negs	r1, r1
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	2601      	movs	r6, #1
 8000e6e:	e5ae      	b.n	80009ce <__aeabi_dadd+0x96>
 8000e70:	464a      	mov	r2, r9
 8000e72:	08d1      	lsrs	r1, r2, #3
 8000e74:	075a      	lsls	r2, r3, #29
 8000e76:	4311      	orrs	r1, r2
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	e6a7      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	08f9      	lsrs	r1, r7, #3
 8000e80:	075a      	lsls	r2, r3, #29
 8000e82:	4654      	mov	r4, sl
 8000e84:	4311      	orrs	r1, r2
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	e6a0      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	001d      	movs	r5, r3
 8000e90:	1e6b      	subs	r3, r5, #1
 8000e92:	419d      	sbcs	r5, r3
 8000e94:	e6c7      	b.n	8000c26 <__aeabi_dadd+0x2ee>
 8000e96:	0014      	movs	r4, r2
 8000e98:	001e      	movs	r6, r3
 8000e9a:	3c20      	subs	r4, #32
 8000e9c:	40e6      	lsrs	r6, r4
 8000e9e:	2a20      	cmp	r2, #32
 8000ea0:	d005      	beq.n	8000eae <__aeabi_dadd+0x576>
 8000ea2:	2440      	movs	r4, #64	; 0x40
 8000ea4:	1aa2      	subs	r2, r4, r2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	4691      	mov	r9, r2
 8000eae:	464d      	mov	r5, r9
 8000eb0:	1e6b      	subs	r3, r5, #1
 8000eb2:	419d      	sbcs	r5, r3
 8000eb4:	4335      	orrs	r5, r6
 8000eb6:	e778      	b.n	8000daa <__aeabi_dadd+0x472>
 8000eb8:	464a      	mov	r2, r9
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_dadd+0x588>
 8000ebe:	e66b      	b.n	8000b98 <__aeabi_dadd+0x260>
 8000ec0:	076b      	lsls	r3, r5, #29
 8000ec2:	08f9      	lsrs	r1, r7, #3
 8000ec4:	4319      	orrs	r1, r3
 8000ec6:	08eb      	lsrs	r3, r5, #3
 8000ec8:	e680      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000eca:	4661      	mov	r1, ip
 8000ecc:	4339      	orrs	r1, r7
 8000ece:	d054      	beq.n	8000f7a <__aeabi_dadd+0x642>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	08f9      	lsrs	r1, r7, #3
 8000ed4:	075c      	lsls	r4, r3, #29
 8000ed6:	4321      	orrs	r1, r4
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	0004      	movs	r4, r0
 8000edc:	e654      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000ede:	464a      	mov	r2, r9
 8000ee0:	1abd      	subs	r5, r7, r2
 8000ee2:	42af      	cmp	r7, r5
 8000ee4:	4189      	sbcs	r1, r1
 8000ee6:	4662      	mov	r2, ip
 8000ee8:	4249      	negs	r1, r1
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	4698      	mov	r8, r3
 8000ef0:	0004      	movs	r4, r0
 8000ef2:	2601      	movs	r6, #1
 8000ef4:	e56b      	b.n	80009ce <__aeabi_dadd+0x96>
 8000ef6:	464a      	mov	r2, r9
 8000ef8:	1bd5      	subs	r5, r2, r7
 8000efa:	45a9      	cmp	r9, r5
 8000efc:	4189      	sbcs	r1, r1
 8000efe:	4662      	mov	r2, ip
 8000f00:	4249      	negs	r1, r1
 8000f02:	1a9a      	subs	r2, r3, r2
 8000f04:	1a52      	subs	r2, r2, r1
 8000f06:	4690      	mov	r8, r2
 8000f08:	0212      	lsls	r2, r2, #8
 8000f0a:	d532      	bpl.n	8000f72 <__aeabi_dadd+0x63a>
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	1abd      	subs	r5, r7, r2
 8000f10:	42af      	cmp	r7, r5
 8000f12:	4189      	sbcs	r1, r1
 8000f14:	4662      	mov	r2, ip
 8000f16:	4249      	negs	r1, r1
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	1a5b      	subs	r3, r3, r1
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	0004      	movs	r4, r0
 8000f20:	e584      	b.n	8000a2c <__aeabi_dadd+0xf4>
 8000f22:	4663      	mov	r3, ip
 8000f24:	08f9      	lsrs	r1, r7, #3
 8000f26:	075a      	lsls	r2, r3, #29
 8000f28:	4311      	orrs	r1, r2
 8000f2a:	08db      	lsrs	r3, r3, #3
 8000f2c:	e64e      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000f2e:	08f9      	lsrs	r1, r7, #3
 8000f30:	0768      	lsls	r0, r5, #29
 8000f32:	4301      	orrs	r1, r0
 8000f34:	08eb      	lsrs	r3, r5, #3
 8000f36:	e624      	b.n	8000b82 <__aeabi_dadd+0x24a>
 8000f38:	4662      	mov	r2, ip
 8000f3a:	433a      	orrs	r2, r7
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x608>
 8000f3e:	e698      	b.n	8000c72 <__aeabi_dadd+0x33a>
 8000f40:	464a      	mov	r2, r9
 8000f42:	08d1      	lsrs	r1, r2, #3
 8000f44:	075a      	lsls	r2, r3, #29
 8000f46:	4311      	orrs	r1, r2
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	031b      	lsls	r3, r3, #12
 8000f4e:	421a      	tst	r2, r3
 8000f50:	d008      	beq.n	8000f64 <__aeabi_dadd+0x62c>
 8000f52:	4660      	mov	r0, ip
 8000f54:	08c5      	lsrs	r5, r0, #3
 8000f56:	421d      	tst	r5, r3
 8000f58:	d104      	bne.n	8000f64 <__aeabi_dadd+0x62c>
 8000f5a:	4654      	mov	r4, sl
 8000f5c:	002a      	movs	r2, r5
 8000f5e:	08f9      	lsrs	r1, r7, #3
 8000f60:	0743      	lsls	r3, r0, #29
 8000f62:	4319      	orrs	r1, r3
 8000f64:	0f4b      	lsrs	r3, r1, #29
 8000f66:	00c9      	lsls	r1, r1, #3
 8000f68:	075b      	lsls	r3, r3, #29
 8000f6a:	08c9      	lsrs	r1, r1, #3
 8000f6c:	4319      	orrs	r1, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	e62c      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000f72:	4641      	mov	r1, r8
 8000f74:	4329      	orrs	r1, r5
 8000f76:	d000      	beq.n	8000f7a <__aeabi_dadd+0x642>
 8000f78:	e5fa      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	2400      	movs	r4, #0
 8000f80:	e602      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000f82:	076b      	lsls	r3, r5, #29
 8000f84:	08f9      	lsrs	r1, r7, #3
 8000f86:	4319      	orrs	r1, r3
 8000f88:	08eb      	lsrs	r3, r5, #3
 8000f8a:	e5fd      	b.n	8000b88 <__aeabi_dadd+0x250>
 8000f8c:	4663      	mov	r3, ip
 8000f8e:	08f9      	lsrs	r1, r7, #3
 8000f90:	075b      	lsls	r3, r3, #29
 8000f92:	4319      	orrs	r1, r3
 8000f94:	4663      	mov	r3, ip
 8000f96:	0004      	movs	r4, r0
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	e617      	b.n	8000bcc <__aeabi_dadd+0x294>
 8000f9c:	003d      	movs	r5, r7
 8000f9e:	444d      	add	r5, r9
 8000fa0:	4463      	add	r3, ip
 8000fa2:	454d      	cmp	r5, r9
 8000fa4:	4189      	sbcs	r1, r1
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	4249      	negs	r1, r1
 8000faa:	4488      	add	r8, r1
 8000fac:	4643      	mov	r3, r8
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	d400      	bmi.n	8000fb4 <__aeabi_dadd+0x67c>
 8000fb2:	e5dd      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000fb4:	4642      	mov	r2, r8
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <__aeabi_dadd+0x6d0>)
 8000fb8:	2601      	movs	r6, #1
 8000fba:	401a      	ands	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	e5d7      	b.n	8000b70 <__aeabi_dadd+0x238>
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	001e      	movs	r6, r3
 8000fc4:	3820      	subs	r0, #32
 8000fc6:	40c6      	lsrs	r6, r0
 8000fc8:	2a20      	cmp	r2, #32
 8000fca:	d005      	beq.n	8000fd8 <__aeabi_dadd+0x6a0>
 8000fcc:	2040      	movs	r0, #64	; 0x40
 8000fce:	1a82      	subs	r2, r0, r2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	4691      	mov	r9, r2
 8000fd8:	464d      	mov	r5, r9
 8000fda:	1e6b      	subs	r3, r5, #1
 8000fdc:	419d      	sbcs	r5, r3
 8000fde:	4335      	orrs	r5, r6
 8000fe0:	e621      	b.n	8000c26 <__aeabi_dadd+0x2ee>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	e540      	b.n	8000a6c <__aeabi_dadd+0x134>
 8000fea:	464a      	mov	r2, r9
 8000fec:	19d5      	adds	r5, r2, r7
 8000fee:	42bd      	cmp	r5, r7
 8000ff0:	4189      	sbcs	r1, r1
 8000ff2:	4463      	add	r3, ip
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	4249      	negs	r1, r1
 8000ff8:	4488      	add	r8, r1
 8000ffa:	e5b3      	b.n	8000b64 <__aeabi_dadd+0x22c>
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4a01      	ldr	r2, [pc, #4]	; (8001004 <__aeabi_dadd+0x6cc>)
 8001000:	000b      	movs	r3, r1
 8001002:	e533      	b.n	8000a6c <__aeabi_dadd+0x134>
 8001004:	000007ff 	.word	0x000007ff
 8001008:	ff7fffff 	.word	0xff7fffff

0800100c <__aeabi_ddiv>:
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	4657      	mov	r7, sl
 8001010:	464e      	mov	r6, r9
 8001012:	4645      	mov	r5, r8
 8001014:	46de      	mov	lr, fp
 8001016:	b5e0      	push	{r5, r6, r7, lr}
 8001018:	4681      	mov	r9, r0
 800101a:	0005      	movs	r5, r0
 800101c:	030c      	lsls	r4, r1, #12
 800101e:	0048      	lsls	r0, r1, #1
 8001020:	4692      	mov	sl, r2
 8001022:	001f      	movs	r7, r3
 8001024:	b085      	sub	sp, #20
 8001026:	0b24      	lsrs	r4, r4, #12
 8001028:	0d40      	lsrs	r0, r0, #21
 800102a:	0fce      	lsrs	r6, r1, #31
 800102c:	2800      	cmp	r0, #0
 800102e:	d059      	beq.n	80010e4 <__aeabi_ddiv+0xd8>
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <__aeabi_ddiv+0x244>)
 8001032:	4298      	cmp	r0, r3
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x2c>
 8001036:	e098      	b.n	800116a <__aeabi_ddiv+0x15e>
 8001038:	0f6b      	lsrs	r3, r5, #29
 800103a:	00e4      	lsls	r4, r4, #3
 800103c:	431c      	orrs	r4, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	4323      	orrs	r3, r4
 8001044:	4698      	mov	r8, r3
 8001046:	4b83      	ldr	r3, [pc, #524]	; (8001254 <__aeabi_ddiv+0x248>)
 8001048:	00ed      	lsls	r5, r5, #3
 800104a:	469b      	mov	fp, r3
 800104c:	2300      	movs	r3, #0
 800104e:	4699      	mov	r9, r3
 8001050:	4483      	add	fp, r0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	033c      	lsls	r4, r7, #12
 8001056:	007b      	lsls	r3, r7, #1
 8001058:	4650      	mov	r0, sl
 800105a:	0b24      	lsrs	r4, r4, #12
 800105c:	0d5b      	lsrs	r3, r3, #21
 800105e:	0fff      	lsrs	r7, r7, #31
 8001060:	2b00      	cmp	r3, #0
 8001062:	d067      	beq.n	8001134 <__aeabi_ddiv+0x128>
 8001064:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <__aeabi_ddiv+0x244>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d018      	beq.n	800109c <__aeabi_ddiv+0x90>
 800106a:	497a      	ldr	r1, [pc, #488]	; (8001254 <__aeabi_ddiv+0x248>)
 800106c:	0f42      	lsrs	r2, r0, #29
 800106e:	468c      	mov	ip, r1
 8001070:	00e4      	lsls	r4, r4, #3
 8001072:	4659      	mov	r1, fp
 8001074:	4314      	orrs	r4, r2
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	4463      	add	r3, ip
 800107a:	0412      	lsls	r2, r2, #16
 800107c:	1acb      	subs	r3, r1, r3
 800107e:	4314      	orrs	r4, r2
 8001080:	469b      	mov	fp, r3
 8001082:	00c2      	lsls	r2, r0, #3
 8001084:	2000      	movs	r0, #0
 8001086:	0033      	movs	r3, r6
 8001088:	407b      	eors	r3, r7
 800108a:	469a      	mov	sl, r3
 800108c:	464b      	mov	r3, r9
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d900      	bls.n	8001094 <__aeabi_ddiv+0x88>
 8001092:	e0ef      	b.n	8001274 <__aeabi_ddiv+0x268>
 8001094:	4970      	ldr	r1, [pc, #448]	; (8001258 <__aeabi_ddiv+0x24c>)
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	58cb      	ldr	r3, [r1, r3]
 800109a:	469f      	mov	pc, r3
 800109c:	4b6f      	ldr	r3, [pc, #444]	; (800125c <__aeabi_ddiv+0x250>)
 800109e:	4652      	mov	r2, sl
 80010a0:	469c      	mov	ip, r3
 80010a2:	4322      	orrs	r2, r4
 80010a4:	44e3      	add	fp, ip
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d000      	beq.n	80010ac <__aeabi_ddiv+0xa0>
 80010aa:	e095      	b.n	80011d8 <__aeabi_ddiv+0x1cc>
 80010ac:	4649      	mov	r1, r9
 80010ae:	2302      	movs	r3, #2
 80010b0:	4319      	orrs	r1, r3
 80010b2:	4689      	mov	r9, r1
 80010b4:	2400      	movs	r4, #0
 80010b6:	2002      	movs	r0, #2
 80010b8:	e7e5      	b.n	8001086 <__aeabi_ddiv+0x7a>
 80010ba:	2300      	movs	r3, #0
 80010bc:	2400      	movs	r4, #0
 80010be:	2500      	movs	r5, #0
 80010c0:	4652      	mov	r2, sl
 80010c2:	051b      	lsls	r3, r3, #20
 80010c4:	4323      	orrs	r3, r4
 80010c6:	07d2      	lsls	r2, r2, #31
 80010c8:	4313      	orrs	r3, r2
 80010ca:	0028      	movs	r0, r5
 80010cc:	0019      	movs	r1, r3
 80010ce:	b005      	add	sp, #20
 80010d0:	bcf0      	pop	{r4, r5, r6, r7}
 80010d2:	46bb      	mov	fp, r7
 80010d4:	46b2      	mov	sl, r6
 80010d6:	46a9      	mov	r9, r5
 80010d8:	46a0      	mov	r8, r4
 80010da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010dc:	2400      	movs	r4, #0
 80010de:	2500      	movs	r5, #0
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <__aeabi_ddiv+0x244>)
 80010e2:	e7ed      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 80010e4:	464b      	mov	r3, r9
 80010e6:	4323      	orrs	r3, r4
 80010e8:	4698      	mov	r8, r3
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0xe2>
 80010ec:	e089      	b.n	8001202 <__aeabi_ddiv+0x1f6>
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_ddiv+0xe8>
 80010f2:	e1e0      	b.n	80014b6 <__aeabi_ddiv+0x4aa>
 80010f4:	0020      	movs	r0, r4
 80010f6:	f001 fa7f 	bl	80025f8 <__clzsi2>
 80010fa:	0001      	movs	r1, r0
 80010fc:	0002      	movs	r2, r0
 80010fe:	390b      	subs	r1, #11
 8001100:	231d      	movs	r3, #29
 8001102:	1a5b      	subs	r3, r3, r1
 8001104:	4649      	mov	r1, r9
 8001106:	0010      	movs	r0, r2
 8001108:	40d9      	lsrs	r1, r3
 800110a:	3808      	subs	r0, #8
 800110c:	4084      	lsls	r4, r0
 800110e:	000b      	movs	r3, r1
 8001110:	464d      	mov	r5, r9
 8001112:	4323      	orrs	r3, r4
 8001114:	4698      	mov	r8, r3
 8001116:	4085      	lsls	r5, r0
 8001118:	4851      	ldr	r0, [pc, #324]	; (8001260 <__aeabi_ddiv+0x254>)
 800111a:	033c      	lsls	r4, r7, #12
 800111c:	1a83      	subs	r3, r0, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	007b      	lsls	r3, r7, #1
 8001128:	4650      	mov	r0, sl
 800112a:	0b24      	lsrs	r4, r4, #12
 800112c:	0d5b      	lsrs	r3, r3, #21
 800112e:	0fff      	lsrs	r7, r7, #31
 8001130:	2b00      	cmp	r3, #0
 8001132:	d197      	bne.n	8001064 <__aeabi_ddiv+0x58>
 8001134:	4652      	mov	r2, sl
 8001136:	4322      	orrs	r2, r4
 8001138:	d055      	beq.n	80011e6 <__aeabi_ddiv+0x1da>
 800113a:	2c00      	cmp	r4, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_ddiv+0x134>
 800113e:	e1ca      	b.n	80014d6 <__aeabi_ddiv+0x4ca>
 8001140:	0020      	movs	r0, r4
 8001142:	f001 fa59 	bl	80025f8 <__clzsi2>
 8001146:	0002      	movs	r2, r0
 8001148:	3a0b      	subs	r2, #11
 800114a:	231d      	movs	r3, #29
 800114c:	0001      	movs	r1, r0
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	4652      	mov	r2, sl
 8001152:	3908      	subs	r1, #8
 8001154:	40da      	lsrs	r2, r3
 8001156:	408c      	lsls	r4, r1
 8001158:	4314      	orrs	r4, r2
 800115a:	4652      	mov	r2, sl
 800115c:	408a      	lsls	r2, r1
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <__aeabi_ddiv+0x258>)
 8001160:	4458      	add	r0, fp
 8001162:	469b      	mov	fp, r3
 8001164:	4483      	add	fp, r0
 8001166:	2000      	movs	r0, #0
 8001168:	e78d      	b.n	8001086 <__aeabi_ddiv+0x7a>
 800116a:	464b      	mov	r3, r9
 800116c:	4323      	orrs	r3, r4
 800116e:	4698      	mov	r8, r3
 8001170:	d140      	bne.n	80011f4 <__aeabi_ddiv+0x1e8>
 8001172:	2308      	movs	r3, #8
 8001174:	4699      	mov	r9, r3
 8001176:	3b06      	subs	r3, #6
 8001178:	2500      	movs	r5, #0
 800117a:	4683      	mov	fp, r0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	e769      	b.n	8001054 <__aeabi_ddiv+0x48>
 8001180:	46b2      	mov	sl, r6
 8001182:	9b00      	ldr	r3, [sp, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d0a9      	beq.n	80010dc <__aeabi_ddiv+0xd0>
 8001188:	2b03      	cmp	r3, #3
 800118a:	d100      	bne.n	800118e <__aeabi_ddiv+0x182>
 800118c:	e211      	b.n	80015b2 <__aeabi_ddiv+0x5a6>
 800118e:	2b01      	cmp	r3, #1
 8001190:	d093      	beq.n	80010ba <__aeabi_ddiv+0xae>
 8001192:	4a35      	ldr	r2, [pc, #212]	; (8001268 <__aeabi_ddiv+0x25c>)
 8001194:	445a      	add	r2, fp
 8001196:	2a00      	cmp	r2, #0
 8001198:	dc00      	bgt.n	800119c <__aeabi_ddiv+0x190>
 800119a:	e13c      	b.n	8001416 <__aeabi_ddiv+0x40a>
 800119c:	076b      	lsls	r3, r5, #29
 800119e:	d000      	beq.n	80011a2 <__aeabi_ddiv+0x196>
 80011a0:	e1a7      	b.n	80014f2 <__aeabi_ddiv+0x4e6>
 80011a2:	08ed      	lsrs	r5, r5, #3
 80011a4:	4643      	mov	r3, r8
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	d506      	bpl.n	80011b8 <__aeabi_ddiv+0x1ac>
 80011aa:	4642      	mov	r2, r8
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <__aeabi_ddiv+0x260>)
 80011ae:	401a      	ands	r2, r3
 80011b0:	4690      	mov	r8, r2
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	445a      	add	r2, fp
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <__aeabi_ddiv+0x264>)
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dc8e      	bgt.n	80010dc <__aeabi_ddiv+0xd0>
 80011be:	4643      	mov	r3, r8
 80011c0:	0552      	lsls	r2, r2, #21
 80011c2:	0758      	lsls	r0, r3, #29
 80011c4:	025c      	lsls	r4, r3, #9
 80011c6:	4305      	orrs	r5, r0
 80011c8:	0b24      	lsrs	r4, r4, #12
 80011ca:	0d53      	lsrs	r3, r2, #21
 80011cc:	e778      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 80011ce:	46ba      	mov	sl, r7
 80011d0:	46a0      	mov	r8, r4
 80011d2:	0015      	movs	r5, r2
 80011d4:	9000      	str	r0, [sp, #0]
 80011d6:	e7d4      	b.n	8001182 <__aeabi_ddiv+0x176>
 80011d8:	464a      	mov	r2, r9
 80011da:	2303      	movs	r3, #3
 80011dc:	431a      	orrs	r2, r3
 80011de:	4691      	mov	r9, r2
 80011e0:	2003      	movs	r0, #3
 80011e2:	4652      	mov	r2, sl
 80011e4:	e74f      	b.n	8001086 <__aeabi_ddiv+0x7a>
 80011e6:	4649      	mov	r1, r9
 80011e8:	2301      	movs	r3, #1
 80011ea:	4319      	orrs	r1, r3
 80011ec:	4689      	mov	r9, r1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2001      	movs	r0, #1
 80011f2:	e748      	b.n	8001086 <__aeabi_ddiv+0x7a>
 80011f4:	230c      	movs	r3, #12
 80011f6:	4699      	mov	r9, r3
 80011f8:	3b09      	subs	r3, #9
 80011fa:	46a0      	mov	r8, r4
 80011fc:	4683      	mov	fp, r0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	e728      	b.n	8001054 <__aeabi_ddiv+0x48>
 8001202:	2304      	movs	r3, #4
 8001204:	4699      	mov	r9, r3
 8001206:	2300      	movs	r3, #0
 8001208:	469b      	mov	fp, r3
 800120a:	3301      	adds	r3, #1
 800120c:	2500      	movs	r5, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	e720      	b.n	8001054 <__aeabi_ddiv+0x48>
 8001212:	2300      	movs	r3, #0
 8001214:	2480      	movs	r4, #128	; 0x80
 8001216:	469a      	mov	sl, r3
 8001218:	2500      	movs	r5, #0
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <__aeabi_ddiv+0x244>)
 800121c:	0324      	lsls	r4, r4, #12
 800121e:	e74f      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	4641      	mov	r1, r8
 8001224:	031b      	lsls	r3, r3, #12
 8001226:	4219      	tst	r1, r3
 8001228:	d008      	beq.n	800123c <__aeabi_ddiv+0x230>
 800122a:	421c      	tst	r4, r3
 800122c:	d106      	bne.n	800123c <__aeabi_ddiv+0x230>
 800122e:	431c      	orrs	r4, r3
 8001230:	0324      	lsls	r4, r4, #12
 8001232:	46ba      	mov	sl, r7
 8001234:	0015      	movs	r5, r2
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <__aeabi_ddiv+0x244>)
 8001238:	0b24      	lsrs	r4, r4, #12
 800123a:	e741      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 800123c:	2480      	movs	r4, #128	; 0x80
 800123e:	4643      	mov	r3, r8
 8001240:	0324      	lsls	r4, r4, #12
 8001242:	431c      	orrs	r4, r3
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	46b2      	mov	sl, r6
 8001248:	4b01      	ldr	r3, [pc, #4]	; (8001250 <__aeabi_ddiv+0x244>)
 800124a:	0b24      	lsrs	r4, r4, #12
 800124c:	e738      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	000007ff 	.word	0x000007ff
 8001254:	fffffc01 	.word	0xfffffc01
 8001258:	0800af3c 	.word	0x0800af3c
 800125c:	fffff801 	.word	0xfffff801
 8001260:	fffffc0d 	.word	0xfffffc0d
 8001264:	000003f3 	.word	0x000003f3
 8001268:	000003ff 	.word	0x000003ff
 800126c:	feffffff 	.word	0xfeffffff
 8001270:	000007fe 	.word	0x000007fe
 8001274:	4544      	cmp	r4, r8
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x26e>
 8001278:	e116      	b.n	80014a8 <__aeabi_ddiv+0x49c>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x272>
 800127c:	e111      	b.n	80014a2 <__aeabi_ddiv+0x496>
 800127e:	2301      	movs	r3, #1
 8001280:	425b      	negs	r3, r3
 8001282:	469c      	mov	ip, r3
 8001284:	002e      	movs	r6, r5
 8001286:	4640      	mov	r0, r8
 8001288:	2500      	movs	r5, #0
 800128a:	44e3      	add	fp, ip
 800128c:	0223      	lsls	r3, r4, #8
 800128e:	0e14      	lsrs	r4, r2, #24
 8001290:	431c      	orrs	r4, r3
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	4699      	mov	r9, r3
 8001296:	0423      	lsls	r3, r4, #16
 8001298:	0c1f      	lsrs	r7, r3, #16
 800129a:	0212      	lsls	r2, r2, #8
 800129c:	4649      	mov	r1, r9
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	9701      	str	r7, [sp, #4]
 80012a2:	f7fe ffd1 	bl	8000248 <__aeabi_uidivmod>
 80012a6:	0002      	movs	r2, r0
 80012a8:	437a      	muls	r2, r7
 80012aa:	040b      	lsls	r3, r1, #16
 80012ac:	0c31      	lsrs	r1, r6, #16
 80012ae:	4680      	mov	r8, r0
 80012b0:	4319      	orrs	r1, r3
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d90b      	bls.n	80012ce <__aeabi_ddiv+0x2c2>
 80012b6:	2301      	movs	r3, #1
 80012b8:	425b      	negs	r3, r3
 80012ba:	469c      	mov	ip, r3
 80012bc:	1909      	adds	r1, r1, r4
 80012be:	44e0      	add	r8, ip
 80012c0:	428c      	cmp	r4, r1
 80012c2:	d804      	bhi.n	80012ce <__aeabi_ddiv+0x2c2>
 80012c4:	428a      	cmp	r2, r1
 80012c6:	d902      	bls.n	80012ce <__aeabi_ddiv+0x2c2>
 80012c8:	1e83      	subs	r3, r0, #2
 80012ca:	4698      	mov	r8, r3
 80012cc:	1909      	adds	r1, r1, r4
 80012ce:	1a88      	subs	r0, r1, r2
 80012d0:	4649      	mov	r1, r9
 80012d2:	f7fe ffb9 	bl	8000248 <__aeabi_uidivmod>
 80012d6:	0409      	lsls	r1, r1, #16
 80012d8:	468c      	mov	ip, r1
 80012da:	0431      	lsls	r1, r6, #16
 80012dc:	4666      	mov	r6, ip
 80012de:	9a01      	ldr	r2, [sp, #4]
 80012e0:	0c09      	lsrs	r1, r1, #16
 80012e2:	4342      	muls	r2, r0
 80012e4:	0003      	movs	r3, r0
 80012e6:	4331      	orrs	r1, r6
 80012e8:	428a      	cmp	r2, r1
 80012ea:	d904      	bls.n	80012f6 <__aeabi_ddiv+0x2ea>
 80012ec:	1909      	adds	r1, r1, r4
 80012ee:	3b01      	subs	r3, #1
 80012f0:	428c      	cmp	r4, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x2ea>
 80012f4:	e111      	b.n	800151a <__aeabi_ddiv+0x50e>
 80012f6:	1a89      	subs	r1, r1, r2
 80012f8:	4642      	mov	r2, r8
 80012fa:	9e00      	ldr	r6, [sp, #0]
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	431a      	orrs	r2, r3
 8001300:	0c33      	lsrs	r3, r6, #16
 8001302:	001f      	movs	r7, r3
 8001304:	0c10      	lsrs	r0, r2, #16
 8001306:	4690      	mov	r8, r2
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	0413      	lsls	r3, r2, #16
 800130c:	0432      	lsls	r2, r6, #16
 800130e:	0c16      	lsrs	r6, r2, #16
 8001310:	0032      	movs	r2, r6
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	435a      	muls	r2, r3
 8001316:	9603      	str	r6, [sp, #12]
 8001318:	437b      	muls	r3, r7
 800131a:	4346      	muls	r6, r0
 800131c:	4378      	muls	r0, r7
 800131e:	0c17      	lsrs	r7, r2, #16
 8001320:	46bc      	mov	ip, r7
 8001322:	199b      	adds	r3, r3, r6
 8001324:	4463      	add	r3, ip
 8001326:	429e      	cmp	r6, r3
 8001328:	d903      	bls.n	8001332 <__aeabi_ddiv+0x326>
 800132a:	2680      	movs	r6, #128	; 0x80
 800132c:	0276      	lsls	r6, r6, #9
 800132e:	46b4      	mov	ip, r6
 8001330:	4460      	add	r0, ip
 8001332:	0c1e      	lsrs	r6, r3, #16
 8001334:	1830      	adds	r0, r6, r0
 8001336:	0416      	lsls	r6, r2, #16
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	0c36      	lsrs	r6, r6, #16
 800133c:	199e      	adds	r6, r3, r6
 800133e:	4281      	cmp	r1, r0
 8001340:	d200      	bcs.n	8001344 <__aeabi_ddiv+0x338>
 8001342:	e09c      	b.n	800147e <__aeabi_ddiv+0x472>
 8001344:	d100      	bne.n	8001348 <__aeabi_ddiv+0x33c>
 8001346:	e097      	b.n	8001478 <__aeabi_ddiv+0x46c>
 8001348:	1bae      	subs	r6, r5, r6
 800134a:	1a09      	subs	r1, r1, r0
 800134c:	42b5      	cmp	r5, r6
 800134e:	4180      	sbcs	r0, r0
 8001350:	4240      	negs	r0, r0
 8001352:	1a08      	subs	r0, r1, r0
 8001354:	4284      	cmp	r4, r0
 8001356:	d100      	bne.n	800135a <__aeabi_ddiv+0x34e>
 8001358:	e111      	b.n	800157e <__aeabi_ddiv+0x572>
 800135a:	4649      	mov	r1, r9
 800135c:	f7fe ff74 	bl	8000248 <__aeabi_uidivmod>
 8001360:	9a01      	ldr	r2, [sp, #4]
 8001362:	040b      	lsls	r3, r1, #16
 8001364:	4342      	muls	r2, r0
 8001366:	0c31      	lsrs	r1, r6, #16
 8001368:	0005      	movs	r5, r0
 800136a:	4319      	orrs	r1, r3
 800136c:	428a      	cmp	r2, r1
 800136e:	d907      	bls.n	8001380 <__aeabi_ddiv+0x374>
 8001370:	1909      	adds	r1, r1, r4
 8001372:	3d01      	subs	r5, #1
 8001374:	428c      	cmp	r4, r1
 8001376:	d803      	bhi.n	8001380 <__aeabi_ddiv+0x374>
 8001378:	428a      	cmp	r2, r1
 800137a:	d901      	bls.n	8001380 <__aeabi_ddiv+0x374>
 800137c:	1e85      	subs	r5, r0, #2
 800137e:	1909      	adds	r1, r1, r4
 8001380:	1a88      	subs	r0, r1, r2
 8001382:	4649      	mov	r1, r9
 8001384:	f7fe ff60 	bl	8000248 <__aeabi_uidivmod>
 8001388:	0409      	lsls	r1, r1, #16
 800138a:	468c      	mov	ip, r1
 800138c:	0431      	lsls	r1, r6, #16
 800138e:	4666      	mov	r6, ip
 8001390:	9a01      	ldr	r2, [sp, #4]
 8001392:	0c09      	lsrs	r1, r1, #16
 8001394:	4342      	muls	r2, r0
 8001396:	0003      	movs	r3, r0
 8001398:	4331      	orrs	r1, r6
 800139a:	428a      	cmp	r2, r1
 800139c:	d907      	bls.n	80013ae <__aeabi_ddiv+0x3a2>
 800139e:	1909      	adds	r1, r1, r4
 80013a0:	3b01      	subs	r3, #1
 80013a2:	428c      	cmp	r4, r1
 80013a4:	d803      	bhi.n	80013ae <__aeabi_ddiv+0x3a2>
 80013a6:	428a      	cmp	r2, r1
 80013a8:	d901      	bls.n	80013ae <__aeabi_ddiv+0x3a2>
 80013aa:	1e83      	subs	r3, r0, #2
 80013ac:	1909      	adds	r1, r1, r4
 80013ae:	9e03      	ldr	r6, [sp, #12]
 80013b0:	1a89      	subs	r1, r1, r2
 80013b2:	0032      	movs	r2, r6
 80013b4:	042d      	lsls	r5, r5, #16
 80013b6:	431d      	orrs	r5, r3
 80013b8:	9f02      	ldr	r7, [sp, #8]
 80013ba:	042b      	lsls	r3, r5, #16
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	435a      	muls	r2, r3
 80013c0:	437b      	muls	r3, r7
 80013c2:	469c      	mov	ip, r3
 80013c4:	0c28      	lsrs	r0, r5, #16
 80013c6:	4346      	muls	r6, r0
 80013c8:	0c13      	lsrs	r3, r2, #16
 80013ca:	44b4      	add	ip, r6
 80013cc:	4463      	add	r3, ip
 80013ce:	4378      	muls	r0, r7
 80013d0:	429e      	cmp	r6, r3
 80013d2:	d903      	bls.n	80013dc <__aeabi_ddiv+0x3d0>
 80013d4:	2680      	movs	r6, #128	; 0x80
 80013d6:	0276      	lsls	r6, r6, #9
 80013d8:	46b4      	mov	ip, r6
 80013da:	4460      	add	r0, ip
 80013dc:	0c1e      	lsrs	r6, r3, #16
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	0c12      	lsrs	r2, r2, #16
 80013e4:	1830      	adds	r0, r6, r0
 80013e6:	189b      	adds	r3, r3, r2
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d306      	bcc.n	80013fa <__aeabi_ddiv+0x3ee>
 80013ec:	d002      	beq.n	80013f4 <__aeabi_ddiv+0x3e8>
 80013ee:	2301      	movs	r3, #1
 80013f0:	431d      	orrs	r5, r3
 80013f2:	e6ce      	b.n	8001192 <__aeabi_ddiv+0x186>
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0x3ee>
 80013f8:	e6cb      	b.n	8001192 <__aeabi_ddiv+0x186>
 80013fa:	1861      	adds	r1, r4, r1
 80013fc:	1e6e      	subs	r6, r5, #1
 80013fe:	42a1      	cmp	r1, r4
 8001400:	d200      	bcs.n	8001404 <__aeabi_ddiv+0x3f8>
 8001402:	e0a4      	b.n	800154e <__aeabi_ddiv+0x542>
 8001404:	4281      	cmp	r1, r0
 8001406:	d200      	bcs.n	800140a <__aeabi_ddiv+0x3fe>
 8001408:	e0c9      	b.n	800159e <__aeabi_ddiv+0x592>
 800140a:	d100      	bne.n	800140e <__aeabi_ddiv+0x402>
 800140c:	e0d9      	b.n	80015c2 <__aeabi_ddiv+0x5b6>
 800140e:	0035      	movs	r5, r6
 8001410:	e7ed      	b.n	80013ee <__aeabi_ddiv+0x3e2>
 8001412:	2501      	movs	r5, #1
 8001414:	426d      	negs	r5, r5
 8001416:	2101      	movs	r1, #1
 8001418:	1a89      	subs	r1, r1, r2
 800141a:	2938      	cmp	r1, #56	; 0x38
 800141c:	dd00      	ble.n	8001420 <__aeabi_ddiv+0x414>
 800141e:	e64c      	b.n	80010ba <__aeabi_ddiv+0xae>
 8001420:	291f      	cmp	r1, #31
 8001422:	dc00      	bgt.n	8001426 <__aeabi_ddiv+0x41a>
 8001424:	e07f      	b.n	8001526 <__aeabi_ddiv+0x51a>
 8001426:	231f      	movs	r3, #31
 8001428:	425b      	negs	r3, r3
 800142a:	1a9a      	subs	r2, r3, r2
 800142c:	4643      	mov	r3, r8
 800142e:	40d3      	lsrs	r3, r2
 8001430:	2920      	cmp	r1, #32
 8001432:	d004      	beq.n	800143e <__aeabi_ddiv+0x432>
 8001434:	4644      	mov	r4, r8
 8001436:	4a65      	ldr	r2, [pc, #404]	; (80015cc <__aeabi_ddiv+0x5c0>)
 8001438:	445a      	add	r2, fp
 800143a:	4094      	lsls	r4, r2
 800143c:	4325      	orrs	r5, r4
 800143e:	1e6a      	subs	r2, r5, #1
 8001440:	4195      	sbcs	r5, r2
 8001442:	2207      	movs	r2, #7
 8001444:	432b      	orrs	r3, r5
 8001446:	0015      	movs	r5, r2
 8001448:	2400      	movs	r4, #0
 800144a:	401d      	ands	r5, r3
 800144c:	421a      	tst	r2, r3
 800144e:	d100      	bne.n	8001452 <__aeabi_ddiv+0x446>
 8001450:	e0a1      	b.n	8001596 <__aeabi_ddiv+0x58a>
 8001452:	220f      	movs	r2, #15
 8001454:	2400      	movs	r4, #0
 8001456:	401a      	ands	r2, r3
 8001458:	2a04      	cmp	r2, #4
 800145a:	d100      	bne.n	800145e <__aeabi_ddiv+0x452>
 800145c:	e098      	b.n	8001590 <__aeabi_ddiv+0x584>
 800145e:	1d1a      	adds	r2, r3, #4
 8001460:	429a      	cmp	r2, r3
 8001462:	419b      	sbcs	r3, r3
 8001464:	425b      	negs	r3, r3
 8001466:	18e4      	adds	r4, r4, r3
 8001468:	0013      	movs	r3, r2
 800146a:	0222      	lsls	r2, r4, #8
 800146c:	d400      	bmi.n	8001470 <__aeabi_ddiv+0x464>
 800146e:	e08f      	b.n	8001590 <__aeabi_ddiv+0x584>
 8001470:	2301      	movs	r3, #1
 8001472:	2400      	movs	r4, #0
 8001474:	2500      	movs	r5, #0
 8001476:	e623      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 8001478:	42b5      	cmp	r5, r6
 800147a:	d300      	bcc.n	800147e <__aeabi_ddiv+0x472>
 800147c:	e764      	b.n	8001348 <__aeabi_ddiv+0x33c>
 800147e:	4643      	mov	r3, r8
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	469c      	mov	ip, r3
 8001486:	4465      	add	r5, ip
 8001488:	001f      	movs	r7, r3
 800148a:	429d      	cmp	r5, r3
 800148c:	419b      	sbcs	r3, r3
 800148e:	425b      	negs	r3, r3
 8001490:	191b      	adds	r3, r3, r4
 8001492:	18c9      	adds	r1, r1, r3
 8001494:	428c      	cmp	r4, r1
 8001496:	d23a      	bcs.n	800150e <__aeabi_ddiv+0x502>
 8001498:	4288      	cmp	r0, r1
 800149a:	d863      	bhi.n	8001564 <__aeabi_ddiv+0x558>
 800149c:	d060      	beq.n	8001560 <__aeabi_ddiv+0x554>
 800149e:	4690      	mov	r8, r2
 80014a0:	e752      	b.n	8001348 <__aeabi_ddiv+0x33c>
 80014a2:	42aa      	cmp	r2, r5
 80014a4:	d900      	bls.n	80014a8 <__aeabi_ddiv+0x49c>
 80014a6:	e6ea      	b.n	800127e <__aeabi_ddiv+0x272>
 80014a8:	4643      	mov	r3, r8
 80014aa:	07de      	lsls	r6, r3, #31
 80014ac:	0858      	lsrs	r0, r3, #1
 80014ae:	086b      	lsrs	r3, r5, #1
 80014b0:	431e      	orrs	r6, r3
 80014b2:	07ed      	lsls	r5, r5, #31
 80014b4:	e6ea      	b.n	800128c <__aeabi_ddiv+0x280>
 80014b6:	4648      	mov	r0, r9
 80014b8:	f001 f89e 	bl	80025f8 <__clzsi2>
 80014bc:	0001      	movs	r1, r0
 80014be:	0002      	movs	r2, r0
 80014c0:	3115      	adds	r1, #21
 80014c2:	3220      	adds	r2, #32
 80014c4:	291c      	cmp	r1, #28
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_ddiv+0x4be>
 80014c8:	e61a      	b.n	8001100 <__aeabi_ddiv+0xf4>
 80014ca:	464b      	mov	r3, r9
 80014cc:	3808      	subs	r0, #8
 80014ce:	4083      	lsls	r3, r0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4698      	mov	r8, r3
 80014d4:	e620      	b.n	8001118 <__aeabi_ddiv+0x10c>
 80014d6:	f001 f88f 	bl	80025f8 <__clzsi2>
 80014da:	0003      	movs	r3, r0
 80014dc:	001a      	movs	r2, r3
 80014de:	3215      	adds	r2, #21
 80014e0:	3020      	adds	r0, #32
 80014e2:	2a1c      	cmp	r2, #28
 80014e4:	dc00      	bgt.n	80014e8 <__aeabi_ddiv+0x4dc>
 80014e6:	e630      	b.n	800114a <__aeabi_ddiv+0x13e>
 80014e8:	4654      	mov	r4, sl
 80014ea:	3b08      	subs	r3, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	409c      	lsls	r4, r3
 80014f0:	e635      	b.n	800115e <__aeabi_ddiv+0x152>
 80014f2:	230f      	movs	r3, #15
 80014f4:	402b      	ands	r3, r5
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x4f0>
 80014fa:	e652      	b.n	80011a2 <__aeabi_ddiv+0x196>
 80014fc:	2305      	movs	r3, #5
 80014fe:	425b      	negs	r3, r3
 8001500:	42ab      	cmp	r3, r5
 8001502:	419b      	sbcs	r3, r3
 8001504:	3504      	adds	r5, #4
 8001506:	425b      	negs	r3, r3
 8001508:	08ed      	lsrs	r5, r5, #3
 800150a:	4498      	add	r8, r3
 800150c:	e64a      	b.n	80011a4 <__aeabi_ddiv+0x198>
 800150e:	428c      	cmp	r4, r1
 8001510:	d1c5      	bne.n	800149e <__aeabi_ddiv+0x492>
 8001512:	42af      	cmp	r7, r5
 8001514:	d9c0      	bls.n	8001498 <__aeabi_ddiv+0x48c>
 8001516:	4690      	mov	r8, r2
 8001518:	e716      	b.n	8001348 <__aeabi_ddiv+0x33c>
 800151a:	428a      	cmp	r2, r1
 800151c:	d800      	bhi.n	8001520 <__aeabi_ddiv+0x514>
 800151e:	e6ea      	b.n	80012f6 <__aeabi_ddiv+0x2ea>
 8001520:	1e83      	subs	r3, r0, #2
 8001522:	1909      	adds	r1, r1, r4
 8001524:	e6e7      	b.n	80012f6 <__aeabi_ddiv+0x2ea>
 8001526:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <__aeabi_ddiv+0x5c4>)
 8001528:	0028      	movs	r0, r5
 800152a:	445a      	add	r2, fp
 800152c:	4643      	mov	r3, r8
 800152e:	4095      	lsls	r5, r2
 8001530:	4093      	lsls	r3, r2
 8001532:	40c8      	lsrs	r0, r1
 8001534:	1e6a      	subs	r2, r5, #1
 8001536:	4195      	sbcs	r5, r2
 8001538:	4644      	mov	r4, r8
 800153a:	4303      	orrs	r3, r0
 800153c:	432b      	orrs	r3, r5
 800153e:	40cc      	lsrs	r4, r1
 8001540:	075a      	lsls	r2, r3, #29
 8001542:	d092      	beq.n	800146a <__aeabi_ddiv+0x45e>
 8001544:	220f      	movs	r2, #15
 8001546:	401a      	ands	r2, r3
 8001548:	2a04      	cmp	r2, #4
 800154a:	d188      	bne.n	800145e <__aeabi_ddiv+0x452>
 800154c:	e78d      	b.n	800146a <__aeabi_ddiv+0x45e>
 800154e:	0035      	movs	r5, r6
 8001550:	4281      	cmp	r1, r0
 8001552:	d000      	beq.n	8001556 <__aeabi_ddiv+0x54a>
 8001554:	e74b      	b.n	80013ee <__aeabi_ddiv+0x3e2>
 8001556:	9a00      	ldr	r2, [sp, #0]
 8001558:	4293      	cmp	r3, r2
 800155a:	d000      	beq.n	800155e <__aeabi_ddiv+0x552>
 800155c:	e747      	b.n	80013ee <__aeabi_ddiv+0x3e2>
 800155e:	e618      	b.n	8001192 <__aeabi_ddiv+0x186>
 8001560:	42ae      	cmp	r6, r5
 8001562:	d99c      	bls.n	800149e <__aeabi_ddiv+0x492>
 8001564:	2302      	movs	r3, #2
 8001566:	425b      	negs	r3, r3
 8001568:	469c      	mov	ip, r3
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	44e0      	add	r8, ip
 800156e:	469c      	mov	ip, r3
 8001570:	4465      	add	r5, ip
 8001572:	429d      	cmp	r5, r3
 8001574:	419b      	sbcs	r3, r3
 8001576:	425b      	negs	r3, r3
 8001578:	191b      	adds	r3, r3, r4
 800157a:	18c9      	adds	r1, r1, r3
 800157c:	e6e4      	b.n	8001348 <__aeabi_ddiv+0x33c>
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <__aeabi_ddiv+0x5c8>)
 8001580:	445a      	add	r2, fp
 8001582:	2a00      	cmp	r2, #0
 8001584:	dc00      	bgt.n	8001588 <__aeabi_ddiv+0x57c>
 8001586:	e744      	b.n	8001412 <__aeabi_ddiv+0x406>
 8001588:	2301      	movs	r3, #1
 800158a:	2500      	movs	r5, #0
 800158c:	4498      	add	r8, r3
 800158e:	e609      	b.n	80011a4 <__aeabi_ddiv+0x198>
 8001590:	0765      	lsls	r5, r4, #29
 8001592:	0264      	lsls	r4, r4, #9
 8001594:	0b24      	lsrs	r4, r4, #12
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	431d      	orrs	r5, r3
 800159a:	2300      	movs	r3, #0
 800159c:	e590      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 800159e:	9e00      	ldr	r6, [sp, #0]
 80015a0:	3d02      	subs	r5, #2
 80015a2:	0072      	lsls	r2, r6, #1
 80015a4:	42b2      	cmp	r2, r6
 80015a6:	41bf      	sbcs	r7, r7
 80015a8:	427f      	negs	r7, r7
 80015aa:	193c      	adds	r4, r7, r4
 80015ac:	1909      	adds	r1, r1, r4
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	e7ce      	b.n	8001550 <__aeabi_ddiv+0x544>
 80015b2:	2480      	movs	r4, #128	; 0x80
 80015b4:	4643      	mov	r3, r8
 80015b6:	0324      	lsls	r4, r4, #12
 80015b8:	431c      	orrs	r4, r3
 80015ba:	0324      	lsls	r4, r4, #12
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <__aeabi_ddiv+0x5cc>)
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	e57e      	b.n	80010c0 <__aeabi_ddiv+0xb4>
 80015c2:	9a00      	ldr	r2, [sp, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3ea      	bcc.n	800159e <__aeabi_ddiv+0x592>
 80015c8:	0035      	movs	r5, r6
 80015ca:	e7c4      	b.n	8001556 <__aeabi_ddiv+0x54a>
 80015cc:	0000043e 	.word	0x0000043e
 80015d0:	0000041e 	.word	0x0000041e
 80015d4:	000003ff 	.word	0x000003ff
 80015d8:	000007ff 	.word	0x000007ff

080015dc <__eqdf2>:
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	464f      	mov	r7, r9
 80015e0:	4646      	mov	r6, r8
 80015e2:	46d6      	mov	lr, sl
 80015e4:	4694      	mov	ip, r2
 80015e6:	4691      	mov	r9, r2
 80015e8:	031a      	lsls	r2, r3, #12
 80015ea:	0b12      	lsrs	r2, r2, #12
 80015ec:	4d18      	ldr	r5, [pc, #96]	; (8001650 <__eqdf2+0x74>)
 80015ee:	b5c0      	push	{r6, r7, lr}
 80015f0:	004c      	lsls	r4, r1, #1
 80015f2:	030f      	lsls	r7, r1, #12
 80015f4:	4692      	mov	sl, r2
 80015f6:	005a      	lsls	r2, r3, #1
 80015f8:	0006      	movs	r6, r0
 80015fa:	4680      	mov	r8, r0
 80015fc:	0b3f      	lsrs	r7, r7, #12
 80015fe:	2001      	movs	r0, #1
 8001600:	0d64      	lsrs	r4, r4, #21
 8001602:	0fc9      	lsrs	r1, r1, #31
 8001604:	0d52      	lsrs	r2, r2, #21
 8001606:	0fdb      	lsrs	r3, r3, #31
 8001608:	42ac      	cmp	r4, r5
 800160a:	d00a      	beq.n	8001622 <__eqdf2+0x46>
 800160c:	42aa      	cmp	r2, r5
 800160e:	d003      	beq.n	8001618 <__eqdf2+0x3c>
 8001610:	4294      	cmp	r4, r2
 8001612:	d101      	bne.n	8001618 <__eqdf2+0x3c>
 8001614:	4557      	cmp	r7, sl
 8001616:	d00d      	beq.n	8001634 <__eqdf2+0x58>
 8001618:	bce0      	pop	{r5, r6, r7}
 800161a:	46ba      	mov	sl, r7
 800161c:	46b1      	mov	r9, r6
 800161e:	46a8      	mov	r8, r5
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001622:	003d      	movs	r5, r7
 8001624:	4335      	orrs	r5, r6
 8001626:	d1f7      	bne.n	8001618 <__eqdf2+0x3c>
 8001628:	42a2      	cmp	r2, r4
 800162a:	d1f5      	bne.n	8001618 <__eqdf2+0x3c>
 800162c:	4652      	mov	r2, sl
 800162e:	4665      	mov	r5, ip
 8001630:	432a      	orrs	r2, r5
 8001632:	d1f1      	bne.n	8001618 <__eqdf2+0x3c>
 8001634:	2001      	movs	r0, #1
 8001636:	45c8      	cmp	r8, r9
 8001638:	d1ee      	bne.n	8001618 <__eqdf2+0x3c>
 800163a:	4299      	cmp	r1, r3
 800163c:	d006      	beq.n	800164c <__eqdf2+0x70>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d1ea      	bne.n	8001618 <__eqdf2+0x3c>
 8001642:	433e      	orrs	r6, r7
 8001644:	0030      	movs	r0, r6
 8001646:	1e46      	subs	r6, r0, #1
 8001648:	41b0      	sbcs	r0, r6
 800164a:	e7e5      	b.n	8001618 <__eqdf2+0x3c>
 800164c:	2000      	movs	r0, #0
 800164e:	e7e3      	b.n	8001618 <__eqdf2+0x3c>
 8001650:	000007ff 	.word	0x000007ff

08001654 <__gedf2>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	464e      	mov	r6, r9
 8001658:	4645      	mov	r5, r8
 800165a:	4657      	mov	r7, sl
 800165c:	46de      	mov	lr, fp
 800165e:	0004      	movs	r4, r0
 8001660:	0018      	movs	r0, r3
 8001662:	b5e0      	push	{r5, r6, r7, lr}
 8001664:	0016      	movs	r6, r2
 8001666:	031b      	lsls	r3, r3, #12
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	4d32      	ldr	r5, [pc, #200]	; (8001734 <__gedf2+0xe0>)
 800166c:	030f      	lsls	r7, r1, #12
 800166e:	004a      	lsls	r2, r1, #1
 8001670:	4699      	mov	r9, r3
 8001672:	0043      	lsls	r3, r0, #1
 8001674:	46a4      	mov	ip, r4
 8001676:	46b0      	mov	r8, r6
 8001678:	0b3f      	lsrs	r7, r7, #12
 800167a:	0d52      	lsrs	r2, r2, #21
 800167c:	0fc9      	lsrs	r1, r1, #31
 800167e:	0d5b      	lsrs	r3, r3, #21
 8001680:	0fc0      	lsrs	r0, r0, #31
 8001682:	42aa      	cmp	r2, r5
 8001684:	d029      	beq.n	80016da <__gedf2+0x86>
 8001686:	42ab      	cmp	r3, r5
 8001688:	d018      	beq.n	80016bc <__gedf2+0x68>
 800168a:	2a00      	cmp	r2, #0
 800168c:	d12a      	bne.n	80016e4 <__gedf2+0x90>
 800168e:	433c      	orrs	r4, r7
 8001690:	46a3      	mov	fp, r4
 8001692:	4265      	negs	r5, r4
 8001694:	4165      	adcs	r5, r4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <__gedf2+0x4c>
 800169a:	464c      	mov	r4, r9
 800169c:	4326      	orrs	r6, r4
 800169e:	d027      	beq.n	80016f0 <__gedf2+0x9c>
 80016a0:	2d00      	cmp	r5, #0
 80016a2:	d115      	bne.n	80016d0 <__gedf2+0x7c>
 80016a4:	4281      	cmp	r1, r0
 80016a6:	d028      	beq.n	80016fa <__gedf2+0xa6>
 80016a8:	2002      	movs	r0, #2
 80016aa:	3901      	subs	r1, #1
 80016ac:	4008      	ands	r0, r1
 80016ae:	3801      	subs	r0, #1
 80016b0:	bcf0      	pop	{r4, r5, r6, r7}
 80016b2:	46bb      	mov	fp, r7
 80016b4:	46b2      	mov	sl, r6
 80016b6:	46a9      	mov	r9, r5
 80016b8:	46a0      	mov	r8, r4
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	464d      	mov	r5, r9
 80016be:	432e      	orrs	r6, r5
 80016c0:	d12f      	bne.n	8001722 <__gedf2+0xce>
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d1ee      	bne.n	80016a4 <__gedf2+0x50>
 80016c6:	433c      	orrs	r4, r7
 80016c8:	4265      	negs	r5, r4
 80016ca:	4165      	adcs	r5, r4
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	d0e9      	beq.n	80016a4 <__gedf2+0x50>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d1ed      	bne.n	80016b0 <__gedf2+0x5c>
 80016d4:	2001      	movs	r0, #1
 80016d6:	4240      	negs	r0, r0
 80016d8:	e7ea      	b.n	80016b0 <__gedf2+0x5c>
 80016da:	003d      	movs	r5, r7
 80016dc:	4325      	orrs	r5, r4
 80016de:	d120      	bne.n	8001722 <__gedf2+0xce>
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d0eb      	beq.n	80016bc <__gedf2+0x68>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1dd      	bne.n	80016a4 <__gedf2+0x50>
 80016e8:	464c      	mov	r4, r9
 80016ea:	4326      	orrs	r6, r4
 80016ec:	d1da      	bne.n	80016a4 <__gedf2+0x50>
 80016ee:	e7db      	b.n	80016a8 <__gedf2+0x54>
 80016f0:	465b      	mov	r3, fp
 80016f2:	2000      	movs	r0, #0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0db      	beq.n	80016b0 <__gedf2+0x5c>
 80016f8:	e7d6      	b.n	80016a8 <__gedf2+0x54>
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dc0a      	bgt.n	8001714 <__gedf2+0xc0>
 80016fe:	dbe7      	blt.n	80016d0 <__gedf2+0x7c>
 8001700:	454f      	cmp	r7, r9
 8001702:	d8d1      	bhi.n	80016a8 <__gedf2+0x54>
 8001704:	d010      	beq.n	8001728 <__gedf2+0xd4>
 8001706:	2000      	movs	r0, #0
 8001708:	454f      	cmp	r7, r9
 800170a:	d2d1      	bcs.n	80016b0 <__gedf2+0x5c>
 800170c:	2900      	cmp	r1, #0
 800170e:	d0e1      	beq.n	80016d4 <__gedf2+0x80>
 8001710:	0008      	movs	r0, r1
 8001712:	e7cd      	b.n	80016b0 <__gedf2+0x5c>
 8001714:	4243      	negs	r3, r0
 8001716:	4158      	adcs	r0, r3
 8001718:	2302      	movs	r3, #2
 800171a:	4240      	negs	r0, r0
 800171c:	4018      	ands	r0, r3
 800171e:	3801      	subs	r0, #1
 8001720:	e7c6      	b.n	80016b0 <__gedf2+0x5c>
 8001722:	2002      	movs	r0, #2
 8001724:	4240      	negs	r0, r0
 8001726:	e7c3      	b.n	80016b0 <__gedf2+0x5c>
 8001728:	45c4      	cmp	ip, r8
 800172a:	d8bd      	bhi.n	80016a8 <__gedf2+0x54>
 800172c:	2000      	movs	r0, #0
 800172e:	45c4      	cmp	ip, r8
 8001730:	d2be      	bcs.n	80016b0 <__gedf2+0x5c>
 8001732:	e7eb      	b.n	800170c <__gedf2+0xb8>
 8001734:	000007ff 	.word	0x000007ff

08001738 <__ledf2>:
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	464e      	mov	r6, r9
 800173c:	4645      	mov	r5, r8
 800173e:	4657      	mov	r7, sl
 8001740:	46de      	mov	lr, fp
 8001742:	0004      	movs	r4, r0
 8001744:	0018      	movs	r0, r3
 8001746:	b5e0      	push	{r5, r6, r7, lr}
 8001748:	0016      	movs	r6, r2
 800174a:	031b      	lsls	r3, r3, #12
 800174c:	0b1b      	lsrs	r3, r3, #12
 800174e:	4d31      	ldr	r5, [pc, #196]	; (8001814 <__ledf2+0xdc>)
 8001750:	030f      	lsls	r7, r1, #12
 8001752:	004a      	lsls	r2, r1, #1
 8001754:	4699      	mov	r9, r3
 8001756:	0043      	lsls	r3, r0, #1
 8001758:	46a4      	mov	ip, r4
 800175a:	46b0      	mov	r8, r6
 800175c:	0b3f      	lsrs	r7, r7, #12
 800175e:	0d52      	lsrs	r2, r2, #21
 8001760:	0fc9      	lsrs	r1, r1, #31
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	0fc0      	lsrs	r0, r0, #31
 8001766:	42aa      	cmp	r2, r5
 8001768:	d011      	beq.n	800178e <__ledf2+0x56>
 800176a:	42ab      	cmp	r3, r5
 800176c:	d014      	beq.n	8001798 <__ledf2+0x60>
 800176e:	2a00      	cmp	r2, #0
 8001770:	d12f      	bne.n	80017d2 <__ledf2+0x9a>
 8001772:	433c      	orrs	r4, r7
 8001774:	46a3      	mov	fp, r4
 8001776:	4265      	negs	r5, r4
 8001778:	4165      	adcs	r5, r4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d114      	bne.n	80017a8 <__ledf2+0x70>
 800177e:	464c      	mov	r4, r9
 8001780:	4326      	orrs	r6, r4
 8001782:	d111      	bne.n	80017a8 <__ledf2+0x70>
 8001784:	465b      	mov	r3, fp
 8001786:	2000      	movs	r0, #0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d017      	beq.n	80017bc <__ledf2+0x84>
 800178c:	e010      	b.n	80017b0 <__ledf2+0x78>
 800178e:	003d      	movs	r5, r7
 8001790:	4325      	orrs	r5, r4
 8001792:	d112      	bne.n	80017ba <__ledf2+0x82>
 8001794:	4293      	cmp	r3, r2
 8001796:	d11c      	bne.n	80017d2 <__ledf2+0x9a>
 8001798:	464d      	mov	r5, r9
 800179a:	432e      	orrs	r6, r5
 800179c:	d10d      	bne.n	80017ba <__ledf2+0x82>
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d104      	bne.n	80017ac <__ledf2+0x74>
 80017a2:	433c      	orrs	r4, r7
 80017a4:	4265      	negs	r5, r4
 80017a6:	4165      	adcs	r5, r4
 80017a8:	2d00      	cmp	r5, #0
 80017aa:	d10d      	bne.n	80017c8 <__ledf2+0x90>
 80017ac:	4281      	cmp	r1, r0
 80017ae:	d016      	beq.n	80017de <__ledf2+0xa6>
 80017b0:	2002      	movs	r0, #2
 80017b2:	3901      	subs	r1, #1
 80017b4:	4008      	ands	r0, r1
 80017b6:	3801      	subs	r0, #1
 80017b8:	e000      	b.n	80017bc <__ledf2+0x84>
 80017ba:	2002      	movs	r0, #2
 80017bc:	bcf0      	pop	{r4, r5, r6, r7}
 80017be:	46bb      	mov	fp, r7
 80017c0:	46b2      	mov	sl, r6
 80017c2:	46a9      	mov	r9, r5
 80017c4:	46a0      	mov	r8, r4
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1f7      	bne.n	80017bc <__ledf2+0x84>
 80017cc:	2001      	movs	r0, #1
 80017ce:	4240      	negs	r0, r0
 80017d0:	e7f4      	b.n	80017bc <__ledf2+0x84>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <__ledf2+0x74>
 80017d6:	464c      	mov	r4, r9
 80017d8:	4326      	orrs	r6, r4
 80017da:	d1e7      	bne.n	80017ac <__ledf2+0x74>
 80017dc:	e7e8      	b.n	80017b0 <__ledf2+0x78>
 80017de:	429a      	cmp	r2, r3
 80017e0:	dd06      	ble.n	80017f0 <__ledf2+0xb8>
 80017e2:	4243      	negs	r3, r0
 80017e4:	4158      	adcs	r0, r3
 80017e6:	2302      	movs	r3, #2
 80017e8:	4240      	negs	r0, r0
 80017ea:	4018      	ands	r0, r3
 80017ec:	3801      	subs	r0, #1
 80017ee:	e7e5      	b.n	80017bc <__ledf2+0x84>
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbe9      	blt.n	80017c8 <__ledf2+0x90>
 80017f4:	454f      	cmp	r7, r9
 80017f6:	d8db      	bhi.n	80017b0 <__ledf2+0x78>
 80017f8:	d006      	beq.n	8001808 <__ledf2+0xd0>
 80017fa:	2000      	movs	r0, #0
 80017fc:	454f      	cmp	r7, r9
 80017fe:	d2dd      	bcs.n	80017bc <__ledf2+0x84>
 8001800:	2900      	cmp	r1, #0
 8001802:	d0e3      	beq.n	80017cc <__ledf2+0x94>
 8001804:	0008      	movs	r0, r1
 8001806:	e7d9      	b.n	80017bc <__ledf2+0x84>
 8001808:	45c4      	cmp	ip, r8
 800180a:	d8d1      	bhi.n	80017b0 <__ledf2+0x78>
 800180c:	2000      	movs	r0, #0
 800180e:	45c4      	cmp	ip, r8
 8001810:	d2d4      	bcs.n	80017bc <__ledf2+0x84>
 8001812:	e7f5      	b.n	8001800 <__ledf2+0xc8>
 8001814:	000007ff 	.word	0x000007ff

08001818 <__aeabi_dmul>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	4698      	mov	r8, r3
 8001826:	030c      	lsls	r4, r1, #12
 8001828:	004b      	lsls	r3, r1, #1
 800182a:	0006      	movs	r6, r0
 800182c:	4692      	mov	sl, r2
 800182e:	b087      	sub	sp, #28
 8001830:	0b24      	lsrs	r4, r4, #12
 8001832:	0d5b      	lsrs	r3, r3, #21
 8001834:	0fcf      	lsrs	r7, r1, #31
 8001836:	2b00      	cmp	r3, #0
 8001838:	d06c      	beq.n	8001914 <__aeabi_dmul+0xfc>
 800183a:	4add      	ldr	r2, [pc, #884]	; (8001bb0 <__aeabi_dmul+0x398>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x2a>
 8001840:	e086      	b.n	8001950 <__aeabi_dmul+0x138>
 8001842:	0f42      	lsrs	r2, r0, #29
 8001844:	00e4      	lsls	r4, r4, #3
 8001846:	4314      	orrs	r4, r2
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0412      	lsls	r2, r2, #16
 800184c:	4314      	orrs	r4, r2
 800184e:	4ad9      	ldr	r2, [pc, #868]	; (8001bb4 <__aeabi_dmul+0x39c>)
 8001850:	00c5      	lsls	r5, r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	4699      	mov	r9, r3
 800185c:	469b      	mov	fp, r3
 800185e:	4643      	mov	r3, r8
 8001860:	4642      	mov	r2, r8
 8001862:	031e      	lsls	r6, r3, #12
 8001864:	0fd2      	lsrs	r2, r2, #31
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4650      	mov	r0, sl
 800186a:	4690      	mov	r8, r2
 800186c:	0b36      	lsrs	r6, r6, #12
 800186e:	0d5b      	lsrs	r3, r3, #21
 8001870:	d100      	bne.n	8001874 <__aeabi_dmul+0x5c>
 8001872:	e078      	b.n	8001966 <__aeabi_dmul+0x14e>
 8001874:	4ace      	ldr	r2, [pc, #824]	; (8001bb0 <__aeabi_dmul+0x398>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01d      	beq.n	80018b6 <__aeabi_dmul+0x9e>
 800187a:	49ce      	ldr	r1, [pc, #824]	; (8001bb4 <__aeabi_dmul+0x39c>)
 800187c:	0f42      	lsrs	r2, r0, #29
 800187e:	468c      	mov	ip, r1
 8001880:	9900      	ldr	r1, [sp, #0]
 8001882:	4463      	add	r3, ip
 8001884:	00f6      	lsls	r6, r6, #3
 8001886:	468c      	mov	ip, r1
 8001888:	4316      	orrs	r6, r2
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	449c      	add	ip, r3
 800188e:	0412      	lsls	r2, r2, #16
 8001890:	4663      	mov	r3, ip
 8001892:	4316      	orrs	r6, r2
 8001894:	00c2      	lsls	r2, r0, #3
 8001896:	2000      	movs	r0, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	9900      	ldr	r1, [sp, #0]
 800189c:	4643      	mov	r3, r8
 800189e:	3101      	adds	r1, #1
 80018a0:	468c      	mov	ip, r1
 80018a2:	4649      	mov	r1, r9
 80018a4:	407b      	eors	r3, r7
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	290f      	cmp	r1, #15
 80018aa:	d900      	bls.n	80018ae <__aeabi_dmul+0x96>
 80018ac:	e07e      	b.n	80019ac <__aeabi_dmul+0x194>
 80018ae:	4bc2      	ldr	r3, [pc, #776]	; (8001bb8 <__aeabi_dmul+0x3a0>)
 80018b0:	0089      	lsls	r1, r1, #2
 80018b2:	5859      	ldr	r1, [r3, r1]
 80018b4:	468f      	mov	pc, r1
 80018b6:	4652      	mov	r2, sl
 80018b8:	9b00      	ldr	r3, [sp, #0]
 80018ba:	4332      	orrs	r2, r6
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0xa8>
 80018be:	e156      	b.n	8001b6e <__aeabi_dmul+0x356>
 80018c0:	49bb      	ldr	r1, [pc, #748]	; (8001bb0 <__aeabi_dmul+0x398>)
 80018c2:	2600      	movs	r6, #0
 80018c4:	468c      	mov	ip, r1
 80018c6:	4463      	add	r3, ip
 80018c8:	4649      	mov	r1, r9
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2302      	movs	r3, #2
 80018ce:	4319      	orrs	r1, r3
 80018d0:	4689      	mov	r9, r1
 80018d2:	2002      	movs	r0, #2
 80018d4:	e7e1      	b.n	800189a <__aeabi_dmul+0x82>
 80018d6:	4643      	mov	r3, r8
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	0034      	movs	r4, r6
 80018dc:	0015      	movs	r5, r2
 80018de:	4683      	mov	fp, r0
 80018e0:	465b      	mov	r3, fp
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d05e      	beq.n	80019a4 <__aeabi_dmul+0x18c>
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dmul+0xd4>
 80018ea:	e1f3      	b.n	8001cd4 <__aeabi_dmul+0x4bc>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d000      	beq.n	80018f2 <__aeabi_dmul+0xda>
 80018f0:	e118      	b.n	8001b24 <__aeabi_dmul+0x30c>
 80018f2:	2200      	movs	r2, #0
 80018f4:	2400      	movs	r4, #0
 80018f6:	2500      	movs	r5, #0
 80018f8:	9b01      	ldr	r3, [sp, #4]
 80018fa:	0512      	lsls	r2, r2, #20
 80018fc:	4322      	orrs	r2, r4
 80018fe:	07db      	lsls	r3, r3, #31
 8001900:	431a      	orrs	r2, r3
 8001902:	0028      	movs	r0, r5
 8001904:	0011      	movs	r1, r2
 8001906:	b007      	add	sp, #28
 8001908:	bcf0      	pop	{r4, r5, r6, r7}
 800190a:	46bb      	mov	fp, r7
 800190c:	46b2      	mov	sl, r6
 800190e:	46a9      	mov	r9, r5
 8001910:	46a0      	mov	r8, r4
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	0025      	movs	r5, r4
 8001916:	4305      	orrs	r5, r0
 8001918:	d100      	bne.n	800191c <__aeabi_dmul+0x104>
 800191a:	e141      	b.n	8001ba0 <__aeabi_dmul+0x388>
 800191c:	2c00      	cmp	r4, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x10a>
 8001920:	e1ad      	b.n	8001c7e <__aeabi_dmul+0x466>
 8001922:	0020      	movs	r0, r4
 8001924:	f000 fe68 	bl	80025f8 <__clzsi2>
 8001928:	0001      	movs	r1, r0
 800192a:	0002      	movs	r2, r0
 800192c:	390b      	subs	r1, #11
 800192e:	231d      	movs	r3, #29
 8001930:	0010      	movs	r0, r2
 8001932:	1a5b      	subs	r3, r3, r1
 8001934:	0031      	movs	r1, r6
 8001936:	0035      	movs	r5, r6
 8001938:	3808      	subs	r0, #8
 800193a:	4084      	lsls	r4, r0
 800193c:	40d9      	lsrs	r1, r3
 800193e:	4085      	lsls	r5, r0
 8001940:	430c      	orrs	r4, r1
 8001942:	489e      	ldr	r0, [pc, #632]	; (8001bbc <__aeabi_dmul+0x3a4>)
 8001944:	1a83      	subs	r3, r0, r2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	4699      	mov	r9, r3
 800194c:	469b      	mov	fp, r3
 800194e:	e786      	b.n	800185e <__aeabi_dmul+0x46>
 8001950:	0005      	movs	r5, r0
 8001952:	4325      	orrs	r5, r4
 8001954:	d000      	beq.n	8001958 <__aeabi_dmul+0x140>
 8001956:	e11c      	b.n	8001b92 <__aeabi_dmul+0x37a>
 8001958:	2208      	movs	r2, #8
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2302      	movs	r3, #2
 800195e:	2400      	movs	r4, #0
 8001960:	4691      	mov	r9, r2
 8001962:	469b      	mov	fp, r3
 8001964:	e77b      	b.n	800185e <__aeabi_dmul+0x46>
 8001966:	4652      	mov	r2, sl
 8001968:	4332      	orrs	r2, r6
 800196a:	d100      	bne.n	800196e <__aeabi_dmul+0x156>
 800196c:	e10a      	b.n	8001b84 <__aeabi_dmul+0x36c>
 800196e:	2e00      	cmp	r6, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_dmul+0x15c>
 8001972:	e176      	b.n	8001c62 <__aeabi_dmul+0x44a>
 8001974:	0030      	movs	r0, r6
 8001976:	f000 fe3f 	bl	80025f8 <__clzsi2>
 800197a:	0002      	movs	r2, r0
 800197c:	3a0b      	subs	r2, #11
 800197e:	231d      	movs	r3, #29
 8001980:	0001      	movs	r1, r0
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	4652      	mov	r2, sl
 8001986:	3908      	subs	r1, #8
 8001988:	40da      	lsrs	r2, r3
 800198a:	408e      	lsls	r6, r1
 800198c:	4316      	orrs	r6, r2
 800198e:	4652      	mov	r2, sl
 8001990:	408a      	lsls	r2, r1
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	4989      	ldr	r1, [pc, #548]	; (8001bbc <__aeabi_dmul+0x3a4>)
 8001996:	1a18      	subs	r0, r3, r0
 8001998:	0003      	movs	r3, r0
 800199a:	468c      	mov	ip, r1
 800199c:	4463      	add	r3, ip
 800199e:	2000      	movs	r0, #0
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	e77a      	b.n	800189a <__aeabi_dmul+0x82>
 80019a4:	2400      	movs	r4, #0
 80019a6:	2500      	movs	r5, #0
 80019a8:	4a81      	ldr	r2, [pc, #516]	; (8001bb0 <__aeabi_dmul+0x398>)
 80019aa:	e7a5      	b.n	80018f8 <__aeabi_dmul+0xe0>
 80019ac:	0c2f      	lsrs	r7, r5, #16
 80019ae:	042d      	lsls	r5, r5, #16
 80019b0:	0c2d      	lsrs	r5, r5, #16
 80019b2:	002b      	movs	r3, r5
 80019b4:	0c11      	lsrs	r1, r2, #16
 80019b6:	0412      	lsls	r2, r2, #16
 80019b8:	0c12      	lsrs	r2, r2, #16
 80019ba:	4353      	muls	r3, r2
 80019bc:	4698      	mov	r8, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	0028      	movs	r0, r5
 80019c2:	437b      	muls	r3, r7
 80019c4:	4699      	mov	r9, r3
 80019c6:	4348      	muls	r0, r1
 80019c8:	4448      	add	r0, r9
 80019ca:	4683      	mov	fp, r0
 80019cc:	4640      	mov	r0, r8
 80019ce:	000b      	movs	r3, r1
 80019d0:	0c00      	lsrs	r0, r0, #16
 80019d2:	4682      	mov	sl, r0
 80019d4:	4658      	mov	r0, fp
 80019d6:	437b      	muls	r3, r7
 80019d8:	4450      	add	r0, sl
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4581      	cmp	r9, r0
 80019de:	d906      	bls.n	80019ee <__aeabi_dmul+0x1d6>
 80019e0:	469a      	mov	sl, r3
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	4699      	mov	r9, r3
 80019e8:	44ca      	add	sl, r9
 80019ea:	4653      	mov	r3, sl
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	0c03      	lsrs	r3, r0, #16
 80019f0:	469b      	mov	fp, r3
 80019f2:	4643      	mov	r3, r8
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	0400      	lsls	r0, r0, #16
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	4698      	mov	r8, r3
 80019fc:	0003      	movs	r3, r0
 80019fe:	4443      	add	r3, r8
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	0c33      	lsrs	r3, r6, #16
 8001a04:	4699      	mov	r9, r3
 8001a06:	002b      	movs	r3, r5
 8001a08:	0436      	lsls	r6, r6, #16
 8001a0a:	0c36      	lsrs	r6, r6, #16
 8001a0c:	4373      	muls	r3, r6
 8001a0e:	4698      	mov	r8, r3
 8001a10:	0033      	movs	r3, r6
 8001a12:	437b      	muls	r3, r7
 8001a14:	469a      	mov	sl, r3
 8001a16:	464b      	mov	r3, r9
 8001a18:	435d      	muls	r5, r3
 8001a1a:	435f      	muls	r7, r3
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	4455      	add	r5, sl
 8001a20:	0c18      	lsrs	r0, r3, #16
 8001a22:	1940      	adds	r0, r0, r5
 8001a24:	4582      	cmp	sl, r0
 8001a26:	d903      	bls.n	8001a30 <__aeabi_dmul+0x218>
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	469a      	mov	sl, r3
 8001a2e:	4457      	add	r7, sl
 8001a30:	0c05      	lsrs	r5, r0, #16
 8001a32:	19eb      	adds	r3, r5, r7
 8001a34:	9305      	str	r3, [sp, #20]
 8001a36:	4643      	mov	r3, r8
 8001a38:	041d      	lsls	r5, r3, #16
 8001a3a:	0c2d      	lsrs	r5, r5, #16
 8001a3c:	0400      	lsls	r0, r0, #16
 8001a3e:	1940      	adds	r0, r0, r5
 8001a40:	0c25      	lsrs	r5, r4, #16
 8001a42:	0424      	lsls	r4, r4, #16
 8001a44:	0c24      	lsrs	r4, r4, #16
 8001a46:	0027      	movs	r7, r4
 8001a48:	4357      	muls	r7, r2
 8001a4a:	436a      	muls	r2, r5
 8001a4c:	4690      	mov	r8, r2
 8001a4e:	002a      	movs	r2, r5
 8001a50:	0c3b      	lsrs	r3, r7, #16
 8001a52:	469a      	mov	sl, r3
 8001a54:	434a      	muls	r2, r1
 8001a56:	4361      	muls	r1, r4
 8001a58:	4441      	add	r1, r8
 8001a5a:	4451      	add	r1, sl
 8001a5c:	4483      	add	fp, r0
 8001a5e:	4588      	cmp	r8, r1
 8001a60:	d903      	bls.n	8001a6a <__aeabi_dmul+0x252>
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4698      	mov	r8, r3
 8001a68:	4442      	add	r2, r8
 8001a6a:	043f      	lsls	r7, r7, #16
 8001a6c:	0c0b      	lsrs	r3, r1, #16
 8001a6e:	0c3f      	lsrs	r7, r7, #16
 8001a70:	0409      	lsls	r1, r1, #16
 8001a72:	19c9      	adds	r1, r1, r7
 8001a74:	0027      	movs	r7, r4
 8001a76:	4698      	mov	r8, r3
 8001a78:	464b      	mov	r3, r9
 8001a7a:	4377      	muls	r7, r6
 8001a7c:	435c      	muls	r4, r3
 8001a7e:	436e      	muls	r6, r5
 8001a80:	435d      	muls	r5, r3
 8001a82:	0c3b      	lsrs	r3, r7, #16
 8001a84:	4699      	mov	r9, r3
 8001a86:	19a4      	adds	r4, r4, r6
 8001a88:	444c      	add	r4, r9
 8001a8a:	4442      	add	r2, r8
 8001a8c:	9503      	str	r5, [sp, #12]
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d904      	bls.n	8001a9c <__aeabi_dmul+0x284>
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4698      	mov	r8, r3
 8001a98:	4445      	add	r5, r8
 8001a9a:	9503      	str	r5, [sp, #12]
 8001a9c:	9b02      	ldr	r3, [sp, #8]
 8001a9e:	043f      	lsls	r7, r7, #16
 8001aa0:	445b      	add	r3, fp
 8001aa2:	001e      	movs	r6, r3
 8001aa4:	4283      	cmp	r3, r0
 8001aa6:	4180      	sbcs	r0, r0
 8001aa8:	0423      	lsls	r3, r4, #16
 8001aaa:	4698      	mov	r8, r3
 8001aac:	9b05      	ldr	r3, [sp, #20]
 8001aae:	0c3f      	lsrs	r7, r7, #16
 8001ab0:	4447      	add	r7, r8
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	1876      	adds	r6, r6, r1
 8001ab6:	428e      	cmp	r6, r1
 8001ab8:	4189      	sbcs	r1, r1
 8001aba:	4447      	add	r7, r8
 8001abc:	4240      	negs	r0, r0
 8001abe:	183d      	adds	r5, r7, r0
 8001ac0:	46a8      	mov	r8, r5
 8001ac2:	4693      	mov	fp, r2
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	468a      	mov	sl, r1
 8001ac8:	44c3      	add	fp, r8
 8001aca:	429f      	cmp	r7, r3
 8001acc:	41bf      	sbcs	r7, r7
 8001ace:	4580      	cmp	r8, r0
 8001ad0:	4180      	sbcs	r0, r0
 8001ad2:	9b03      	ldr	r3, [sp, #12]
 8001ad4:	44da      	add	sl, fp
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4653      	mov	r3, sl
 8001ada:	4240      	negs	r0, r0
 8001adc:	427f      	negs	r7, r7
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	0c24      	lsrs	r4, r4, #16
 8001ae2:	4593      	cmp	fp, r2
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	458a      	cmp	sl, r1
 8001ae8:	4189      	sbcs	r1, r1
 8001aea:	193f      	adds	r7, r7, r4
 8001aec:	0ddc      	lsrs	r4, r3, #23
 8001aee:	9b04      	ldr	r3, [sp, #16]
 8001af0:	0275      	lsls	r5, r6, #9
 8001af2:	431d      	orrs	r5, r3
 8001af4:	1e68      	subs	r0, r5, #1
 8001af6:	4185      	sbcs	r5, r0
 8001af8:	4653      	mov	r3, sl
 8001afa:	4252      	negs	r2, r2
 8001afc:	4249      	negs	r1, r1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	18bf      	adds	r7, r7, r2
 8001b02:	4447      	add	r7, r8
 8001b04:	0df6      	lsrs	r6, r6, #23
 8001b06:	027f      	lsls	r7, r7, #9
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	025a      	lsls	r2, r3, #9
 8001b0c:	433c      	orrs	r4, r7
 8001b0e:	4315      	orrs	r5, r2
 8001b10:	01fb      	lsls	r3, r7, #7
 8001b12:	d400      	bmi.n	8001b16 <__aeabi_dmul+0x2fe>
 8001b14:	e0c1      	b.n	8001c9a <__aeabi_dmul+0x482>
 8001b16:	2101      	movs	r1, #1
 8001b18:	086a      	lsrs	r2, r5, #1
 8001b1a:	400d      	ands	r5, r1
 8001b1c:	4315      	orrs	r5, r2
 8001b1e:	07e2      	lsls	r2, r4, #31
 8001b20:	4315      	orrs	r5, r2
 8001b22:	0864      	lsrs	r4, r4, #1
 8001b24:	4926      	ldr	r1, [pc, #152]	; (8001bc0 <__aeabi_dmul+0x3a8>)
 8001b26:	4461      	add	r1, ip
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	dd56      	ble.n	8001bda <__aeabi_dmul+0x3c2>
 8001b2c:	076b      	lsls	r3, r5, #29
 8001b2e:	d009      	beq.n	8001b44 <__aeabi_dmul+0x32c>
 8001b30:	220f      	movs	r2, #15
 8001b32:	402a      	ands	r2, r5
 8001b34:	2a04      	cmp	r2, #4
 8001b36:	d005      	beq.n	8001b44 <__aeabi_dmul+0x32c>
 8001b38:	1d2a      	adds	r2, r5, #4
 8001b3a:	42aa      	cmp	r2, r5
 8001b3c:	41ad      	sbcs	r5, r5
 8001b3e:	426d      	negs	r5, r5
 8001b40:	1964      	adds	r4, r4, r5
 8001b42:	0015      	movs	r5, r2
 8001b44:	01e3      	lsls	r3, r4, #7
 8001b46:	d504      	bpl.n	8001b52 <__aeabi_dmul+0x33a>
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <__aeabi_dmul+0x3ac>)
 8001b4c:	00c9      	lsls	r1, r1, #3
 8001b4e:	4014      	ands	r4, r2
 8001b50:	4461      	add	r1, ip
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <__aeabi_dmul+0x3b0>)
 8001b54:	4291      	cmp	r1, r2
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dmul+0x342>
 8001b58:	e724      	b.n	80019a4 <__aeabi_dmul+0x18c>
 8001b5a:	0762      	lsls	r2, r4, #29
 8001b5c:	08ed      	lsrs	r5, r5, #3
 8001b5e:	0264      	lsls	r4, r4, #9
 8001b60:	0549      	lsls	r1, r1, #21
 8001b62:	4315      	orrs	r5, r2
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d4a      	lsrs	r2, r1, #21
 8001b68:	e6c6      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001b6a:	9701      	str	r7, [sp, #4]
 8001b6c:	e6b8      	b.n	80018e0 <__aeabi_dmul+0xc8>
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <__aeabi_dmul+0x398>)
 8001b70:	2003      	movs	r0, #3
 8001b72:	4694      	mov	ip, r2
 8001b74:	4463      	add	r3, ip
 8001b76:	464a      	mov	r2, r9
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	4691      	mov	r9, r2
 8001b80:	4652      	mov	r2, sl
 8001b82:	e68a      	b.n	800189a <__aeabi_dmul+0x82>
 8001b84:	4649      	mov	r1, r9
 8001b86:	2301      	movs	r3, #1
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	4689      	mov	r9, r1
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e683      	b.n	800189a <__aeabi_dmul+0x82>
 8001b92:	220c      	movs	r2, #12
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2303      	movs	r3, #3
 8001b98:	0005      	movs	r5, r0
 8001b9a:	4691      	mov	r9, r2
 8001b9c:	469b      	mov	fp, r3
 8001b9e:	e65e      	b.n	800185e <__aeabi_dmul+0x46>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	2400      	movs	r4, #0
 8001bac:	469b      	mov	fp, r3
 8001bae:	e656      	b.n	800185e <__aeabi_dmul+0x46>
 8001bb0:	000007ff 	.word	0x000007ff
 8001bb4:	fffffc01 	.word	0xfffffc01
 8001bb8:	0800af7c 	.word	0x0800af7c
 8001bbc:	fffffc0d 	.word	0xfffffc0d
 8001bc0:	000003ff 	.word	0x000003ff
 8001bc4:	feffffff 	.word	0xfeffffff
 8001bc8:	000007fe 	.word	0x000007fe
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2480      	movs	r4, #128	; 0x80
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	4a44      	ldr	r2, [pc, #272]	; (8001ce4 <__aeabi_dmul+0x4cc>)
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	0324      	lsls	r4, r4, #12
 8001bd8:	e68e      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001bda:	2001      	movs	r0, #1
 8001bdc:	1a40      	subs	r0, r0, r1
 8001bde:	2838      	cmp	r0, #56	; 0x38
 8001be0:	dd00      	ble.n	8001be4 <__aeabi_dmul+0x3cc>
 8001be2:	e686      	b.n	80018f2 <__aeabi_dmul+0xda>
 8001be4:	281f      	cmp	r0, #31
 8001be6:	dd5b      	ble.n	8001ca0 <__aeabi_dmul+0x488>
 8001be8:	221f      	movs	r2, #31
 8001bea:	0023      	movs	r3, r4
 8001bec:	4252      	negs	r2, r2
 8001bee:	1a51      	subs	r1, r2, r1
 8001bf0:	40cb      	lsrs	r3, r1
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	2820      	cmp	r0, #32
 8001bf6:	d003      	beq.n	8001c00 <__aeabi_dmul+0x3e8>
 8001bf8:	4a3b      	ldr	r2, [pc, #236]	; (8001ce8 <__aeabi_dmul+0x4d0>)
 8001bfa:	4462      	add	r2, ip
 8001bfc:	4094      	lsls	r4, r2
 8001bfe:	4325      	orrs	r5, r4
 8001c00:	1e6a      	subs	r2, r5, #1
 8001c02:	4195      	sbcs	r5, r2
 8001c04:	002a      	movs	r2, r5
 8001c06:	430a      	orrs	r2, r1
 8001c08:	2107      	movs	r1, #7
 8001c0a:	000d      	movs	r5, r1
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	4015      	ands	r5, r2
 8001c10:	4211      	tst	r1, r2
 8001c12:	d05b      	beq.n	8001ccc <__aeabi_dmul+0x4b4>
 8001c14:	210f      	movs	r1, #15
 8001c16:	2400      	movs	r4, #0
 8001c18:	4011      	ands	r1, r2
 8001c1a:	2904      	cmp	r1, #4
 8001c1c:	d053      	beq.n	8001cc6 <__aeabi_dmul+0x4ae>
 8001c1e:	1d11      	adds	r1, r2, #4
 8001c20:	4291      	cmp	r1, r2
 8001c22:	4192      	sbcs	r2, r2
 8001c24:	4252      	negs	r2, r2
 8001c26:	18a4      	adds	r4, r4, r2
 8001c28:	000a      	movs	r2, r1
 8001c2a:	0223      	lsls	r3, r4, #8
 8001c2c:	d54b      	bpl.n	8001cc6 <__aeabi_dmul+0x4ae>
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2400      	movs	r4, #0
 8001c32:	2500      	movs	r5, #0
 8001c34:	e660      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	031b      	lsls	r3, r3, #12
 8001c3a:	421c      	tst	r4, r3
 8001c3c:	d009      	beq.n	8001c52 <__aeabi_dmul+0x43a>
 8001c3e:	421e      	tst	r6, r3
 8001c40:	d107      	bne.n	8001c52 <__aeabi_dmul+0x43a>
 8001c42:	4333      	orrs	r3, r6
 8001c44:	031c      	lsls	r4, r3, #12
 8001c46:	4643      	mov	r3, r8
 8001c48:	0015      	movs	r5, r2
 8001c4a:	0b24      	lsrs	r4, r4, #12
 8001c4c:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <__aeabi_dmul+0x4cc>)
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	e652      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	0312      	lsls	r2, r2, #12
 8001c56:	4314      	orrs	r4, r2
 8001c58:	0324      	lsls	r4, r4, #12
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <__aeabi_dmul+0x4cc>)
 8001c5c:	0b24      	lsrs	r4, r4, #12
 8001c5e:	9701      	str	r7, [sp, #4]
 8001c60:	e64a      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001c62:	f000 fcc9 	bl	80025f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	001a      	movs	r2, r3
 8001c6a:	3215      	adds	r2, #21
 8001c6c:	3020      	adds	r0, #32
 8001c6e:	2a1c      	cmp	r2, #28
 8001c70:	dc00      	bgt.n	8001c74 <__aeabi_dmul+0x45c>
 8001c72:	e684      	b.n	800197e <__aeabi_dmul+0x166>
 8001c74:	4656      	mov	r6, sl
 8001c76:	3b08      	subs	r3, #8
 8001c78:	2200      	movs	r2, #0
 8001c7a:	409e      	lsls	r6, r3
 8001c7c:	e689      	b.n	8001992 <__aeabi_dmul+0x17a>
 8001c7e:	f000 fcbb 	bl	80025f8 <__clzsi2>
 8001c82:	0001      	movs	r1, r0
 8001c84:	0002      	movs	r2, r0
 8001c86:	3115      	adds	r1, #21
 8001c88:	3220      	adds	r2, #32
 8001c8a:	291c      	cmp	r1, #28
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_dmul+0x478>
 8001c8e:	e64e      	b.n	800192e <__aeabi_dmul+0x116>
 8001c90:	0034      	movs	r4, r6
 8001c92:	3808      	subs	r0, #8
 8001c94:	2500      	movs	r5, #0
 8001c96:	4084      	lsls	r4, r0
 8001c98:	e653      	b.n	8001942 <__aeabi_dmul+0x12a>
 8001c9a:	9b00      	ldr	r3, [sp, #0]
 8001c9c:	469c      	mov	ip, r3
 8001c9e:	e741      	b.n	8001b24 <__aeabi_dmul+0x30c>
 8001ca0:	4912      	ldr	r1, [pc, #72]	; (8001cec <__aeabi_dmul+0x4d4>)
 8001ca2:	0022      	movs	r2, r4
 8001ca4:	4461      	add	r1, ip
 8001ca6:	002e      	movs	r6, r5
 8001ca8:	408d      	lsls	r5, r1
 8001caa:	408a      	lsls	r2, r1
 8001cac:	40c6      	lsrs	r6, r0
 8001cae:	1e69      	subs	r1, r5, #1
 8001cb0:	418d      	sbcs	r5, r1
 8001cb2:	4332      	orrs	r2, r6
 8001cb4:	432a      	orrs	r2, r5
 8001cb6:	40c4      	lsrs	r4, r0
 8001cb8:	0753      	lsls	r3, r2, #29
 8001cba:	d0b6      	beq.n	8001c2a <__aeabi_dmul+0x412>
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	4011      	ands	r1, r2
 8001cc0:	2904      	cmp	r1, #4
 8001cc2:	d1ac      	bne.n	8001c1e <__aeabi_dmul+0x406>
 8001cc4:	e7b1      	b.n	8001c2a <__aeabi_dmul+0x412>
 8001cc6:	0765      	lsls	r5, r4, #29
 8001cc8:	0264      	lsls	r4, r4, #9
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	08d2      	lsrs	r2, r2, #3
 8001cce:	4315      	orrs	r5, r2
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	e611      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4314      	orrs	r4, r2
 8001cda:	0324      	lsls	r4, r4, #12
 8001cdc:	4a01      	ldr	r2, [pc, #4]	; (8001ce4 <__aeabi_dmul+0x4cc>)
 8001cde:	0b24      	lsrs	r4, r4, #12
 8001ce0:	e60a      	b.n	80018f8 <__aeabi_dmul+0xe0>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	0000043e 	.word	0x0000043e
 8001cec:	0000041e 	.word	0x0000041e

08001cf0 <__aeabi_dsub>:
 8001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf2:	4657      	mov	r7, sl
 8001cf4:	464e      	mov	r6, r9
 8001cf6:	4645      	mov	r5, r8
 8001cf8:	46de      	mov	lr, fp
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	b5e0      	push	{r5, r6, r7, lr}
 8001cfe:	001f      	movs	r7, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	030b      	lsls	r3, r1, #12
 8001d04:	0f62      	lsrs	r2, r4, #29
 8001d06:	004e      	lsls	r6, r1, #1
 8001d08:	0fcd      	lsrs	r5, r1, #31
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	0339      	lsls	r1, r7, #12
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	0a49      	lsrs	r1, r1, #9
 8001d12:	00e2      	lsls	r2, r4, #3
 8001d14:	0f44      	lsrs	r4, r0, #29
 8001d16:	4321      	orrs	r1, r4
 8001d18:	4cc2      	ldr	r4, [pc, #776]	; (8002024 <__aeabi_dsub+0x334>)
 8001d1a:	4691      	mov	r9, r2
 8001d1c:	4692      	mov	sl, r2
 8001d1e:	00c0      	lsls	r0, r0, #3
 8001d20:	007a      	lsls	r2, r7, #1
 8001d22:	4680      	mov	r8, r0
 8001d24:	0d76      	lsrs	r6, r6, #21
 8001d26:	0d52      	lsrs	r2, r2, #21
 8001d28:	0fff      	lsrs	r7, r7, #31
 8001d2a:	42a2      	cmp	r2, r4
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x40>
 8001d2e:	e0b4      	b.n	8001e9a <__aeabi_dsub+0x1aa>
 8001d30:	2401      	movs	r4, #1
 8001d32:	4067      	eors	r7, r4
 8001d34:	46bb      	mov	fp, r7
 8001d36:	42bd      	cmp	r5, r7
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x4c>
 8001d3a:	e088      	b.n	8001e4e <__aeabi_dsub+0x15e>
 8001d3c:	1ab4      	subs	r4, r6, r2
 8001d3e:	46a4      	mov	ip, r4
 8001d40:	2c00      	cmp	r4, #0
 8001d42:	dc00      	bgt.n	8001d46 <__aeabi_dsub+0x56>
 8001d44:	e0b2      	b.n	8001eac <__aeabi_dsub+0x1bc>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x5c>
 8001d4a:	e0c5      	b.n	8001ed8 <__aeabi_dsub+0x1e8>
 8001d4c:	4ab5      	ldr	r2, [pc, #724]	; (8002024 <__aeabi_dsub+0x334>)
 8001d4e:	4296      	cmp	r6, r2
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x64>
 8001d52:	e28b      	b.n	800226c <__aeabi_dsub+0x57c>
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	0412      	lsls	r2, r2, #16
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	4662      	mov	r2, ip
 8001d5c:	2a38      	cmp	r2, #56	; 0x38
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dsub+0x72>
 8001d60:	e1a1      	b.n	80020a6 <__aeabi_dsub+0x3b6>
 8001d62:	2a1f      	cmp	r2, #31
 8001d64:	dd00      	ble.n	8001d68 <__aeabi_dsub+0x78>
 8001d66:	e216      	b.n	8002196 <__aeabi_dsub+0x4a6>
 8001d68:	2720      	movs	r7, #32
 8001d6a:	000c      	movs	r4, r1
 8001d6c:	1abf      	subs	r7, r7, r2
 8001d6e:	40bc      	lsls	r4, r7
 8001d70:	0002      	movs	r2, r0
 8001d72:	46a0      	mov	r8, r4
 8001d74:	4664      	mov	r4, ip
 8001d76:	40b8      	lsls	r0, r7
 8001d78:	40e2      	lsrs	r2, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	4314      	orrs	r4, r2
 8001d7e:	0002      	movs	r2, r0
 8001d80:	1e50      	subs	r0, r2, #1
 8001d82:	4182      	sbcs	r2, r0
 8001d84:	4660      	mov	r0, ip
 8001d86:	40c1      	lsrs	r1, r0
 8001d88:	4322      	orrs	r2, r4
 8001d8a:	1a5b      	subs	r3, r3, r1
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	1a8c      	subs	r4, r1, r2
 8001d90:	45a1      	cmp	r9, r4
 8001d92:	4192      	sbcs	r2, r2
 8001d94:	4252      	negs	r2, r2
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	4698      	mov	r8, r3
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	d400      	bmi.n	8001da2 <__aeabi_dsub+0xb2>
 8001da0:	e117      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 8001da2:	4643      	mov	r3, r8
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	4698      	mov	r8, r3
 8001daa:	4643      	mov	r3, r8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0xc2>
 8001db0:	e16c      	b.n	800208c <__aeabi_dsub+0x39c>
 8001db2:	4640      	mov	r0, r8
 8001db4:	f000 fc20 	bl	80025f8 <__clzsi2>
 8001db8:	0002      	movs	r2, r0
 8001dba:	3a08      	subs	r2, #8
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	40c8      	lsrs	r0, r1
 8001dc8:	4094      	lsls	r4, r2
 8001dca:	4303      	orrs	r3, r0
 8001dcc:	4296      	cmp	r6, r2
 8001dce:	dd00      	ble.n	8001dd2 <__aeabi_dsub+0xe2>
 8001dd0:	e157      	b.n	8002082 <__aeabi_dsub+0x392>
 8001dd2:	1b96      	subs	r6, r2, r6
 8001dd4:	1c71      	adds	r1, r6, #1
 8001dd6:	291f      	cmp	r1, #31
 8001dd8:	dd00      	ble.n	8001ddc <__aeabi_dsub+0xec>
 8001dda:	e1cb      	b.n	8002174 <__aeabi_dsub+0x484>
 8001ddc:	2220      	movs	r2, #32
 8001dde:	0018      	movs	r0, r3
 8001de0:	0026      	movs	r6, r4
 8001de2:	1a52      	subs	r2, r2, r1
 8001de4:	4094      	lsls	r4, r2
 8001de6:	4090      	lsls	r0, r2
 8001de8:	40ce      	lsrs	r6, r1
 8001dea:	40cb      	lsrs	r3, r1
 8001dec:	1e62      	subs	r2, r4, #1
 8001dee:	4194      	sbcs	r4, r2
 8001df0:	4330      	orrs	r0, r6
 8001df2:	4698      	mov	r8, r3
 8001df4:	2600      	movs	r6, #0
 8001df6:	4304      	orrs	r4, r0
 8001df8:	0763      	lsls	r3, r4, #29
 8001dfa:	d009      	beq.n	8001e10 <__aeabi_dsub+0x120>
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	4023      	ands	r3, r4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <__aeabi_dsub+0x120>
 8001e04:	1d23      	adds	r3, r4, #4
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	41a4      	sbcs	r4, r4
 8001e0a:	4264      	negs	r4, r4
 8001e0c:	44a0      	add	r8, r4
 8001e0e:	001c      	movs	r4, r3
 8001e10:	4643      	mov	r3, r8
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_dsub+0x128>
 8001e16:	e0df      	b.n	8001fd8 <__aeabi_dsub+0x2e8>
 8001e18:	4b82      	ldr	r3, [pc, #520]	; (8002024 <__aeabi_dsub+0x334>)
 8001e1a:	3601      	adds	r6, #1
 8001e1c:	429e      	cmp	r6, r3
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x132>
 8001e20:	e0fb      	b.n	800201a <__aeabi_dsub+0x32a>
 8001e22:	4642      	mov	r2, r8
 8001e24:	4b80      	ldr	r3, [pc, #512]	; (8002028 <__aeabi_dsub+0x338>)
 8001e26:	08e4      	lsrs	r4, r4, #3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	0571      	lsls	r1, r6, #21
 8001e2e:	0752      	lsls	r2, r2, #29
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	4322      	orrs	r2, r4
 8001e34:	0b1b      	lsrs	r3, r3, #12
 8001e36:	0d49      	lsrs	r1, r1, #21
 8001e38:	0509      	lsls	r1, r1, #20
 8001e3a:	07ed      	lsls	r5, r5, #31
 8001e3c:	4319      	orrs	r1, r3
 8001e3e:	4329      	orrs	r1, r5
 8001e40:	0010      	movs	r0, r2
 8001e42:	bcf0      	pop	{r4, r5, r6, r7}
 8001e44:	46bb      	mov	fp, r7
 8001e46:	46b2      	mov	sl, r6
 8001e48:	46a9      	mov	r9, r5
 8001e4a:	46a0      	mov	r8, r4
 8001e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4e:	1ab4      	subs	r4, r6, r2
 8001e50:	46a4      	mov	ip, r4
 8001e52:	2c00      	cmp	r4, #0
 8001e54:	dd58      	ble.n	8001f08 <__aeabi_dsub+0x218>
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x16c>
 8001e5a:	e09e      	b.n	8001f9a <__aeabi_dsub+0x2aa>
 8001e5c:	4a71      	ldr	r2, [pc, #452]	; (8002024 <__aeabi_dsub+0x334>)
 8001e5e:	4296      	cmp	r6, r2
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x174>
 8001e62:	e13b      	b.n	80020dc <__aeabi_dsub+0x3ec>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0412      	lsls	r2, r2, #16
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	4662      	mov	r2, ip
 8001e6c:	2a38      	cmp	r2, #56	; 0x38
 8001e6e:	dd00      	ble.n	8001e72 <__aeabi_dsub+0x182>
 8001e70:	e0c1      	b.n	8001ff6 <__aeabi_dsub+0x306>
 8001e72:	2a1f      	cmp	r2, #31
 8001e74:	dc00      	bgt.n	8001e78 <__aeabi_dsub+0x188>
 8001e76:	e1bb      	b.n	80021f0 <__aeabi_dsub+0x500>
 8001e78:	000c      	movs	r4, r1
 8001e7a:	3a20      	subs	r2, #32
 8001e7c:	40d4      	lsrs	r4, r2
 8001e7e:	0022      	movs	r2, r4
 8001e80:	4664      	mov	r4, ip
 8001e82:	2c20      	cmp	r4, #32
 8001e84:	d004      	beq.n	8001e90 <__aeabi_dsub+0x1a0>
 8001e86:	2740      	movs	r7, #64	; 0x40
 8001e88:	1b3f      	subs	r7, r7, r4
 8001e8a:	40b9      	lsls	r1, r7
 8001e8c:	4308      	orrs	r0, r1
 8001e8e:	4680      	mov	r8, r0
 8001e90:	4644      	mov	r4, r8
 8001e92:	1e61      	subs	r1, r4, #1
 8001e94:	418c      	sbcs	r4, r1
 8001e96:	4314      	orrs	r4, r2
 8001e98:	e0b1      	b.n	8001ffe <__aeabi_dsub+0x30e>
 8001e9a:	000c      	movs	r4, r1
 8001e9c:	4304      	orrs	r4, r0
 8001e9e:	d02a      	beq.n	8001ef6 <__aeabi_dsub+0x206>
 8001ea0:	46bb      	mov	fp, r7
 8001ea2:	42bd      	cmp	r5, r7
 8001ea4:	d02d      	beq.n	8001f02 <__aeabi_dsub+0x212>
 8001ea6:	4c61      	ldr	r4, [pc, #388]	; (800202c <__aeabi_dsub+0x33c>)
 8001ea8:	46a4      	mov	ip, r4
 8001eaa:	44b4      	add	ip, r6
 8001eac:	4664      	mov	r4, ip
 8001eae:	2c00      	cmp	r4, #0
 8001eb0:	d05c      	beq.n	8001f6c <__aeabi_dsub+0x27c>
 8001eb2:	1b94      	subs	r4, r2, r6
 8001eb4:	46a4      	mov	ip, r4
 8001eb6:	2e00      	cmp	r6, #0
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x1cc>
 8001eba:	e115      	b.n	80020e8 <__aeabi_dsub+0x3f8>
 8001ebc:	464d      	mov	r5, r9
 8001ebe:	431d      	orrs	r5, r3
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x1d4>
 8001ec2:	e1c3      	b.n	800224c <__aeabi_dsub+0x55c>
 8001ec4:	1e65      	subs	r5, r4, #1
 8001ec6:	2c01      	cmp	r4, #1
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x1dc>
 8001eca:	e20c      	b.n	80022e6 <__aeabi_dsub+0x5f6>
 8001ecc:	4e55      	ldr	r6, [pc, #340]	; (8002024 <__aeabi_dsub+0x334>)
 8001ece:	42b4      	cmp	r4, r6
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x1e4>
 8001ed2:	e1f8      	b.n	80022c6 <__aeabi_dsub+0x5d6>
 8001ed4:	46ac      	mov	ip, r5
 8001ed6:	e10e      	b.n	80020f6 <__aeabi_dsub+0x406>
 8001ed8:	000a      	movs	r2, r1
 8001eda:	4302      	orrs	r2, r0
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x1f0>
 8001ede:	e136      	b.n	800214e <__aeabi_dsub+0x45e>
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	3a01      	subs	r2, #1
 8001ee4:	2c01      	cmp	r4, #1
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dsub+0x1fa>
 8001ee8:	e1c6      	b.n	8002278 <__aeabi_dsub+0x588>
 8001eea:	4c4e      	ldr	r4, [pc, #312]	; (8002024 <__aeabi_dsub+0x334>)
 8001eec:	45a4      	cmp	ip, r4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x202>
 8001ef0:	e0f4      	b.n	80020dc <__aeabi_dsub+0x3ec>
 8001ef2:	4694      	mov	ip, r2
 8001ef4:	e731      	b.n	8001d5a <__aeabi_dsub+0x6a>
 8001ef6:	2401      	movs	r4, #1
 8001ef8:	4067      	eors	r7, r4
 8001efa:	46bb      	mov	fp, r7
 8001efc:	42bd      	cmp	r5, r7
 8001efe:	d000      	beq.n	8001f02 <__aeabi_dsub+0x212>
 8001f00:	e71c      	b.n	8001d3c <__aeabi_dsub+0x4c>
 8001f02:	4c4a      	ldr	r4, [pc, #296]	; (800202c <__aeabi_dsub+0x33c>)
 8001f04:	46a4      	mov	ip, r4
 8001f06:	44b4      	add	ip, r6
 8001f08:	4664      	mov	r4, ip
 8001f0a:	2c00      	cmp	r4, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x220>
 8001f0e:	e0cf      	b.n	80020b0 <__aeabi_dsub+0x3c0>
 8001f10:	1b94      	subs	r4, r2, r6
 8001f12:	46a4      	mov	ip, r4
 8001f14:	2e00      	cmp	r6, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x22a>
 8001f18:	e15c      	b.n	80021d4 <__aeabi_dsub+0x4e4>
 8001f1a:	4e42      	ldr	r6, [pc, #264]	; (8002024 <__aeabi_dsub+0x334>)
 8001f1c:	42b2      	cmp	r2, r6
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x232>
 8001f20:	e1ec      	b.n	80022fc <__aeabi_dsub+0x60c>
 8001f22:	2680      	movs	r6, #128	; 0x80
 8001f24:	0436      	lsls	r6, r6, #16
 8001f26:	4333      	orrs	r3, r6
 8001f28:	4664      	mov	r4, ip
 8001f2a:	2c38      	cmp	r4, #56	; 0x38
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x240>
 8001f2e:	e1b3      	b.n	8002298 <__aeabi_dsub+0x5a8>
 8001f30:	2c1f      	cmp	r4, #31
 8001f32:	dd00      	ble.n	8001f36 <__aeabi_dsub+0x246>
 8001f34:	e238      	b.n	80023a8 <__aeabi_dsub+0x6b8>
 8001f36:	2620      	movs	r6, #32
 8001f38:	1b36      	subs	r6, r6, r4
 8001f3a:	001c      	movs	r4, r3
 8001f3c:	40b4      	lsls	r4, r6
 8001f3e:	464f      	mov	r7, r9
 8001f40:	46a0      	mov	r8, r4
 8001f42:	4664      	mov	r4, ip
 8001f44:	40e7      	lsrs	r7, r4
 8001f46:	4644      	mov	r4, r8
 8001f48:	433c      	orrs	r4, r7
 8001f4a:	464f      	mov	r7, r9
 8001f4c:	40b7      	lsls	r7, r6
 8001f4e:	003e      	movs	r6, r7
 8001f50:	1e77      	subs	r7, r6, #1
 8001f52:	41be      	sbcs	r6, r7
 8001f54:	4334      	orrs	r4, r6
 8001f56:	4666      	mov	r6, ip
 8001f58:	40f3      	lsrs	r3, r6
 8001f5a:	18c9      	adds	r1, r1, r3
 8001f5c:	1824      	adds	r4, r4, r0
 8001f5e:	4284      	cmp	r4, r0
 8001f60:	419b      	sbcs	r3, r3
 8001f62:	425b      	negs	r3, r3
 8001f64:	4698      	mov	r8, r3
 8001f66:	0016      	movs	r6, r2
 8001f68:	4488      	add	r8, r1
 8001f6a:	e04e      	b.n	800200a <__aeabi_dsub+0x31a>
 8001f6c:	4a30      	ldr	r2, [pc, #192]	; (8002030 <__aeabi_dsub+0x340>)
 8001f6e:	1c74      	adds	r4, r6, #1
 8001f70:	4214      	tst	r4, r2
 8001f72:	d000      	beq.n	8001f76 <__aeabi_dsub+0x286>
 8001f74:	e0d6      	b.n	8002124 <__aeabi_dsub+0x434>
 8001f76:	464a      	mov	r2, r9
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	2e00      	cmp	r6, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x290>
 8001f7e:	e15b      	b.n	8002238 <__aeabi_dsub+0x548>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x296>
 8001f84:	e1a5      	b.n	80022d2 <__aeabi_dsub+0x5e2>
 8001f86:	000a      	movs	r2, r1
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	d000      	beq.n	8001f8e <__aeabi_dsub+0x29e>
 8001f8c:	e1bb      	b.n	8002306 <__aeabi_dsub+0x616>
 8001f8e:	464a      	mov	r2, r9
 8001f90:	0759      	lsls	r1, r3, #29
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	430a      	orrs	r2, r1
 8001f96:	08db      	lsrs	r3, r3, #3
 8001f98:	e027      	b.n	8001fea <__aeabi_dsub+0x2fa>
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	4302      	orrs	r2, r0
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dsub+0x2b2>
 8001fa0:	e174      	b.n	800228c <__aeabi_dsub+0x59c>
 8001fa2:	0022      	movs	r2, r4
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	2c01      	cmp	r4, #1
 8001fa8:	d005      	beq.n	8001fb6 <__aeabi_dsub+0x2c6>
 8001faa:	4c1e      	ldr	r4, [pc, #120]	; (8002024 <__aeabi_dsub+0x334>)
 8001fac:	45a4      	cmp	ip, r4
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x2c2>
 8001fb0:	e094      	b.n	80020dc <__aeabi_dsub+0x3ec>
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	e759      	b.n	8001e6a <__aeabi_dsub+0x17a>
 8001fb6:	4448      	add	r0, r9
 8001fb8:	4548      	cmp	r0, r9
 8001fba:	4192      	sbcs	r2, r2
 8001fbc:	185b      	adds	r3, r3, r1
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	0004      	movs	r4, r0
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	4490      	add	r8, r2
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	2602      	movs	r6, #2
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	d500      	bpl.n	8001fd0 <__aeabi_dsub+0x2e0>
 8001fce:	e0c4      	b.n	800215a <__aeabi_dsub+0x46a>
 8001fd0:	3e01      	subs	r6, #1
 8001fd2:	0763      	lsls	r3, r4, #29
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x2e8>
 8001fd6:	e711      	b.n	8001dfc <__aeabi_dsub+0x10c>
 8001fd8:	4643      	mov	r3, r8
 8001fda:	46b4      	mov	ip, r6
 8001fdc:	0759      	lsls	r1, r3, #29
 8001fde:	08e2      	lsrs	r2, r4, #3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	490f      	ldr	r1, [pc, #60]	; (8002024 <__aeabi_dsub+0x334>)
 8001fe6:	458c      	cmp	ip, r1
 8001fe8:	d040      	beq.n	800206c <__aeabi_dsub+0x37c>
 8001fea:	4661      	mov	r1, ip
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	0549      	lsls	r1, r1, #21
 8001ff0:	0b1b      	lsrs	r3, r3, #12
 8001ff2:	0d49      	lsrs	r1, r1, #21
 8001ff4:	e720      	b.n	8001e38 <__aeabi_dsub+0x148>
 8001ff6:	4301      	orrs	r1, r0
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	1e61      	subs	r1, r4, #1
 8001ffc:	418c      	sbcs	r4, r1
 8001ffe:	444c      	add	r4, r9
 8002000:	454c      	cmp	r4, r9
 8002002:	4192      	sbcs	r2, r2
 8002004:	4252      	negs	r2, r2
 8002006:	4690      	mov	r8, r2
 8002008:	4498      	add	r8, r3
 800200a:	4643      	mov	r3, r8
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	d5e0      	bpl.n	8001fd2 <__aeabi_dsub+0x2e2>
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__aeabi_dsub+0x334>)
 8002012:	3601      	adds	r6, #1
 8002014:	429e      	cmp	r6, r3
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x32a>
 8002018:	e09f      	b.n	800215a <__aeabi_dsub+0x46a>
 800201a:	0031      	movs	r1, r6
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	e70a      	b.n	8001e38 <__aeabi_dsub+0x148>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	fffff801 	.word	0xfffff801
 8002030:	000007fe 	.word	0x000007fe
 8002034:	2a00      	cmp	r2, #0
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x34a>
 8002038:	e160      	b.n	80022fc <__aeabi_dsub+0x60c>
 800203a:	000a      	movs	r2, r1
 800203c:	4302      	orrs	r2, r0
 800203e:	d04d      	beq.n	80020dc <__aeabi_dsub+0x3ec>
 8002040:	464a      	mov	r2, r9
 8002042:	075c      	lsls	r4, r3, #29
 8002044:	08d2      	lsrs	r2, r2, #3
 8002046:	4322      	orrs	r2, r4
 8002048:	2480      	movs	r4, #128	; 0x80
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	4223      	tst	r3, r4
 8002050:	d007      	beq.n	8002062 <__aeabi_dsub+0x372>
 8002052:	08ce      	lsrs	r6, r1, #3
 8002054:	4226      	tst	r6, r4
 8002056:	d104      	bne.n	8002062 <__aeabi_dsub+0x372>
 8002058:	465d      	mov	r5, fp
 800205a:	0033      	movs	r3, r6
 800205c:	08c2      	lsrs	r2, r0, #3
 800205e:	0749      	lsls	r1, r1, #29
 8002060:	430a      	orrs	r2, r1
 8002062:	0f51      	lsrs	r1, r2, #29
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	08d2      	lsrs	r2, r2, #3
 8002068:	0749      	lsls	r1, r1, #29
 800206a:	430a      	orrs	r2, r1
 800206c:	0011      	movs	r1, r2
 800206e:	4319      	orrs	r1, r3
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x384>
 8002072:	e1c8      	b.n	8002406 <__aeabi_dsub+0x716>
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0309      	lsls	r1, r1, #12
 8002078:	430b      	orrs	r3, r1
 800207a:	031b      	lsls	r3, r3, #12
 800207c:	49d5      	ldr	r1, [pc, #852]	; (80023d4 <__aeabi_dsub+0x6e4>)
 800207e:	0b1b      	lsrs	r3, r3, #12
 8002080:	e6da      	b.n	8001e38 <__aeabi_dsub+0x148>
 8002082:	49d5      	ldr	r1, [pc, #852]	; (80023d8 <__aeabi_dsub+0x6e8>)
 8002084:	1ab6      	subs	r6, r6, r2
 8002086:	400b      	ands	r3, r1
 8002088:	4698      	mov	r8, r3
 800208a:	e6b5      	b.n	8001df8 <__aeabi_dsub+0x108>
 800208c:	0020      	movs	r0, r4
 800208e:	f000 fab3 	bl	80025f8 <__clzsi2>
 8002092:	0002      	movs	r2, r0
 8002094:	3218      	adds	r2, #24
 8002096:	2a1f      	cmp	r2, #31
 8002098:	dc00      	bgt.n	800209c <__aeabi_dsub+0x3ac>
 800209a:	e68f      	b.n	8001dbc <__aeabi_dsub+0xcc>
 800209c:	0023      	movs	r3, r4
 800209e:	3808      	subs	r0, #8
 80020a0:	4083      	lsls	r3, r0
 80020a2:	2400      	movs	r4, #0
 80020a4:	e692      	b.n	8001dcc <__aeabi_dsub+0xdc>
 80020a6:	4308      	orrs	r0, r1
 80020a8:	0002      	movs	r2, r0
 80020aa:	1e50      	subs	r0, r2, #1
 80020ac:	4182      	sbcs	r2, r0
 80020ae:	e66d      	b.n	8001d8c <__aeabi_dsub+0x9c>
 80020b0:	4cca      	ldr	r4, [pc, #808]	; (80023dc <__aeabi_dsub+0x6ec>)
 80020b2:	1c72      	adds	r2, r6, #1
 80020b4:	4222      	tst	r2, r4
 80020b6:	d000      	beq.n	80020ba <__aeabi_dsub+0x3ca>
 80020b8:	e0ad      	b.n	8002216 <__aeabi_dsub+0x526>
 80020ba:	464a      	mov	r2, r9
 80020bc:	431a      	orrs	r2, r3
 80020be:	2e00      	cmp	r6, #0
 80020c0:	d1b8      	bne.n	8002034 <__aeabi_dsub+0x344>
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x3d8>
 80020c6:	e158      	b.n	800237a <__aeabi_dsub+0x68a>
 80020c8:	000a      	movs	r2, r1
 80020ca:	4302      	orrs	r2, r0
 80020cc:	d000      	beq.n	80020d0 <__aeabi_dsub+0x3e0>
 80020ce:	e159      	b.n	8002384 <__aeabi_dsub+0x694>
 80020d0:	464a      	mov	r2, r9
 80020d2:	0759      	lsls	r1, r3, #29
 80020d4:	08d2      	lsrs	r2, r2, #3
 80020d6:	430a      	orrs	r2, r1
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	e786      	b.n	8001fea <__aeabi_dsub+0x2fa>
 80020dc:	464a      	mov	r2, r9
 80020de:	0759      	lsls	r1, r3, #29
 80020e0:	08d2      	lsrs	r2, r2, #3
 80020e2:	430a      	orrs	r2, r1
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	e7c1      	b.n	800206c <__aeabi_dsub+0x37c>
 80020e8:	4dba      	ldr	r5, [pc, #744]	; (80023d4 <__aeabi_dsub+0x6e4>)
 80020ea:	42aa      	cmp	r2, r5
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x400>
 80020ee:	e11e      	b.n	800232e <__aeabi_dsub+0x63e>
 80020f0:	2580      	movs	r5, #128	; 0x80
 80020f2:	042d      	lsls	r5, r5, #16
 80020f4:	432b      	orrs	r3, r5
 80020f6:	4664      	mov	r4, ip
 80020f8:	2c38      	cmp	r4, #56	; 0x38
 80020fa:	dc5d      	bgt.n	80021b8 <__aeabi_dsub+0x4c8>
 80020fc:	2c1f      	cmp	r4, #31
 80020fe:	dd00      	ble.n	8002102 <__aeabi_dsub+0x412>
 8002100:	e0d0      	b.n	80022a4 <__aeabi_dsub+0x5b4>
 8002102:	2520      	movs	r5, #32
 8002104:	4667      	mov	r7, ip
 8002106:	1b2d      	subs	r5, r5, r4
 8002108:	464e      	mov	r6, r9
 800210a:	001c      	movs	r4, r3
 800210c:	40fe      	lsrs	r6, r7
 800210e:	40ac      	lsls	r4, r5
 8002110:	4334      	orrs	r4, r6
 8002112:	464e      	mov	r6, r9
 8002114:	40ae      	lsls	r6, r5
 8002116:	0035      	movs	r5, r6
 8002118:	40fb      	lsrs	r3, r7
 800211a:	1e6e      	subs	r6, r5, #1
 800211c:	41b5      	sbcs	r5, r6
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	432c      	orrs	r4, r5
 8002122:	e04e      	b.n	80021c2 <__aeabi_dsub+0x4d2>
 8002124:	464a      	mov	r2, r9
 8002126:	1a14      	subs	r4, r2, r0
 8002128:	45a1      	cmp	r9, r4
 800212a:	4192      	sbcs	r2, r2
 800212c:	4252      	negs	r2, r2
 800212e:	4690      	mov	r8, r2
 8002130:	1a5f      	subs	r7, r3, r1
 8002132:	003a      	movs	r2, r7
 8002134:	4647      	mov	r7, r8
 8002136:	1bd2      	subs	r2, r2, r7
 8002138:	4690      	mov	r8, r2
 800213a:	0212      	lsls	r2, r2, #8
 800213c:	d500      	bpl.n	8002140 <__aeabi_dsub+0x450>
 800213e:	e08b      	b.n	8002258 <__aeabi_dsub+0x568>
 8002140:	4642      	mov	r2, r8
 8002142:	4322      	orrs	r2, r4
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x458>
 8002146:	e630      	b.n	8001daa <__aeabi_dsub+0xba>
 8002148:	2300      	movs	r3, #0
 800214a:	2500      	movs	r5, #0
 800214c:	e74d      	b.n	8001fea <__aeabi_dsub+0x2fa>
 800214e:	464a      	mov	r2, r9
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	430a      	orrs	r2, r1
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	e744      	b.n	8001fe4 <__aeabi_dsub+0x2f4>
 800215a:	4642      	mov	r2, r8
 800215c:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <__aeabi_dsub+0x6e8>)
 800215e:	0861      	lsrs	r1, r4, #1
 8002160:	401a      	ands	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	2201      	movs	r2, #1
 8002166:	4014      	ands	r4, r2
 8002168:	430c      	orrs	r4, r1
 800216a:	07da      	lsls	r2, r3, #31
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	4698      	mov	r8, r3
 8002170:	4314      	orrs	r4, r2
 8002172:	e641      	b.n	8001df8 <__aeabi_dsub+0x108>
 8002174:	001a      	movs	r2, r3
 8002176:	3e1f      	subs	r6, #31
 8002178:	40f2      	lsrs	r2, r6
 800217a:	0016      	movs	r6, r2
 800217c:	2920      	cmp	r1, #32
 800217e:	d003      	beq.n	8002188 <__aeabi_dsub+0x498>
 8002180:	2240      	movs	r2, #64	; 0x40
 8002182:	1a51      	subs	r1, r2, r1
 8002184:	408b      	lsls	r3, r1
 8002186:	431c      	orrs	r4, r3
 8002188:	1e62      	subs	r2, r4, #1
 800218a:	4194      	sbcs	r4, r2
 800218c:	2300      	movs	r3, #0
 800218e:	4334      	orrs	r4, r6
 8002190:	4698      	mov	r8, r3
 8002192:	2600      	movs	r6, #0
 8002194:	e71d      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 8002196:	000c      	movs	r4, r1
 8002198:	3a20      	subs	r2, #32
 800219a:	40d4      	lsrs	r4, r2
 800219c:	0022      	movs	r2, r4
 800219e:	4664      	mov	r4, ip
 80021a0:	2c20      	cmp	r4, #32
 80021a2:	d004      	beq.n	80021ae <__aeabi_dsub+0x4be>
 80021a4:	2740      	movs	r7, #64	; 0x40
 80021a6:	1b3f      	subs	r7, r7, r4
 80021a8:	40b9      	lsls	r1, r7
 80021aa:	4308      	orrs	r0, r1
 80021ac:	4680      	mov	r8, r0
 80021ae:	4644      	mov	r4, r8
 80021b0:	1e61      	subs	r1, r4, #1
 80021b2:	418c      	sbcs	r4, r1
 80021b4:	4322      	orrs	r2, r4
 80021b6:	e5e9      	b.n	8001d8c <__aeabi_dsub+0x9c>
 80021b8:	464c      	mov	r4, r9
 80021ba:	4323      	orrs	r3, r4
 80021bc:	001c      	movs	r4, r3
 80021be:	1e63      	subs	r3, r4, #1
 80021c0:	419c      	sbcs	r4, r3
 80021c2:	1b04      	subs	r4, r0, r4
 80021c4:	42a0      	cmp	r0, r4
 80021c6:	419b      	sbcs	r3, r3
 80021c8:	425b      	negs	r3, r3
 80021ca:	1acb      	subs	r3, r1, r3
 80021cc:	4698      	mov	r8, r3
 80021ce:	465d      	mov	r5, fp
 80021d0:	0016      	movs	r6, r2
 80021d2:	e5e2      	b.n	8001d9a <__aeabi_dsub+0xaa>
 80021d4:	464e      	mov	r6, r9
 80021d6:	431e      	orrs	r6, r3
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x4ec>
 80021da:	e0ae      	b.n	800233a <__aeabi_dsub+0x64a>
 80021dc:	1e66      	subs	r6, r4, #1
 80021de:	2c01      	cmp	r4, #1
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x4f4>
 80021e2:	e0fd      	b.n	80023e0 <__aeabi_dsub+0x6f0>
 80021e4:	4f7b      	ldr	r7, [pc, #492]	; (80023d4 <__aeabi_dsub+0x6e4>)
 80021e6:	42bc      	cmp	r4, r7
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0x4fc>
 80021ea:	e107      	b.n	80023fc <__aeabi_dsub+0x70c>
 80021ec:	46b4      	mov	ip, r6
 80021ee:	e69b      	b.n	8001f28 <__aeabi_dsub+0x238>
 80021f0:	4664      	mov	r4, ip
 80021f2:	2220      	movs	r2, #32
 80021f4:	1b12      	subs	r2, r2, r4
 80021f6:	000c      	movs	r4, r1
 80021f8:	4094      	lsls	r4, r2
 80021fa:	0007      	movs	r7, r0
 80021fc:	4090      	lsls	r0, r2
 80021fe:	46a0      	mov	r8, r4
 8002200:	4664      	mov	r4, ip
 8002202:	1e42      	subs	r2, r0, #1
 8002204:	4190      	sbcs	r0, r2
 8002206:	4662      	mov	r2, ip
 8002208:	40e7      	lsrs	r7, r4
 800220a:	4644      	mov	r4, r8
 800220c:	40d1      	lsrs	r1, r2
 800220e:	433c      	orrs	r4, r7
 8002210:	4304      	orrs	r4, r0
 8002212:	185b      	adds	r3, r3, r1
 8002214:	e6f3      	b.n	8001ffe <__aeabi_dsub+0x30e>
 8002216:	4c6f      	ldr	r4, [pc, #444]	; (80023d4 <__aeabi_dsub+0x6e4>)
 8002218:	42a2      	cmp	r2, r4
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x52e>
 800221c:	e0d5      	b.n	80023ca <__aeabi_dsub+0x6da>
 800221e:	4448      	add	r0, r9
 8002220:	185b      	adds	r3, r3, r1
 8002222:	4548      	cmp	r0, r9
 8002224:	4189      	sbcs	r1, r1
 8002226:	4249      	negs	r1, r1
 8002228:	185b      	adds	r3, r3, r1
 800222a:	07dc      	lsls	r4, r3, #31
 800222c:	0840      	lsrs	r0, r0, #1
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	4698      	mov	r8, r3
 8002232:	0016      	movs	r6, r2
 8002234:	4304      	orrs	r4, r0
 8002236:	e6cc      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 8002238:	2a00      	cmp	r2, #0
 800223a:	d000      	beq.n	800223e <__aeabi_dsub+0x54e>
 800223c:	e082      	b.n	8002344 <__aeabi_dsub+0x654>
 800223e:	000a      	movs	r2, r1
 8002240:	4302      	orrs	r2, r0
 8002242:	d140      	bne.n	80022c6 <__aeabi_dsub+0x5d6>
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	2500      	movs	r5, #0
 8002248:	031b      	lsls	r3, r3, #12
 800224a:	e713      	b.n	8002074 <__aeabi_dsub+0x384>
 800224c:	074b      	lsls	r3, r1, #29
 800224e:	08c2      	lsrs	r2, r0, #3
 8002250:	431a      	orrs	r2, r3
 8002252:	465d      	mov	r5, fp
 8002254:	08cb      	lsrs	r3, r1, #3
 8002256:	e6c5      	b.n	8001fe4 <__aeabi_dsub+0x2f4>
 8002258:	464a      	mov	r2, r9
 800225a:	1a84      	subs	r4, r0, r2
 800225c:	42a0      	cmp	r0, r4
 800225e:	4192      	sbcs	r2, r2
 8002260:	1acb      	subs	r3, r1, r3
 8002262:	4252      	negs	r2, r2
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	4698      	mov	r8, r3
 8002268:	465d      	mov	r5, fp
 800226a:	e59e      	b.n	8001daa <__aeabi_dsub+0xba>
 800226c:	464a      	mov	r2, r9
 800226e:	0759      	lsls	r1, r3, #29
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	430a      	orrs	r2, r1
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	e6f9      	b.n	800206c <__aeabi_dsub+0x37c>
 8002278:	464a      	mov	r2, r9
 800227a:	1a14      	subs	r4, r2, r0
 800227c:	45a1      	cmp	r9, r4
 800227e:	4192      	sbcs	r2, r2
 8002280:	1a5b      	subs	r3, r3, r1
 8002282:	4252      	negs	r2, r2
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	4698      	mov	r8, r3
 8002288:	2601      	movs	r6, #1
 800228a:	e586      	b.n	8001d9a <__aeabi_dsub+0xaa>
 800228c:	464a      	mov	r2, r9
 800228e:	0759      	lsls	r1, r3, #29
 8002290:	08d2      	lsrs	r2, r2, #3
 8002292:	430a      	orrs	r2, r1
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	e6a5      	b.n	8001fe4 <__aeabi_dsub+0x2f4>
 8002298:	464c      	mov	r4, r9
 800229a:	4323      	orrs	r3, r4
 800229c:	001c      	movs	r4, r3
 800229e:	1e63      	subs	r3, r4, #1
 80022a0:	419c      	sbcs	r4, r3
 80022a2:	e65b      	b.n	8001f5c <__aeabi_dsub+0x26c>
 80022a4:	4665      	mov	r5, ip
 80022a6:	001e      	movs	r6, r3
 80022a8:	3d20      	subs	r5, #32
 80022aa:	40ee      	lsrs	r6, r5
 80022ac:	2c20      	cmp	r4, #32
 80022ae:	d005      	beq.n	80022bc <__aeabi_dsub+0x5cc>
 80022b0:	2540      	movs	r5, #64	; 0x40
 80022b2:	1b2d      	subs	r5, r5, r4
 80022b4:	40ab      	lsls	r3, r5
 80022b6:	464c      	mov	r4, r9
 80022b8:	431c      	orrs	r4, r3
 80022ba:	46a2      	mov	sl, r4
 80022bc:	4654      	mov	r4, sl
 80022be:	1e63      	subs	r3, r4, #1
 80022c0:	419c      	sbcs	r4, r3
 80022c2:	4334      	orrs	r4, r6
 80022c4:	e77d      	b.n	80021c2 <__aeabi_dsub+0x4d2>
 80022c6:	074b      	lsls	r3, r1, #29
 80022c8:	08c2      	lsrs	r2, r0, #3
 80022ca:	431a      	orrs	r2, r3
 80022cc:	465d      	mov	r5, fp
 80022ce:	08cb      	lsrs	r3, r1, #3
 80022d0:	e6cc      	b.n	800206c <__aeabi_dsub+0x37c>
 80022d2:	000a      	movs	r2, r1
 80022d4:	4302      	orrs	r2, r0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x5ea>
 80022d8:	e736      	b.n	8002148 <__aeabi_dsub+0x458>
 80022da:	074b      	lsls	r3, r1, #29
 80022dc:	08c2      	lsrs	r2, r0, #3
 80022de:	431a      	orrs	r2, r3
 80022e0:	465d      	mov	r5, fp
 80022e2:	08cb      	lsrs	r3, r1, #3
 80022e4:	e681      	b.n	8001fea <__aeabi_dsub+0x2fa>
 80022e6:	464a      	mov	r2, r9
 80022e8:	1a84      	subs	r4, r0, r2
 80022ea:	42a0      	cmp	r0, r4
 80022ec:	4192      	sbcs	r2, r2
 80022ee:	1acb      	subs	r3, r1, r3
 80022f0:	4252      	negs	r2, r2
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	4698      	mov	r8, r3
 80022f6:	465d      	mov	r5, fp
 80022f8:	2601      	movs	r6, #1
 80022fa:	e54e      	b.n	8001d9a <__aeabi_dsub+0xaa>
 80022fc:	074b      	lsls	r3, r1, #29
 80022fe:	08c2      	lsrs	r2, r0, #3
 8002300:	431a      	orrs	r2, r3
 8002302:	08cb      	lsrs	r3, r1, #3
 8002304:	e6b2      	b.n	800206c <__aeabi_dsub+0x37c>
 8002306:	464a      	mov	r2, r9
 8002308:	1a14      	subs	r4, r2, r0
 800230a:	45a1      	cmp	r9, r4
 800230c:	4192      	sbcs	r2, r2
 800230e:	1a5f      	subs	r7, r3, r1
 8002310:	4252      	negs	r2, r2
 8002312:	1aba      	subs	r2, r7, r2
 8002314:	4690      	mov	r8, r2
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	d56b      	bpl.n	80023f2 <__aeabi_dsub+0x702>
 800231a:	464a      	mov	r2, r9
 800231c:	1a84      	subs	r4, r0, r2
 800231e:	42a0      	cmp	r0, r4
 8002320:	4192      	sbcs	r2, r2
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	4252      	negs	r2, r2
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	4698      	mov	r8, r3
 800232a:	465d      	mov	r5, fp
 800232c:	e564      	b.n	8001df8 <__aeabi_dsub+0x108>
 800232e:	074b      	lsls	r3, r1, #29
 8002330:	08c2      	lsrs	r2, r0, #3
 8002332:	431a      	orrs	r2, r3
 8002334:	465d      	mov	r5, fp
 8002336:	08cb      	lsrs	r3, r1, #3
 8002338:	e698      	b.n	800206c <__aeabi_dsub+0x37c>
 800233a:	074b      	lsls	r3, r1, #29
 800233c:	08c2      	lsrs	r2, r0, #3
 800233e:	431a      	orrs	r2, r3
 8002340:	08cb      	lsrs	r3, r1, #3
 8002342:	e64f      	b.n	8001fe4 <__aeabi_dsub+0x2f4>
 8002344:	000a      	movs	r2, r1
 8002346:	4302      	orrs	r2, r0
 8002348:	d090      	beq.n	800226c <__aeabi_dsub+0x57c>
 800234a:	464a      	mov	r2, r9
 800234c:	075c      	lsls	r4, r3, #29
 800234e:	08d2      	lsrs	r2, r2, #3
 8002350:	4314      	orrs	r4, r2
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	0312      	lsls	r2, r2, #12
 8002358:	4213      	tst	r3, r2
 800235a:	d008      	beq.n	800236e <__aeabi_dsub+0x67e>
 800235c:	08ce      	lsrs	r6, r1, #3
 800235e:	4216      	tst	r6, r2
 8002360:	d105      	bne.n	800236e <__aeabi_dsub+0x67e>
 8002362:	08c0      	lsrs	r0, r0, #3
 8002364:	0749      	lsls	r1, r1, #29
 8002366:	4308      	orrs	r0, r1
 8002368:	0004      	movs	r4, r0
 800236a:	465d      	mov	r5, fp
 800236c:	0033      	movs	r3, r6
 800236e:	0f61      	lsrs	r1, r4, #29
 8002370:	00e2      	lsls	r2, r4, #3
 8002372:	0749      	lsls	r1, r1, #29
 8002374:	08d2      	lsrs	r2, r2, #3
 8002376:	430a      	orrs	r2, r1
 8002378:	e678      	b.n	800206c <__aeabi_dsub+0x37c>
 800237a:	074b      	lsls	r3, r1, #29
 800237c:	08c2      	lsrs	r2, r0, #3
 800237e:	431a      	orrs	r2, r3
 8002380:	08cb      	lsrs	r3, r1, #3
 8002382:	e632      	b.n	8001fea <__aeabi_dsub+0x2fa>
 8002384:	4448      	add	r0, r9
 8002386:	185b      	adds	r3, r3, r1
 8002388:	4548      	cmp	r0, r9
 800238a:	4192      	sbcs	r2, r2
 800238c:	4698      	mov	r8, r3
 800238e:	4252      	negs	r2, r2
 8002390:	4490      	add	r8, r2
 8002392:	4643      	mov	r3, r8
 8002394:	0004      	movs	r4, r0
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	d400      	bmi.n	800239c <__aeabi_dsub+0x6ac>
 800239a:	e61a      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 800239c:	4642      	mov	r2, r8
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <__aeabi_dsub+0x6e8>)
 80023a0:	2601      	movs	r6, #1
 80023a2:	401a      	ands	r2, r3
 80023a4:	4690      	mov	r8, r2
 80023a6:	e614      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 80023a8:	4666      	mov	r6, ip
 80023aa:	001f      	movs	r7, r3
 80023ac:	3e20      	subs	r6, #32
 80023ae:	40f7      	lsrs	r7, r6
 80023b0:	2c20      	cmp	r4, #32
 80023b2:	d005      	beq.n	80023c0 <__aeabi_dsub+0x6d0>
 80023b4:	2640      	movs	r6, #64	; 0x40
 80023b6:	1b36      	subs	r6, r6, r4
 80023b8:	40b3      	lsls	r3, r6
 80023ba:	464c      	mov	r4, r9
 80023bc:	431c      	orrs	r4, r3
 80023be:	46a2      	mov	sl, r4
 80023c0:	4654      	mov	r4, sl
 80023c2:	1e63      	subs	r3, r4, #1
 80023c4:	419c      	sbcs	r4, r3
 80023c6:	433c      	orrs	r4, r7
 80023c8:	e5c8      	b.n	8001f5c <__aeabi_dsub+0x26c>
 80023ca:	0011      	movs	r1, r2
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	e532      	b.n	8001e38 <__aeabi_dsub+0x148>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	ff7fffff 	.word	0xff7fffff
 80023dc:	000007fe 	.word	0x000007fe
 80023e0:	464a      	mov	r2, r9
 80023e2:	1814      	adds	r4, r2, r0
 80023e4:	4284      	cmp	r4, r0
 80023e6:	4192      	sbcs	r2, r2
 80023e8:	185b      	adds	r3, r3, r1
 80023ea:	4698      	mov	r8, r3
 80023ec:	4252      	negs	r2, r2
 80023ee:	4490      	add	r8, r2
 80023f0:	e5e9      	b.n	8001fc6 <__aeabi_dsub+0x2d6>
 80023f2:	4642      	mov	r2, r8
 80023f4:	4322      	orrs	r2, r4
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x70a>
 80023f8:	e6a6      	b.n	8002148 <__aeabi_dsub+0x458>
 80023fa:	e5ea      	b.n	8001fd2 <__aeabi_dsub+0x2e2>
 80023fc:	074b      	lsls	r3, r1, #29
 80023fe:	08c2      	lsrs	r2, r0, #3
 8002400:	431a      	orrs	r2, r3
 8002402:	08cb      	lsrs	r3, r1, #3
 8002404:	e632      	b.n	800206c <__aeabi_dsub+0x37c>
 8002406:	2200      	movs	r2, #0
 8002408:	4901      	ldr	r1, [pc, #4]	; (8002410 <__aeabi_dsub+0x720>)
 800240a:	0013      	movs	r3, r2
 800240c:	e514      	b.n	8001e38 <__aeabi_dsub+0x148>
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	000007ff 	.word	0x000007ff

08002414 <__aeabi_dcmpun>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	0005      	movs	r5, r0
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <__aeabi_dcmpun+0x38>)
 800241a:	030c      	lsls	r4, r1, #12
 800241c:	0016      	movs	r6, r2
 800241e:	0049      	lsls	r1, r1, #1
 8002420:	031a      	lsls	r2, r3, #12
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	0b24      	lsrs	r4, r4, #12
 8002426:	0d49      	lsrs	r1, r1, #21
 8002428:	0b12      	lsrs	r2, r2, #12
 800242a:	0d5b      	lsrs	r3, r3, #21
 800242c:	4281      	cmp	r1, r0
 800242e:	d008      	beq.n	8002442 <__aeabi_dcmpun+0x2e>
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <__aeabi_dcmpun+0x38>)
 8002432:	2000      	movs	r0, #0
 8002434:	428b      	cmp	r3, r1
 8002436:	d103      	bne.n	8002440 <__aeabi_dcmpun+0x2c>
 8002438:	4332      	orrs	r2, r6
 800243a:	0010      	movs	r0, r2
 800243c:	1e42      	subs	r2, r0, #1
 800243e:	4190      	sbcs	r0, r2
 8002440:	bd70      	pop	{r4, r5, r6, pc}
 8002442:	2001      	movs	r0, #1
 8002444:	432c      	orrs	r4, r5
 8002446:	d1fb      	bne.n	8002440 <__aeabi_dcmpun+0x2c>
 8002448:	e7f2      	b.n	8002430 <__aeabi_dcmpun+0x1c>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	000007ff 	.word	0x000007ff

08002450 <__aeabi_d2iz>:
 8002450:	000a      	movs	r2, r1
 8002452:	b530      	push	{r4, r5, lr}
 8002454:	4c13      	ldr	r4, [pc, #76]	; (80024a4 <__aeabi_d2iz+0x54>)
 8002456:	0053      	lsls	r3, r2, #1
 8002458:	0309      	lsls	r1, r1, #12
 800245a:	0005      	movs	r5, r0
 800245c:	0b09      	lsrs	r1, r1, #12
 800245e:	2000      	movs	r0, #0
 8002460:	0d5b      	lsrs	r3, r3, #21
 8002462:	0fd2      	lsrs	r2, r2, #31
 8002464:	42a3      	cmp	r3, r4
 8002466:	dd04      	ble.n	8002472 <__aeabi_d2iz+0x22>
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <__aeabi_d2iz+0x58>)
 800246a:	4283      	cmp	r3, r0
 800246c:	dd02      	ble.n	8002474 <__aeabi_d2iz+0x24>
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <__aeabi_d2iz+0x5c>)
 8002470:	18d0      	adds	r0, r2, r3
 8002472:	bd30      	pop	{r4, r5, pc}
 8002474:	2080      	movs	r0, #128	; 0x80
 8002476:	0340      	lsls	r0, r0, #13
 8002478:	4301      	orrs	r1, r0
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <__aeabi_d2iz+0x60>)
 800247c:	1ac0      	subs	r0, r0, r3
 800247e:	281f      	cmp	r0, #31
 8002480:	dd08      	ble.n	8002494 <__aeabi_d2iz+0x44>
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <__aeabi_d2iz+0x64>)
 8002484:	1ac3      	subs	r3, r0, r3
 8002486:	40d9      	lsrs	r1, r3
 8002488:	000b      	movs	r3, r1
 800248a:	4258      	negs	r0, r3
 800248c:	2a00      	cmp	r2, #0
 800248e:	d1f0      	bne.n	8002472 <__aeabi_d2iz+0x22>
 8002490:	0018      	movs	r0, r3
 8002492:	e7ee      	b.n	8002472 <__aeabi_d2iz+0x22>
 8002494:	4c08      	ldr	r4, [pc, #32]	; (80024b8 <__aeabi_d2iz+0x68>)
 8002496:	40c5      	lsrs	r5, r0
 8002498:	46a4      	mov	ip, r4
 800249a:	4463      	add	r3, ip
 800249c:	4099      	lsls	r1, r3
 800249e:	000b      	movs	r3, r1
 80024a0:	432b      	orrs	r3, r5
 80024a2:	e7f2      	b.n	800248a <__aeabi_d2iz+0x3a>
 80024a4:	000003fe 	.word	0x000003fe
 80024a8:	0000041d 	.word	0x0000041d
 80024ac:	7fffffff 	.word	0x7fffffff
 80024b0:	00000433 	.word	0x00000433
 80024b4:	00000413 	.word	0x00000413
 80024b8:	fffffbed 	.word	0xfffffbed

080024bc <__aeabi_i2d>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	2800      	cmp	r0, #0
 80024c0:	d016      	beq.n	80024f0 <__aeabi_i2d+0x34>
 80024c2:	17c3      	asrs	r3, r0, #31
 80024c4:	18c5      	adds	r5, r0, r3
 80024c6:	405d      	eors	r5, r3
 80024c8:	0fc4      	lsrs	r4, r0, #31
 80024ca:	0028      	movs	r0, r5
 80024cc:	f000 f894 	bl	80025f8 <__clzsi2>
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <__aeabi_i2d+0x5c>)
 80024d2:	1a12      	subs	r2, r2, r0
 80024d4:	280a      	cmp	r0, #10
 80024d6:	dc16      	bgt.n	8002506 <__aeabi_i2d+0x4a>
 80024d8:	0003      	movs	r3, r0
 80024da:	002e      	movs	r6, r5
 80024dc:	3315      	adds	r3, #21
 80024de:	409e      	lsls	r6, r3
 80024e0:	230b      	movs	r3, #11
 80024e2:	1a18      	subs	r0, r3, r0
 80024e4:	40c5      	lsrs	r5, r0
 80024e6:	0553      	lsls	r3, r2, #21
 80024e8:	032d      	lsls	r5, r5, #12
 80024ea:	0b2d      	lsrs	r5, r5, #12
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	e003      	b.n	80024f8 <__aeabi_i2d+0x3c>
 80024f0:	2400      	movs	r4, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	2500      	movs	r5, #0
 80024f6:	2600      	movs	r6, #0
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	432b      	orrs	r3, r5
 80024fc:	07e4      	lsls	r4, r4, #31
 80024fe:	4323      	orrs	r3, r4
 8002500:	0030      	movs	r0, r6
 8002502:	0019      	movs	r1, r3
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	380b      	subs	r0, #11
 8002508:	4085      	lsls	r5, r0
 800250a:	0553      	lsls	r3, r2, #21
 800250c:	032d      	lsls	r5, r5, #12
 800250e:	2600      	movs	r6, #0
 8002510:	0b2d      	lsrs	r5, r5, #12
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	e7f0      	b.n	80024f8 <__aeabi_i2d+0x3c>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	0000041e 	.word	0x0000041e

0800251c <__aeabi_ui2d>:
 800251c:	b510      	push	{r4, lr}
 800251e:	1e04      	subs	r4, r0, #0
 8002520:	d010      	beq.n	8002544 <__aeabi_ui2d+0x28>
 8002522:	f000 f869 	bl	80025f8 <__clzsi2>
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <__aeabi_ui2d+0x48>)
 8002528:	1a1b      	subs	r3, r3, r0
 800252a:	280a      	cmp	r0, #10
 800252c:	dc11      	bgt.n	8002552 <__aeabi_ui2d+0x36>
 800252e:	220b      	movs	r2, #11
 8002530:	0021      	movs	r1, r4
 8002532:	1a12      	subs	r2, r2, r0
 8002534:	40d1      	lsrs	r1, r2
 8002536:	3015      	adds	r0, #21
 8002538:	030a      	lsls	r2, r1, #12
 800253a:	055b      	lsls	r3, r3, #21
 800253c:	4084      	lsls	r4, r0
 800253e:	0b12      	lsrs	r2, r2, #12
 8002540:	0d5b      	lsrs	r3, r3, #21
 8002542:	e001      	b.n	8002548 <__aeabi_ui2d+0x2c>
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	4313      	orrs	r3, r2
 800254c:	0020      	movs	r0, r4
 800254e:	0019      	movs	r1, r3
 8002550:	bd10      	pop	{r4, pc}
 8002552:	0022      	movs	r2, r4
 8002554:	380b      	subs	r0, #11
 8002556:	4082      	lsls	r2, r0
 8002558:	055b      	lsls	r3, r3, #21
 800255a:	0312      	lsls	r2, r2, #12
 800255c:	2400      	movs	r4, #0
 800255e:	0b12      	lsrs	r2, r2, #12
 8002560:	0d5b      	lsrs	r3, r3, #21
 8002562:	e7f1      	b.n	8002548 <__aeabi_ui2d+0x2c>
 8002564:	0000041e 	.word	0x0000041e

08002568 <__aeabi_f2d>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	0043      	lsls	r3, r0, #1
 800256c:	0246      	lsls	r6, r0, #9
 800256e:	0fc4      	lsrs	r4, r0, #31
 8002570:	20fe      	movs	r0, #254	; 0xfe
 8002572:	0e1b      	lsrs	r3, r3, #24
 8002574:	1c59      	adds	r1, r3, #1
 8002576:	0a75      	lsrs	r5, r6, #9
 8002578:	4208      	tst	r0, r1
 800257a:	d00c      	beq.n	8002596 <__aeabi_f2d+0x2e>
 800257c:	22e0      	movs	r2, #224	; 0xe0
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4694      	mov	ip, r2
 8002582:	076d      	lsls	r5, r5, #29
 8002584:	0b36      	lsrs	r6, r6, #12
 8002586:	4463      	add	r3, ip
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	4333      	orrs	r3, r6
 800258c:	07e4      	lsls	r4, r4, #31
 800258e:	4323      	orrs	r3, r4
 8002590:	0028      	movs	r0, r5
 8002592:	0019      	movs	r1, r3
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	2b00      	cmp	r3, #0
 8002598:	d114      	bne.n	80025c4 <__aeabi_f2d+0x5c>
 800259a:	2d00      	cmp	r5, #0
 800259c:	d01b      	beq.n	80025d6 <__aeabi_f2d+0x6e>
 800259e:	0028      	movs	r0, r5
 80025a0:	f000 f82a 	bl	80025f8 <__clzsi2>
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dc1c      	bgt.n	80025e2 <__aeabi_f2d+0x7a>
 80025a8:	230b      	movs	r3, #11
 80025aa:	002a      	movs	r2, r5
 80025ac:	1a1b      	subs	r3, r3, r0
 80025ae:	40da      	lsrs	r2, r3
 80025b0:	0003      	movs	r3, r0
 80025b2:	3315      	adds	r3, #21
 80025b4:	409d      	lsls	r5, r3
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <__aeabi_f2d+0x88>)
 80025b8:	0312      	lsls	r2, r2, #12
 80025ba:	1a1b      	subs	r3, r3, r0
 80025bc:	055b      	lsls	r3, r3, #21
 80025be:	0b16      	lsrs	r6, r2, #12
 80025c0:	0d5b      	lsrs	r3, r3, #21
 80025c2:	e7e1      	b.n	8002588 <__aeabi_f2d+0x20>
 80025c4:	2d00      	cmp	r5, #0
 80025c6:	d009      	beq.n	80025dc <__aeabi_f2d+0x74>
 80025c8:	0b32      	lsrs	r2, r6, #12
 80025ca:	2680      	movs	r6, #128	; 0x80
 80025cc:	0336      	lsls	r6, r6, #12
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <__aeabi_f2d+0x8c>)
 80025d0:	076d      	lsls	r5, r5, #29
 80025d2:	4316      	orrs	r6, r2
 80025d4:	e7d8      	b.n	8002588 <__aeabi_f2d+0x20>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2600      	movs	r6, #0
 80025da:	e7d5      	b.n	8002588 <__aeabi_f2d+0x20>
 80025dc:	2600      	movs	r6, #0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <__aeabi_f2d+0x8c>)
 80025e0:	e7d2      	b.n	8002588 <__aeabi_f2d+0x20>
 80025e2:	0003      	movs	r3, r0
 80025e4:	002a      	movs	r2, r5
 80025e6:	3b0b      	subs	r3, #11
 80025e8:	409a      	lsls	r2, r3
 80025ea:	2500      	movs	r5, #0
 80025ec:	e7e3      	b.n	80025b6 <__aeabi_f2d+0x4e>
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	00000389 	.word	0x00000389
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__clzsi2>:
 80025f8:	211c      	movs	r1, #28
 80025fa:	2301      	movs	r3, #1
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	4298      	cmp	r0, r3
 8002600:	d301      	bcc.n	8002606 <__clzsi2+0xe>
 8002602:	0c00      	lsrs	r0, r0, #16
 8002604:	3910      	subs	r1, #16
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	4298      	cmp	r0, r3
 800260a:	d301      	bcc.n	8002610 <__clzsi2+0x18>
 800260c:	0a00      	lsrs	r0, r0, #8
 800260e:	3908      	subs	r1, #8
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	4298      	cmp	r0, r3
 8002614:	d301      	bcc.n	800261a <__clzsi2+0x22>
 8002616:	0900      	lsrs	r0, r0, #4
 8002618:	3904      	subs	r1, #4
 800261a:	a202      	add	r2, pc, #8	; (adr r2, 8002624 <__clzsi2+0x2c>)
 800261c:	5c10      	ldrb	r0, [r2, r0]
 800261e:	1840      	adds	r0, r0, r1
 8002620:	4770      	bx	lr
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	02020304 	.word	0x02020304
 8002628:	01010101 	.word	0x01010101
	...

08002634 <pbSelection>:
int count1 = 0, count2 = 0, fSpd;
int fSpd, fan = 65535;
int32_t CH1_DC = 0;


int pbSelection(){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(pButton_GPIO_Port, pButton_Pin) == LOW){
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <pbSelection+0x3c>)
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	0018      	movs	r0, r3
 800263e:	f002 f96d 	bl	800491c <HAL_GPIO_ReadPin>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d10e      	bne.n	8002664 <pbSelection+0x30>
		HAL_Delay(250);
 8002646:	20fa      	movs	r0, #250	; 0xfa
 8002648:	f001 feee 	bl	8004428 <HAL_Delay>
		selector++;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <pbSelection+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <pbSelection+0x40>)
 8002654:	601a      	str	r2, [r3, #0]
		if (selector > 2){
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <pbSelection+0x40>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	dd02      	ble.n	8002664 <pbSelection+0x30>
			selector = 0;
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <pbSelection+0x40>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
		}
	}
	return selector;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <pbSelection+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	48000400 	.word	0x48000400
 8002674:	20000a90 	.word	0x20000a90

08002678 <countGain>:

int countGain(TIM_HandleTypeDef *htim){
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	static unsigned long lastInterruptTime = 0;
	unsigned long interruptTime = HAL_GetTick();
 8002680:	f001 fec8 	bl	8004414 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]

	if (interruptTime - lastInterruptTime > 10){
 8002688:	4b34      	ldr	r3, [pc, #208]	; (800275c <countGain+0xe4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b0a      	cmp	r3, #10
 8002692:	d91c      	bls.n	80026ce <countGain+0x56>
		count1 = __HAL_TIM_GET_COUNTER(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	001a      	movs	r2, r3
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <countGain+0xe8>)
 800269e:	601a      	str	r2, [r3, #0]
		if (count1 > count2){
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <countGain+0xe8>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <countGain+0xec>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	dd05      	ble.n	80026b8 <countGain+0x40>

			counterGain++;
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <countGain+0xf0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <countGain+0xf0>)
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e00a      	b.n	80026ce <countGain+0x56>
		}
		else if (count1 < count2){
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <countGain+0xe8>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <countGain+0xec>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	da04      	bge.n	80026ce <countGain+0x56>
			counterGain--;
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <countGain+0xf0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <countGain+0xf0>)
 80026cc:	601a      	str	r2, [r3, #0]
		}
	}
	if (counterGain >= 10){
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <countGain+0xf0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	dd03      	ble.n	80026de <countGain+0x66>
		counterGain = 10;
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <countGain+0xf0>)
 80026d8:	220a      	movs	r2, #10
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e006      	b.n	80026ec <countGain+0x74>
	}
	else if (counterGain <= 2){
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <countGain+0xf0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	dc02      	bgt.n	80026ec <countGain+0x74>
		counterGain = 2;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <countGain+0xf0>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
	}

	cGain = counterGain / 2;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <countGain+0xf0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da00      	bge.n	80026f6 <countGain+0x7e>
 80026f4:	3301      	adds	r3, #1
 80026f6:	105b      	asrs	r3, r3, #1
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <countGain+0xf4>)
 80026fc:	601a      	str	r2, [r3, #0]
	//switch
	switch(cGain){
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <countGain+0xf4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d014      	beq.n	8002730 <countGain+0xb8>
 8002706:	dc17      	bgt.n	8002738 <countGain+0xc0>
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00d      	beq.n	8002728 <countGain+0xb0>
 800270c:	dc14      	bgt.n	8002738 <countGain+0xc0>
 800270e:	2b02      	cmp	r3, #2
 8002710:	d002      	beq.n	8002718 <countGain+0xa0>
 8002712:	2b03      	cmp	r3, #3
 8002714:	d004      	beq.n	8002720 <countGain+0xa8>
 8002716:	e00f      	b.n	8002738 <countGain+0xc0>
		case 2:
			cGain = 3;
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <countGain+0xf4>)
 800271a:	2203      	movs	r2, #3
 800271c:	601a      	str	r2, [r3, #0]
			break;
 800271e:	e00f      	b.n	8002740 <countGain+0xc8>
		case 3:
			cGain = 5;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <countGain+0xf4>)
 8002722:	2205      	movs	r2, #5
 8002724:	601a      	str	r2, [r3, #0]
			break;
 8002726:	e00b      	b.n	8002740 <countGain+0xc8>
		case 4:
			cGain = 7;
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <countGain+0xf4>)
 800272a:	2207      	movs	r2, #7
 800272c:	601a      	str	r2, [r3, #0]
			break;
 800272e:	e007      	b.n	8002740 <countGain+0xc8>
		case 5:
			cGain = 11;
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <countGain+0xf4>)
 8002732:	220b      	movs	r2, #11
 8002734:	601a      	str	r2, [r3, #0]
			break;
 8002736:	e003      	b.n	8002740 <countGain+0xc8>
		default:
			cGain = 1;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <countGain+0xf4>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
			break;
 800273e:	46c0      	nop			; (mov r8, r8)
		}
	count2 = count1;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <countGain+0xe8>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <countGain+0xec>)
 8002746:	601a      	str	r2, [r3, #0]
	lastInterruptTime = interruptTime;
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <countGain+0xe4>)
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	601a      	str	r2, [r3, #0]
	return cGain;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <countGain+0xf4>)
 8002750:	681b      	ldr	r3, [r3, #0]
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	20000658 	.word	0x20000658
 8002760:	20000650 	.word	0x20000650
 8002764:	20000654 	.word	0x20000654
 8002768:	20000a80 	.word	0x20000a80
 800276c:	20000ac0 	.word	0x20000ac0

08002770 <countImpedance>:

float countImpedance(TIM_HandleTypeDef *htim){
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

	static unsigned long lastInterruptTime = 0;
	unsigned long interruptTime = HAL_GetTick();
 8002778:	f001 fe4c 	bl	8004414 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]

	if (interruptTime - lastInterruptTime > 10){
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <countImpedance+0xc8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b0a      	cmp	r3, #10
 800278a:	d92b      	bls.n	80027e4 <countImpedance+0x74>
		count1 = __HAL_TIM_GET_COUNTER(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	001a      	movs	r2, r3
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <countImpedance+0xcc>)
 8002796:	601a      	str	r2, [r3, #0]
		if (count1 > count2){
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <countImpedance+0xcc>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <countImpedance+0xd0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dd05      	ble.n	80027b0 <countImpedance+0x40>
			counterImp++;
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <countImpedance+0xd4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <countImpedance+0xd4>)
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00a      	b.n	80027c6 <countImpedance+0x56>
		}
		else if (count1 < count2){
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <countImpedance+0xcc>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <countImpedance+0xd0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	da04      	bge.n	80027c6 <countImpedance+0x56>
			counterImp--;
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <countImpedance+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <countImpedance+0xd4>)
 80027c4:	601a      	str	r2, [r3, #0]
		}
		if (counterImp > 4){
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <countImpedance+0xd4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	dd03      	ble.n	80027d6 <countImpedance+0x66>
			counterImp = 4;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <countImpedance+0xd4>)
 80027d0:	2204      	movs	r2, #4
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e006      	b.n	80027e4 <countImpedance+0x74>
		}
		else if (counterImp <= 0){
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <countImpedance+0xd4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	dc02      	bgt.n	80027e4 <countImpedance+0x74>
			counterImp = 0;
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <countImpedance+0xd4>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
		}
	}

	i = counterImp / 2;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <countImpedance+0xd4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <countImpedance+0x7e>
 80027ec:	3301      	adds	r3, #1
 80027ee:	105b      	asrs	r3, r3, #1
 80027f0:	001a      	movs	r2, r3
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <countImpedance+0xd8>)
 80027f4:	601a      	str	r2, [r3, #0]
	cImpedance = (float)i / 2;
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <countImpedance+0xd8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fe f856 	bl	80008ac <__aeabi_i2f>
 8002800:	1c03      	adds	r3, r0, #0
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	05c9      	lsls	r1, r1, #23
 8002806:	1c18      	adds	r0, r3, #0
 8002808:	f7fd fe86 	bl	8000518 <__aeabi_fdiv>
 800280c:	1c03      	adds	r3, r0, #0
 800280e:	1c1a      	adds	r2, r3, #0
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <countImpedance+0xdc>)
 8002812:	601a      	str	r2, [r3, #0]
	aLastState = aState;
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <countImpedance+0xe0>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <countImpedance+0xe4>)
 800281a:	601a      	str	r2, [r3, #0]
	count2 = count1;
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <countImpedance+0xcc>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <countImpedance+0xd0>)
 8002822:	601a      	str	r2, [r3, #0]
	lastInterruptTime = interruptTime;
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <countImpedance+0xc8>)
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]
	return cImpedance;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <countImpedance+0xdc>)
 800282c:	681b      	ldr	r3, [r3, #0]
}
 800282e:	1c18      	adds	r0, r3, #0
 8002830:	46bd      	mov	sp, r7
 8002832:	b004      	add	sp, #16
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	2000065c 	.word	0x2000065c
 800283c:	20000650 	.word	0x20000650
 8002840:	20000654 	.word	0x20000654
 8002844:	20000aa4 	.word	0x20000aa4
 8002848:	20000a8c 	.word	0x20000a8c
 800284c:	20000abc 	.word	0x20000abc
 8002850:	20000aa0 	.word	0x20000aa0
 8002854:	20000a84 	.word	0x20000a84

08002858 <print>:

void print(char gainS[2], char impS[10], char relayStatusS[5], char stabS[2], char fanSpdS[3], int selection, char temp_cS[3]){
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]

	  ssd1306_Fill(Black);
 8002866:	2000      	movs	r0, #0
 8002868:	f000 fef2 	bl	8003650 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 800286c:	2100      	movs	r1, #0
 800286e:	2000      	movs	r0, #0
 8002870:	f001 f866 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Gain: ", Font_7x10, White);
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <print+0x17c>)
 8002876:	4858      	ldr	r0, [pc, #352]	; (80029d8 <print+0x180>)
 8002878:	2301      	movs	r3, #1
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	6852      	ldr	r2, [r2, #4]
 800287e:	f001 f835 	bl	80038ec <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 10);
 8002882:	210a      	movs	r1, #10
 8002884:	2000      	movs	r0, #0
 8002886:	f001 f85b 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Impedance: ", Font_7x10, White);
 800288a:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <print+0x17c>)
 800288c:	4853      	ldr	r0, [pc, #332]	; (80029dc <print+0x184>)
 800288e:	2301      	movs	r3, #1
 8002890:	6811      	ldr	r1, [r2, #0]
 8002892:	6852      	ldr	r2, [r2, #4]
 8002894:	f001 f82a 	bl	80038ec <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 20);
 8002898:	2114      	movs	r1, #20
 800289a:	2000      	movs	r0, #0
 800289c:	f001 f850 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Stab:", Font_7x10, White);
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <print+0x17c>)
 80028a2:	484f      	ldr	r0, [pc, #316]	; (80029e0 <print+0x188>)
 80028a4:	2301      	movs	r3, #1
 80028a6:	6811      	ldr	r1, [r2, #0]
 80028a8:	6852      	ldr	r2, [r2, #4]
 80028aa:	f001 f81f 	bl	80038ec <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 30);
 80028ae:	211e      	movs	r1, #30
 80028b0:	2000      	movs	r0, #0
 80028b2:	f001 f845 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Temp: ", Font_7x10, White);
 80028b6:	4a47      	ldr	r2, [pc, #284]	; (80029d4 <print+0x17c>)
 80028b8:	484a      	ldr	r0, [pc, #296]	; (80029e4 <print+0x18c>)
 80028ba:	2301      	movs	r3, #1
 80028bc:	6811      	ldr	r1, [r2, #0]
 80028be:	6852      	ldr	r2, [r2, #4]
 80028c0:	f001 f814 	bl	80038ec <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 40);
 80028c4:	2128      	movs	r1, #40	; 0x28
 80028c6:	2000      	movs	r0, #0
 80028c8:	f001 f83a 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Fan spd: ", Font_7x10, White);
 80028cc:	4a41      	ldr	r2, [pc, #260]	; (80029d4 <print+0x17c>)
 80028ce:	4846      	ldr	r0, [pc, #280]	; (80029e8 <print+0x190>)
 80028d0:	2301      	movs	r3, #1
 80028d2:	6811      	ldr	r1, [r2, #0]
 80028d4:	6852      	ldr	r2, [r2, #4]
 80028d6:	f001 f809 	bl	80038ec <ssd1306_WriteString>

	  ssd1306_SetCursor(0, 50);
 80028da:	2132      	movs	r1, #50	; 0x32
 80028dc:	2000      	movs	r0, #0
 80028de:	f001 f82f 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString("Relay:", Font_7x10, White);
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <print+0x17c>)
 80028e4:	4841      	ldr	r0, [pc, #260]	; (80029ec <print+0x194>)
 80028e6:	2301      	movs	r3, #1
 80028e8:	6811      	ldr	r1, [r2, #0]
 80028ea:	6852      	ldr	r2, [r2, #4]
 80028ec:	f000 fffe 	bl	80038ec <ssd1306_WriteString>

	  //Gain
	  ssd1306_SetCursor(100, 0);
 80028f0:	2100      	movs	r1, #0
 80028f2:	2064      	movs	r0, #100	; 0x64
 80028f4:	f001 f824 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(gainS, Font_7x10, White);
 80028f8:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <print+0x17c>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	2301      	movs	r3, #1
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	f000 fff3 	bl	80038ec <ssd1306_WriteString>

	  //Impedance
	  ssd1306_SetCursor(100, 10);
 8002906:	210a      	movs	r1, #10
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	f001 f819 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(impS, Font_7x10, White);
 800290e:	4a31      	ldr	r2, [pc, #196]	; (80029d4 <print+0x17c>)
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	2301      	movs	r3, #1
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	f000 ffe8 	bl	80038ec <ssd1306_WriteString>

	  //Stabilization
	  ssd1306_SetCursor(100, 20);
 800291c:	2114      	movs	r1, #20
 800291e:	2064      	movs	r0, #100	; 0x64
 8002920:	f001 f80e 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(stabS, Font_7x10, White);
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <print+0x17c>)
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	6811      	ldr	r1, [r2, #0]
 800292c:	6852      	ldr	r2, [r2, #4]
 800292e:	f000 ffdd 	bl	80038ec <ssd1306_WriteString>

	  //Temperature
	  ssd1306_SetCursor(100, 30);
 8002932:	211e      	movs	r1, #30
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	f001 f803 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(temp_cS, Font_7x10, White);
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <print+0x17c>)
 800293c:	6a38      	ldr	r0, [r7, #32]
 800293e:	2301      	movs	r3, #1
 8002940:	6811      	ldr	r1, [r2, #0]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	f000 ffd2 	bl	80038ec <ssd1306_WriteString>

	  // Fan speed
	  ssd1306_SetCursor(100, 40);
 8002948:	2128      	movs	r1, #40	; 0x28
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f000 fff8 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(fanSpdS, Font_7x10, White);
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <print+0x17c>)
 8002952:	69b8      	ldr	r0, [r7, #24]
 8002954:	2301      	movs	r3, #1
 8002956:	6811      	ldr	r1, [r2, #0]
 8002958:	6852      	ldr	r2, [r2, #4]
 800295a:	f000 ffc7 	bl	80038ec <ssd1306_WriteString>

	  // Relay status
	  ssd1306_SetCursor(100, 50);
 800295e:	2132      	movs	r1, #50	; 0x32
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	f000 ffed 	bl	8003940 <ssd1306_SetCursor>
	  ssd1306_WriteString(relayStatusS, Font_7x10, White);
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <print+0x17c>)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	2301      	movs	r3, #1
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	6852      	ldr	r2, [r2, #4]
 8002970:	f000 ffbc 	bl	80038ec <ssd1306_WriteString>

	  //Arrow
	  if (selection == 0){
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10b      	bne.n	8002992 <print+0x13a>
		  ssd1306_SetCursor(85, 0);
 800297a:	2100      	movs	r1, #0
 800297c:	2055      	movs	r0, #85	; 0x55
 800297e:	f000 ffdf 	bl	8003940 <ssd1306_SetCursor>
		  ssd1306_WriteString("->", Font_7x10, White);
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <print+0x17c>)
 8002984:	481a      	ldr	r0, [pc, #104]	; (80029f0 <print+0x198>)
 8002986:	2301      	movs	r3, #1
 8002988:	6811      	ldr	r1, [r2, #0]
 800298a:	6852      	ldr	r2, [r2, #4]
 800298c:	f000 ffae 	bl	80038ec <ssd1306_WriteString>
 8002990:	e019      	b.n	80029c6 <print+0x16e>
	  }
	  else if (selection == 1){
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d10b      	bne.n	80029b0 <print+0x158>
		  ssd1306_SetCursor(85, 10);
 8002998:	210a      	movs	r1, #10
 800299a:	2055      	movs	r0, #85	; 0x55
 800299c:	f000 ffd0 	bl	8003940 <ssd1306_SetCursor>
		  ssd1306_WriteString("->", Font_7x10, White);
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <print+0x17c>)
 80029a2:	4813      	ldr	r0, [pc, #76]	; (80029f0 <print+0x198>)
 80029a4:	2301      	movs	r3, #1
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	f000 ff9f 	bl	80038ec <ssd1306_WriteString>
 80029ae:	e00a      	b.n	80029c6 <print+0x16e>
	  }
	  else{
		  ssd1306_SetCursor(85, 20);
 80029b0:	2114      	movs	r1, #20
 80029b2:	2055      	movs	r0, #85	; 0x55
 80029b4:	f000 ffc4 	bl	8003940 <ssd1306_SetCursor>
		  ssd1306_WriteString("->", Font_7x10, White);
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <print+0x17c>)
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <print+0x198>)
 80029bc:	2301      	movs	r3, #1
 80029be:	6811      	ldr	r1, [r2, #0]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	f000 ff93 	bl	80038ec <ssd1306_WriteString>
	  }

	  //Update screen
	  ssd1306_UpdateScreen();
 80029c6:	f000 fe67 	bl	8003698 <ssd1306_UpdateScreen>
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	20000440 	.word	0x20000440
 80029d8:	0800ae08 	.word	0x0800ae08
 80029dc:	0800ae10 	.word	0x0800ae10
 80029e0:	0800ae1c 	.word	0x0800ae1c
 80029e4:	0800ae24 	.word	0x0800ae24
 80029e8:	0800ae2c 	.word	0x0800ae2c
 80029ec:	0800ae38 	.word	0x0800ae38
 80029f0:	0800ae40 	.word	0x0800ae40

080029f4 <amplify>:

int amplify(int gain){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	// Relay for 1x or higher amplification
	switch (gain){
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b07      	cmp	r3, #7
 8002a00:	d100      	bne.n	8002a04 <amplify+0x10>
 8002a02:	e07a      	b.n	8002afa <amplify+0x106>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	dd00      	ble.n	8002a0c <amplify+0x18>
 8002a0a:	e099      	b.n	8002b40 <amplify+0x14c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d050      	beq.n	8002ab4 <amplify+0xc0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	dd00      	ble.n	8002a1a <amplify+0x26>
 8002a18:	e092      	b.n	8002b40 <amplify+0x14c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d003      	beq.n	8002a28 <amplify+0x34>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d023      	beq.n	8002a6e <amplify+0x7a>
 8002a26:	e08b      	b.n	8002b40 <amplify+0x14c>
		case 1:
			relay = 1;
 8002a28:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <amplify+0x1a0>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(opRelay_GPIO_Port, opRelay_Pin, GPIO_PIN_SET);
 8002a2e:	2390      	movs	r3, #144	; 0x90
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	2201      	movs	r2, #1
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0018      	movs	r0, r3
 8002a38:	f001 ff8d 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux1_GPIO_Port, mux1_Pin, GPIO_PIN_RESET);
 8002a3c:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <amplify+0x1a4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2110      	movs	r1, #16
 8002a42:	0018      	movs	r0, r3
 8002a44:	f001 ff87 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux2_GPIO_Port, mux2_Pin, GPIO_PIN_RESET);
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <amplify+0x1a4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 ff81 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux3_GPIO_Port, mux3_Pin, GPIO_PIN_RESET);
 8002a54:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <amplify+0x1a8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 ff7b 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux4_GPIO_Port, mux4_Pin, GPIO_PIN_RESET);
 8002a60:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <amplify+0x1a8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	2102      	movs	r1, #2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 ff75 	bl	8004956 <HAL_GPIO_WritePin>
			break;
 8002a6c:	e08b      	b.n	8002b86 <amplify+0x192>
		case 3:
			relay = 3;
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <amplify+0x1a0>)
 8002a70:	2203      	movs	r2, #3
 8002a72:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(opRelay_GPIO_Port, opRelay_Pin, GPIO_PIN_RESET);
 8002a74:	2390      	movs	r3, #144	; 0x90
 8002a76:	05db      	lsls	r3, r3, #23
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f001 ff6a 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux1_GPIO_Port, mux1_Pin, GPIO_PIN_SET);
 8002a82:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <amplify+0x1a4>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	2110      	movs	r1, #16
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f001 ff64 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux2_GPIO_Port, mux2_Pin, GPIO_PIN_RESET);
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <amplify+0x1a4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	2120      	movs	r1, #32
 8002a94:	0018      	movs	r0, r3
 8002a96:	f001 ff5e 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux3_GPIO_Port, mux3_Pin, GPIO_PIN_RESET);
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <amplify+0x1a8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f001 ff58 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux4_GPIO_Port, mux4_Pin, GPIO_PIN_RESET);
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <amplify+0x1a8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2102      	movs	r1, #2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f001 ff52 	bl	8004956 <HAL_GPIO_WritePin>
			break;
 8002ab2:	e068      	b.n	8002b86 <amplify+0x192>
		case 5:
			relay = 5;
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <amplify+0x1a0>)
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(opRelay_GPIO_Port, opRelay_Pin, GPIO_PIN_RESET);
 8002aba:	2390      	movs	r3, #144	; 0x90
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f001 ff47 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux1_GPIO_Port, mux1_Pin, GPIO_PIN_RESET);
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <amplify+0x1a4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	2110      	movs	r1, #16
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f001 ff41 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux2_GPIO_Port, mux2_Pin, GPIO_PIN_SET);
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <amplify+0x1a4>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2120      	movs	r1, #32
 8002ada:	0018      	movs	r0, r3
 8002adc:	f001 ff3b 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux3_GPIO_Port, mux3_Pin, GPIO_PIN_RESET);
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <amplify+0x1a8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 ff35 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux4_GPIO_Port, mux4_Pin, GPIO_PIN_RESET);
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <amplify+0x1a8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	2102      	movs	r1, #2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 ff2f 	bl	8004956 <HAL_GPIO_WritePin>
			break;
 8002af8:	e045      	b.n	8002b86 <amplify+0x192>
		case 7:
			relay = 7;
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <amplify+0x1a0>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(opRelay_GPIO_Port, opRelay_Pin, GPIO_PIN_RESET);
 8002b00:	2390      	movs	r3, #144	; 0x90
 8002b02:	05db      	lsls	r3, r3, #23
 8002b04:	2200      	movs	r2, #0
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f001 ff24 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux1_GPIO_Port, mux1_Pin, GPIO_PIN_RESET);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <amplify+0x1a4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	2110      	movs	r1, #16
 8002b14:	0018      	movs	r0, r3
 8002b16:	f001 ff1e 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux2_GPIO_Port, mux2_Pin, GPIO_PIN_RESET);
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <amplify+0x1a4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2120      	movs	r1, #32
 8002b20:	0018      	movs	r0, r3
 8002b22:	f001 ff18 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux3_GPIO_Port, mux3_Pin, GPIO_PIN_SET);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <amplify+0x1a8>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 ff12 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux4_GPIO_Port, mux4_Pin, GPIO_PIN_RESET);
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <amplify+0x1a8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	2102      	movs	r1, #2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f001 ff0c 	bl	8004956 <HAL_GPIO_WritePin>
			break;
 8002b3e:	e022      	b.n	8002b86 <amplify+0x192>
		default:
			relay = 11;
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <amplify+0x1a0>)
 8002b42:	220b      	movs	r2, #11
 8002b44:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(opRelay_GPIO_Port, opRelay_Pin, GPIO_PIN_RESET);
 8002b46:	2390      	movs	r3, #144	; 0x90
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 ff01 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux1_GPIO_Port, mux1_Pin, GPIO_PIN_RESET);
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <amplify+0x1a4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	2110      	movs	r1, #16
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 fefb 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux2_GPIO_Port, mux2_Pin, GPIO_PIN_RESET);
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <amplify+0x1a4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	2120      	movs	r1, #32
 8002b66:	0018      	movs	r0, r3
 8002b68:	f001 fef5 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux3_GPIO_Port, mux3_Pin, GPIO_PIN_RESET);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <amplify+0x1a8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	0018      	movs	r0, r3
 8002b74:	f001 feef 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mux4_GPIO_Port, mux4_Pin, GPIO_PIN_SET);
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <amplify+0x1a8>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f001 fee9 	bl	8004956 <HAL_GPIO_WritePin>
			break;
 8002b84:	46c0      	nop			; (mov r8, r8)
	}
	return relay;
 8002b86:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <amplify+0x1a0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	20000a88 	.word	0x20000a88
 8002b98:	48000800 	.word	0x48000800
 8002b9c:	48000400 	.word	0x48000400

08002ba0 <outImp>:

void outImp(float impedance){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	if (impedance == 1){
 8002ba8:	21fe      	movs	r1, #254	; 0xfe
 8002baa:	0589      	lsls	r1, r1, #22
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fd fc85 	bl	80004bc <__aeabi_fcmpeq>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d00e      	beq.n	8002bd4 <outImp+0x34>
			HAL_GPIO_WritePin(outImp1_GPIO_Port, outImp1_Pin, GPIO_PIN_SET);
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	481a      	ldr	r0, [pc, #104]	; (8002c24 <outImp+0x84>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	f001 fec9 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(outImp2_GPIO_Port, outImp2_Pin, GPIO_PIN_RESET);
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4816      	ldr	r0, [pc, #88]	; (8002c24 <outImp+0x84>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	0019      	movs	r1, r3
 8002bce:	f001 fec2 	bl	8004956 <HAL_GPIO_WritePin>
	}
	else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(outImp2_GPIO_Port, outImp2_Pin, GPIO_PIN_RESET);
	}
}
 8002bd2:	e023      	b.n	8002c1c <outImp+0x7c>
	else if (impedance == 0.5){
 8002bd4:	21fc      	movs	r1, #252	; 0xfc
 8002bd6:	0589      	lsls	r1, r1, #22
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fd fc6f 	bl	80004bc <__aeabi_fcmpeq>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d00e      	beq.n	8002c00 <outImp+0x60>
			HAL_GPIO_WritePin(outImp1_GPIO_Port, outImp1_Pin, GPIO_PIN_RESET);
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	480f      	ldr	r0, [pc, #60]	; (8002c24 <outImp+0x84>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	0019      	movs	r1, r3
 8002bec:	f001 feb3 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(outImp2_GPIO_Port, outImp2_Pin, GPIO_PIN_SET);
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	480b      	ldr	r0, [pc, #44]	; (8002c24 <outImp+0x84>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	f001 feac 	bl	8004956 <HAL_GPIO_WritePin>
}
 8002bfe:	e00d      	b.n	8002c1c <outImp+0x7c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c00:	2390      	movs	r3, #144	; 0x90
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	2200      	movs	r2, #0
 8002c06:	2120      	movs	r1, #32
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f001 fea4 	bl	8004956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(outImp2_GPIO_Port, outImp2_Pin, GPIO_PIN_RESET);
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4804      	ldr	r0, [pc, #16]	; (8002c24 <outImp+0x84>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	0019      	movs	r1, r3
 8002c18:	f001 fe9d 	bl	8004956 <HAL_GPIO_WritePin>
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	48000400 	.word	0x48000400

08002c28 <countStab>:

int countStab(TIM_HandleTypeDef *htim){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

	static unsigned long lastInterruptTime = 0;
	unsigned long interruptTime = HAL_GetTick();
 8002c30:	f001 fbf0 	bl	8004414 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]

	if (interruptTime - lastInterruptTime > 10){
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <countStab+0xa0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b0a      	cmp	r3, #10
 8002c42:	d92b      	bls.n	8002c9c <countStab+0x74>
		count1 = __HAL_TIM_GET_COUNTER(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <countStab+0xa4>)
 8002c4e:	601a      	str	r2, [r3, #0]
		if (count1 > count2){
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <countStab+0xa4>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <countStab+0xa8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dd05      	ble.n	8002c68 <countStab+0x40>
			counterStab++;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <countStab+0xac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <countStab+0xac>)
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00a      	b.n	8002c7e <countStab+0x56>
		}
		else if (count1 < count2){
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <countStab+0xa4>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <countStab+0xa8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	da04      	bge.n	8002c7e <countStab+0x56>
			counterStab--;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <countStab+0xac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <countStab+0xac>)
 8002c7c:	601a      	str	r2, [r3, #0]
		}
		if (counterStab >= 2){
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <countStab+0xac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	dd03      	ble.n	8002c8e <countStab+0x66>
			counterStab = 2;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <countStab+0xac>)
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e006      	b.n	8002c9c <countStab+0x74>
		}
		else if (counterStab <= 0){
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <countStab+0xac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc02      	bgt.n	8002c9c <countStab+0x74>
			counterStab = 0;
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <countStab+0xac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
		}
	}
	cStab = counterStab / 2;
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <countStab+0xac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da00      	bge.n	8002ca6 <countStab+0x7e>
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	105b      	asrs	r3, r3, #1
 8002ca8:	001a      	movs	r2, r3
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <countStab+0xb0>)
 8002cac:	601a      	str	r2, [r3, #0]
	count2 = count1;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <countStab+0xa4>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <countStab+0xa8>)
 8002cb4:	601a      	str	r2, [r3, #0]
	lastInterruptTime = interruptTime;
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <countStab+0xa0>)
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]
	return cStab;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <countStab+0xb0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b004      	add	sp, #16
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000660 	.word	0x20000660
 8002ccc:	20000650 	.word	0x20000650
 8002cd0:	20000654 	.word	0x20000654
 8002cd4:	20000aac 	.word	0x20000aac
 8002cd8:	20000a7c 	.word	0x20000a7c

08002cdc <fanCtrl>:
	count2 = count1;
	lastInterruptTime = interruptTime;
	return fanSel;
}

int fanCtrl(TIM_HandleTypeDef *htim , int temp_c){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]


	if (temp_c > 20){
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b14      	cmp	r3, #20
 8002cea:	dd0c      	ble.n	8002d06 <fanCtrl+0x2a>
		fSpd = (fan * temp_c) / 100;
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <fanCtrl+0x60>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4353      	muls	r3, r2
 8002cf4:	2164      	movs	r1, #100	; 0x64
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fd faaa 	bl	8000250 <__divsi3>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	001a      	movs	r2, r3
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <fanCtrl+0x64>)
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e009      	b.n	8002d1a <fanCtrl+0x3e>
	}
	else {
		fSpd = (fan * 20) / 100;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <fanCtrl+0x60>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2105      	movs	r1, #5
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fd fa9f 	bl	8000250 <__divsi3>
 8002d12:	0003      	movs	r3, r0
 8002d14:	001a      	movs	r2, r3
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <fanCtrl+0x64>)
 8002d18:	601a      	str	r2, [r3, #0]
	}
	if (temp_c > 100){
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	dd03      	ble.n	8002d28 <fanCtrl+0x4c>
		fSpd = fan;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <fanCtrl+0x60>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <fanCtrl+0x64>)
 8002d26:	601a      	str	r2, [r3, #0]
	}


	TIM1->CCR1 = fSpd;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <fanCtrl+0x64>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <fanCtrl+0x68>)
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34


	return fSpd;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <fanCtrl+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]

}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000ab8 	.word	0x20000ab8
 8002d44:	40012c00 	.word	0x40012c00

08002d48 <tempWarning>:

int tempWarning(int temp_c){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f000 fc7d 	bl	8003650 <ssd1306_Fill>
	ssd1306_SetCursor(55, 0);
 8002d56:	2100      	movs	r1, #0
 8002d58:	2037      	movs	r0, #55	; 0x37
 8002d5a:	f000 fdf1 	bl	8003940 <ssd1306_SetCursor>
	ssd1306_WriteChar("CAUTION TEMP!", Font_16x26, White);
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <tempWarning+0x90>)
 8002d60:	b2d8      	uxtb	r0, r3
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <tempWarning+0x94>)
 8002d64:	2301      	movs	r3, #1
 8002d66:	6811      	ldr	r1, [r2, #0]
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	f000 fd25 	bl	80037b8 <ssd1306_WriteChar>
	ssd1306_SetCursor(55, 30);
 8002d6e:	211e      	movs	r1, #30
 8002d70:	2037      	movs	r0, #55	; 0x37
 8002d72:	f000 fde5 	bl	8003940 <ssd1306_SetCursor>
	ssd1306_WriteChar(temp_c, Font_16x26, White);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	b2d8      	uxtb	r0, r3
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <tempWarning+0x94>)
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	6852      	ldr	r2, [r2, #4]
 8002d82:	f000 fd19 	bl	80037b8 <ssd1306_WriteChar>
	ssd1306_UpdateScreen();
 8002d86:	f000 fc87 	bl	8003698 <ssd1306_UpdateScreen>
	HAL_Delay(500);
 8002d8a:	23fa      	movs	r3, #250	; 0xfa
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 fb4a 	bl	8004428 <HAL_Delay>
	ssd1306_Fill(White);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 fc5b 	bl	8003650 <ssd1306_Fill>
	ssd1306_SetCursor(55, 0);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2037      	movs	r0, #55	; 0x37
 8002d9e:	f000 fdcf 	bl	8003940 <ssd1306_SetCursor>
	ssd1306_WriteChar("CAUTION TEMP!", Font_16x26, Black);
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <tempWarning+0x90>)
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <tempWarning+0x94>)
 8002da8:	2300      	movs	r3, #0
 8002daa:	6811      	ldr	r1, [r2, #0]
 8002dac:	6852      	ldr	r2, [r2, #4]
 8002dae:	f000 fd03 	bl	80037b8 <ssd1306_WriteChar>
	ssd1306_SetCursor(55, 30);
 8002db2:	211e      	movs	r1, #30
 8002db4:	2037      	movs	r0, #55	; 0x37
 8002db6:	f000 fdc3 	bl	8003940 <ssd1306_SetCursor>
	ssd1306_WriteChar(temp_c, Font_16x26, Black);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <tempWarning+0x94>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6811      	ldr	r1, [r2, #0]
 8002dc4:	6852      	ldr	r2, [r2, #4]
 8002dc6:	f000 fcf7 	bl	80037b8 <ssd1306_WriteChar>
	ssd1306_UpdateScreen();
 8002dca:	f000 fc65 	bl	8003698 <ssd1306_UpdateScreen>
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0800ae44 	.word	0x0800ae44
 8002ddc:	20000450 	.word	0x20000450

08002de0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	2414      	movs	r4, #20
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	0018      	movs	r0, r3
 8002dec:	2314      	movs	r3, #20
 8002dee:	001a      	movs	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	f005 f8c3 	bl	8007f7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b52      	ldr	r3, [pc, #328]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0309      	lsls	r1, r1, #12
 8002e00:	430a      	orrs	r2, r1
 8002e02:	615a      	str	r2, [r3, #20]
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	03c9      	lsls	r1, r1, #15
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	03db      	lsls	r3, r3, #15
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0289      	lsls	r1, r1, #10
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	029b      	lsls	r3, r3, #10
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	02c9      	lsls	r1, r1, #11
 8002e54:	430a      	orrs	r2, r1
 8002e56:	615a      	str	r2, [r3, #20]
 8002e58:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <MX_GPIO_Init+0x164>)
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	02db      	lsls	r3, r3, #11
 8002e60:	4013      	ands	r3, r2
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|opRelay_Pin, GPIO_PIN_RESET);
 8002e66:	2390      	movs	r3, #144	; 0x90
 8002e68:	05db      	lsls	r3, r3, #23
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	21a0      	movs	r1, #160	; 0xa0
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f001 fd71 	bl	8004956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, mux1_Pin|mux2_Pin, GPIO_PIN_RESET);
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <MX_GPIO_Init+0x168>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	2130      	movs	r1, #48	; 0x30
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f001 fd6b 	bl	8004956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mux3_Pin|mux4_Pin|stabilization_Pin|outImp1_Pin
 8002e80:	4932      	ldr	r1, [pc, #200]	; (8002f4c <MX_GPIO_Init+0x16c>)
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <MX_GPIO_Init+0x170>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f001 fd65 	bl	8004956 <HAL_GPIO_WritePin>
                          |outImp2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	0192      	lsls	r2, r2, #6
 8002e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	2284      	movs	r2, #132	; 0x84
 8002e98:	0392      	lsls	r2, r2, #14
 8002e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <MX_GPIO_Init+0x168>)
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	f001 fbbf 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|opRelay_Pin;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	22a0      	movs	r2, #160	; 0xa0
 8002eb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	193a      	adds	r2, r7, r4
 8002ec8:	2390      	movs	r3, #144	; 0x90
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f001 fbac 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = mux1_Pin|mux2_Pin;
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	2230      	movs	r2, #48	; 0x30
 8002ed8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2201      	movs	r2, #1
 8002ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	193b      	adds	r3, r7, r4
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <MX_GPIO_Init+0x168>)
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	f001 fb9a 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = mux3_Pin|mux4_Pin|stabilization_Pin|outImp1_Pin
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <MX_GPIO_Init+0x16c>)
 8002efc:	601a      	str	r2, [r3, #0]
                          |outImp2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	2201      	movs	r2, #1
 8002f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <MX_GPIO_Init+0x170>)
 8002f14:	0019      	movs	r1, r3
 8002f16:	0010      	movs	r0, r2
 8002f18:	f001 fb88 	bl	800462c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pButton_Pin;
 8002f1c:	0021      	movs	r1, r4
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(pButton_GPIO_Port, &GPIO_InitStruct);
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <MX_GPIO_Init+0x170>)
 8002f34:	0019      	movs	r1, r3
 8002f36:	0010      	movs	r0, r2
 8002f38:	f001 fb78 	bl	800462c <HAL_GPIO_Init>

}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b00b      	add	sp, #44	; 0x2c
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48000800 	.word	0x48000800
 8002f4c:	00000c07 	.word	0x00000c07
 8002f50:	48000400 	.word	0x48000400

08002f54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <MX_I2C1_Init+0x78>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <MX_I2C1_Init+0x7c>)
 8002f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002f90:	0018      	movs	r0, r3
 8002f92:	f001 fcfd 	bl	8004990 <HAL_I2C_Init>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f9a:	f000 faaf 	bl	80034fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f002 fb24 	bl	80055f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fac:	f000 faa6 	bl	80034fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <MX_I2C1_Init+0x74>)
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f002 fb67 	bl	8005688 <HAL_I2CEx_ConfigDigitalFilter>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f000 fa9d 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000ac4 	.word	0x20000ac4
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	0000020b 	.word	0x0000020b

08002fd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b08b      	sub	sp, #44	; 0x2c
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	2414      	movs	r4, #20
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	2314      	movs	r3, #20
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f004 ffc8 	bl	8007f7c <memset>
  if(i2cHandle->Instance==I2C1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_I2C_MspInit+0x94>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d133      	bne.n	800305e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_I2C_MspInit+0x98>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_I2C_MspInit+0x98>)
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	0289      	lsls	r1, r1, #10
 8003000:	430a      	orrs	r2, r1
 8003002:	615a      	str	r2, [r3, #20]
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_I2C_MspInit+0x98>)
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	029b      	lsls	r3, r3, #10
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	22c0      	movs	r2, #192	; 0xc0
 8003016:	00d2      	lsls	r2, r2, #3
 8003018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301a:	0021      	movs	r1, r4
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2212      	movs	r2, #18
 8003020:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003028:	187b      	adds	r3, r7, r1
 800302a:	2203      	movs	r2, #3
 800302c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2204      	movs	r2, #4
 8003032:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	187a      	adds	r2, r7, r1
 8003036:	2390      	movs	r3, #144	; 0x90
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f001 faf5 	bl	800462c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_I2C_MspInit+0x98>)
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_I2C_MspInit+0x98>)
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0389      	lsls	r1, r1, #14
 800304c:	430a      	orrs	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_I2C_MspInit+0x98>)
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	039b      	lsls	r3, r3, #14
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b00b      	add	sp, #44	; 0x2c
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40005400 	.word	0x40005400
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_TIM_IC_CaptureCallback>:
char gainS[2] = "1", impS[20] = "0.0", relayStatusS[5] = "1", stabS[5] = "OFF", fanSpdS[5] = "0", temp_cS[10] = "0";
volatile uint8_t temp_c;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af04      	add	r7, sp, #16
 8003076:	6078      	str	r0, [r7, #4]
	if (selection == 0){
 8003078:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d137      	bne.n	80030f0 <HAL_TIM_IC_CaptureCallback+0x80>
	  gain = countGain(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff faf8 	bl	8002678 <countGain>
 8003088:	0002      	movs	r2, r0
 800308a:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 800308c:	601a      	str	r2, [r3, #0]
	  if (gain != gainLastState){
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d100      	bne.n	800309c <HAL_TIM_IC_CaptureCallback+0x2c>
 800309a:	e09d      	b.n	80031d8 <HAL_TIM_IC_CaptureCallback+0x168>
		  sprintf(gainS, "%d", gain);
 800309c:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4952      	ldr	r1, [pc, #328]	; (80031ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f005 fbeb 	bl	8008880 <siprintf>
		  relayStatus = amplify(gain);
 80030aa:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fca0 	bl	80029f4 <amplify>
 80030b4:	0002      	movs	r2, r0
 80030b6:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 80030b8:	601a      	str	r2, [r3, #0]
		  sprintf(relayStatusS, "%d", relayStatus);
 80030ba:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	494b      	ldr	r1, [pc, #300]	; (80031ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 80030c0:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80030c2:	0018      	movs	r0, r3
 80030c4:	f005 fbdc 	bl	8008880 <siprintf>
		  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4d4b      	ldr	r5, [pc, #300]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x18c>)
 80030ce:	4c4a      	ldr	r4, [pc, #296]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80030d0:	494b      	ldr	r1, [pc, #300]	; (8003200 <HAL_TIM_IC_CaptureCallback+0x190>)
 80030d2:	4847      	ldr	r0, [pc, #284]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80030d4:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <HAL_TIM_IC_CaptureCallback+0x194>)
 80030d6:	9202      	str	r2, [sp, #8]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_TIM_IC_CaptureCallback+0x198>)
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	002b      	movs	r3, r5
 80030e0:	0022      	movs	r2, r4
 80030e2:	f7ff fbb9 	bl	8002858 <print>
		  gainLastState = gain;
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 80030ec:	601a      	str	r2, [r3, #0]
			  }
			  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
			  stabLastState = stab;
		  }
	  }
}
 80030ee:	e073      	b.n	80031d8 <HAL_TIM_IC_CaptureCallback+0x168>
	  else if (selection == 1){
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d135      	bne.n	8003164 <HAL_TIM_IC_CaptureCallback+0xf4>
		  impedance = countImpedance(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7ff fb38 	bl	8002770 <countImpedance>
 8003100:	1c02      	adds	r2, r0, #0
 8003102:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8003104:	601a      	str	r2, [r3, #0]
		  sprintf(impS, "%.1f", impedance);
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1c18      	adds	r0, r3, #0
 800310c:	f7ff fa2c 	bl	8002568 <__aeabi_f2d>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	493e      	ldr	r1, [pc, #248]	; (8003210 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8003116:	483a      	ldr	r0, [pc, #232]	; (8003200 <HAL_TIM_IC_CaptureCallback+0x190>)
 8003118:	f005 fbb2 	bl	8008880 <siprintf>
		  if(impedance != impedanceLastState){
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_TIM_IC_CaptureCallback+0x19c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1c19      	adds	r1, r3, #0
 8003126:	1c10      	adds	r0, r2, #0
 8003128:	f7fd f9c8 	bl	80004bc <__aeabi_fcmpeq>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d000      	beq.n	8003132 <HAL_TIM_IC_CaptureCallback+0xc2>
}
 8003130:	e052      	b.n	80031d8 <HAL_TIM_IC_CaptureCallback+0x168>
			  outImp(impedance);
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1c18      	adds	r0, r3, #0
 8003138:	f7ff fd32 	bl	8002ba0 <outImp>
			  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4d2e      	ldr	r5, [pc, #184]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x18c>)
 8003142:	4c2d      	ldr	r4, [pc, #180]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8003144:	492e      	ldr	r1, [pc, #184]	; (8003200 <HAL_TIM_IC_CaptureCallback+0x190>)
 8003146:	482a      	ldr	r0, [pc, #168]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003148:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <HAL_TIM_IC_CaptureCallback+0x194>)
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <HAL_TIM_IC_CaptureCallback+0x198>)
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	002b      	movs	r3, r5
 8003154:	0022      	movs	r2, r4
 8003156:	f7ff fb7f 	bl	8002858 <print>
			  impedanceLastState = impedance;
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_TIM_IC_CaptureCallback+0x19c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	e039      	b.n	80031d8 <HAL_TIM_IC_CaptureCallback+0x168>
		  stab = countStab(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff fd5e 	bl	8002c28 <countStab>
 800316c:	0002      	movs	r2, r0
 800316e:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8003170:	601a      	str	r2, [r3, #0]
		  if (stab != stabLastState){
 8003172:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d02c      	beq.n	80031d8 <HAL_TIM_IC_CaptureCallback+0x168>
			  if (stab == 1){
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d10c      	bne.n	80031a0 <HAL_TIM_IC_CaptureCallback+0x130>
				  strcpy(stabS, "ON");
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x18c>)
 8003188:	4a25      	ldr	r2, [pc, #148]	; (8003220 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 800318a:	8811      	ldrh	r1, [r2, #0]
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	7892      	ldrb	r2, [r2, #2]
 8003190:	709a      	strb	r2, [r3, #2]
				  HAL_GPIO_WritePin(stabilization_GPIO_Port, stabilization_Pin, GPIO_PIN_SET);
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8003194:	2201      	movs	r2, #1
 8003196:	2104      	movs	r1, #4
 8003198:	0018      	movs	r0, r3
 800319a:	f001 fbdc 	bl	8004956 <HAL_GPIO_WritePin>
 800319e:	e008      	b.n	80031b2 <HAL_TIM_IC_CaptureCallback+0x142>
				  strcpy(stabS, "OFF");
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x18c>)
 80031a2:	4a21      	ldr	r2, [pc, #132]	; (8003228 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80031a4:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(stabilization_GPIO_Port, stabilization_Pin, GPIO_PIN_RESET);
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	2104      	movs	r1, #4
 80031ac:	0018      	movs	r0, r3
 80031ae:	f001 fbd2 	bl	8004956 <HAL_GPIO_WritePin>
			  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4d11      	ldr	r5, [pc, #68]	; (80031fc <HAL_TIM_IC_CaptureCallback+0x18c>)
 80031b8:	4c0f      	ldr	r4, [pc, #60]	; (80031f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80031ba:	4911      	ldr	r1, [pc, #68]	; (8003200 <HAL_TIM_IC_CaptureCallback+0x190>)
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_TIM_IC_CaptureCallback+0x194>)
 80031c0:	9202      	str	r2, [sp, #8]
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_TIM_IC_CaptureCallback+0x198>)
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	002b      	movs	r3, r5
 80031ca:	0022      	movs	r2, r4
 80031cc:	f7ff fb44 	bl	8002858 <print>
			  stabLastState = stab;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80031d6:	601a      	str	r2, [r3, #0]
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	20000664 	.word	0x20000664
 80031e4:	20000a98 	.word	0x20000a98
 80031e8:	20000b18 	.word	0x20000b18
 80031ec:	0800ae54 	.word	0x0800ae54
 80031f0:	20000404 	.word	0x20000404
 80031f4:	20000b1c 	.word	0x20000b1c
 80031f8:	2000041c 	.word	0x2000041c
 80031fc:	20000424 	.word	0x20000424
 8003200:	20000408 	.word	0x20000408
 8003204:	20000434 	.word	0x20000434
 8003208:	2000042c 	.word	0x2000042c
 800320c:	20000aa8 	.word	0x20000aa8
 8003210:	0800ae58 	.word	0x0800ae58
 8003214:	20000b10 	.word	0x20000b10
 8003218:	20000b34 	.word	0x20000b34
 800321c:	20000b28 	.word	0x20000b28
 8003220:	0800ae60 	.word	0x0800ae60
 8003224:	48000400 	.word	0x48000400
 8003228:	0046464f 	.word	0x0046464f

0800322c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003232:	f001 f895 	bl	8004360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003236:	f000 f8f9 	bl	800342c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800323a:	f7ff fdd1 	bl	8002de0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800323e:	f000 ffe9 	bl	8004214 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003242:	f7ff fe87 	bl	8002f54 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003246:	f000 fe53 	bl	8003ef0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800324a:	f000 fdbb 	bl	8003dc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800324e:	f000 feb1 	bl	8003fb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Create interrupt for rotary encoder with timer2
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <main+0x1ac>)
 8003254:	213c      	movs	r1, #60	; 0x3c
 8003256:	0018      	movs	r0, r3
 8003258:	f003 fab4 	bl	80067c4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start pwm for fan with timer1
 800325c:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <main+0x1b0>)
 800325e:	2100      	movs	r1, #0
 8003260:	0018      	movs	r0, r3
 8003262:	f003 f94f 	bl	8006504 <HAL_TIM_PWM_Start>
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8003266:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <main+0x1b4>)
 8003268:	0018      	movs	r0, r3
 800326a:	f003 f8a9 	bl	80063c0 <HAL_TIM_Base_Start_IT>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <main+0x4a>
  {
    /* Starting Error */
    Error_Handler();
 8003272:	f000 f943 	bl	80034fc <Error_Handler>
  }

  ssd1306_Init(); //Screen initialization
 8003276:	f000 f97f 	bl	8003578 <ssd1306_Init>

  ssd1306_Fill(White);
 800327a:	2001      	movs	r0, #1
 800327c:	f000 f9e8 	bl	8003650 <ssd1306_Fill>
  ssd1306_DrawBitmap(0, 0, afry_128x64, 128, 64, Black); // Show AFRY logo for 3 seconds
 8003280:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <main+0x1b8>)
 8003282:	2300      	movs	r3, #0
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	2100      	movs	r1, #0
 800328e:	2000      	movs	r0, #0
 8003290:	f000 fb70 	bl	8003974 <ssd1306_DrawBitmap>
  ssd1306_UpdateScreen(); // Send picture to screen
 8003294:	f000 fa00 	bl	8003698 <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <main+0x1bc>)
 800329a:	0018      	movs	r0, r3
 800329c:	f001 f8c4 	bl	8004428 <HAL_Delay>
  ssd1306_Fill(Black);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f000 f9d5 	bl	8003650 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 80032a6:	2100      	movs	r1, #0
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 fb49 	bl	8003940 <ssd1306_SetCursor>
  ssd1306_WriteString("Turn knob", Font_11x18, White);
 80032ae:	4a4f      	ldr	r2, [pc, #316]	; (80033ec <main+0x1c0>)
 80032b0:	484f      	ldr	r0, [pc, #316]	; (80033f0 <main+0x1c4>)
 80032b2:	2301      	movs	r3, #1
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	6852      	ldr	r2, [r2, #4]
 80032b8:	f000 fb18 	bl	80038ec <ssd1306_WriteString>
  ssd1306_SetCursor(0, 19);
 80032bc:	2113      	movs	r1, #19
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 fb3e 	bl	8003940 <ssd1306_SetCursor>
  ssd1306_WriteString("to start", Font_11x18, White);
 80032c4:	4a49      	ldr	r2, [pc, #292]	; (80033ec <main+0x1c0>)
 80032c6:	484b      	ldr	r0, [pc, #300]	; (80033f4 <main+0x1c8>)
 80032c8:	2301      	movs	r3, #1
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	6852      	ldr	r2, [r2, #4]
 80032ce:	f000 fb0d 	bl	80038ec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80032d2:	f000 f9e1 	bl	8003698 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (temp_c != tempLastState && temp_c < 150){
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <main+0x1cc>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	001a      	movs	r2, r3
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <main+0x1d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d036      	beq.n	8003354 <main+0x128>
 80032e6:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <main+0x1cc>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b95      	cmp	r3, #149	; 0x95
 80032ee:	d831      	bhi.n	8003354 <main+0x128>
		  fanSpd = fanCtrl(&htim1, temp_c);
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <main+0x1cc>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	001a      	movs	r2, r3
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <main+0x1b0>)
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff fced 	bl	8002cdc <fanCtrl>
 8003302:	0002      	movs	r2, r0
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <main+0x1d4>)
 8003306:	601a      	str	r2, [r3, #0]
		  sprintf(temp_cS, "%u C", temp_c);
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <main+0x1cc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	001a      	movs	r2, r3
 8003310:	493c      	ldr	r1, [pc, #240]	; (8003404 <main+0x1d8>)
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <main+0x1dc>)
 8003314:	0018      	movs	r0, r3
 8003316:	f005 fab3 	bl	8008880 <siprintf>
		  sprintf(fanSpdS, "%d", fanSpd);
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <main+0x1d4>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	493b      	ldr	r1, [pc, #236]	; (800340c <main+0x1e0>)
 8003320:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <main+0x1e4>)
 8003322:	0018      	movs	r0, r3
 8003324:	f005 faac 	bl	8008880 <siprintf>
		  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <main+0x1e8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4d3a      	ldr	r5, [pc, #232]	; (8003418 <main+0x1ec>)
 800332e:	4c3b      	ldr	r4, [pc, #236]	; (800341c <main+0x1f0>)
 8003330:	493b      	ldr	r1, [pc, #236]	; (8003420 <main+0x1f4>)
 8003332:	483c      	ldr	r0, [pc, #240]	; (8003424 <main+0x1f8>)
 8003334:	4a34      	ldr	r2, [pc, #208]	; (8003408 <main+0x1dc>)
 8003336:	9202      	str	r2, [sp, #8]
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	4b35      	ldr	r3, [pc, #212]	; (8003410 <main+0x1e4>)
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	002b      	movs	r3, r5
 8003340:	0022      	movs	r2, r4
 8003342:	f7ff fa89 	bl	8002858 <print>
		  tempLastState = temp_c;
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <main+0x1cc>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	001a      	movs	r2, r3
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <main+0x1d0>)
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e021      	b.n	8003398 <main+0x16c>
	  }
	  else if (temp_c != tempLastState && temp_c >= 150){
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <main+0x1cc>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	001a      	movs	r2, r3
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <main+0x1d0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d019      	beq.n	8003398 <main+0x16c>
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <main+0x1cc>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b95      	cmp	r3, #149	; 0x95
 800336c:	d914      	bls.n	8003398 <main+0x16c>
		  fanCtrl(&htim1, temp_c);
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <main+0x1cc>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	001a      	movs	r2, r3
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <main+0x1b0>)
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff fcae 	bl	8002cdc <fanCtrl>
		  tempWarning(temp_c);
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <main+0x1cc>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	0018      	movs	r0, r3
 8003388:	f7ff fcde 	bl	8002d48 <tempWarning>
		  tempLastState = temp_c;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <main+0x1cc>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	001a      	movs	r2, r3
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <main+0x1d0>)
 8003396:	601a      	str	r2, [r3, #0]
	  }


	  selection = pbSelection();
 8003398:	f7ff f94c 	bl	8002634 <pbSelection>
 800339c:	0002      	movs	r2, r0
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <main+0x1e8>)
 80033a0:	601a      	str	r2, [r3, #0]
	  if (selection != selectionLastState){
 80033a2:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <main+0x1e8>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <main+0x1fc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d093      	beq.n	80032d6 <main+0xaa>
		  print(gainS, impS, relayStatusS, stabS, fanSpdS, selection, temp_cS);
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <main+0x1e8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4d19      	ldr	r5, [pc, #100]	; (8003418 <main+0x1ec>)
 80033b4:	4c19      	ldr	r4, [pc, #100]	; (800341c <main+0x1f0>)
 80033b6:	491a      	ldr	r1, [pc, #104]	; (8003420 <main+0x1f4>)
 80033b8:	481a      	ldr	r0, [pc, #104]	; (8003424 <main+0x1f8>)
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <main+0x1dc>)
 80033bc:	9202      	str	r2, [sp, #8]
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <main+0x1e4>)
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	002b      	movs	r3, r5
 80033c6:	0022      	movs	r2, r4
 80033c8:	f7ff fa46 	bl	8002858 <print>
		  selectionLastState = selection;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <main+0x1e8>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <main+0x1fc>)
 80033d2:	601a      	str	r2, [r3, #0]
	  if (temp_c != tempLastState && temp_c < 150){
 80033d4:	e77f      	b.n	80032d6 <main+0xaa>
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	20000bdc 	.word	0x20000bdc
 80033dc:	20000b94 	.word	0x20000b94
 80033e0:	20000b4c 	.word	0x20000b4c
 80033e4:	20000004 	.word	0x20000004
 80033e8:	00000bb8 	.word	0x00000bb8
 80033ec:	20000448 	.word	0x20000448
 80033f0:	0800ae64 	.word	0x0800ae64
 80033f4:	0800ae70 	.word	0x0800ae70
 80033f8:	20000b30 	.word	0x20000b30
 80033fc:	20000b2c 	.word	0x20000b2c
 8003400:	20000b24 	.word	0x20000b24
 8003404:	0800ae7c 	.word	0x0800ae7c
 8003408:	20000434 	.word	0x20000434
 800340c:	0800ae54 	.word	0x0800ae54
 8003410:	2000042c 	.word	0x2000042c
 8003414:	20000664 	.word	0x20000664
 8003418:	20000424 	.word	0x20000424
 800341c:	2000041c 	.word	0x2000041c
 8003420:	20000408 	.word	0x20000408
 8003424:	20000404 	.word	0x20000404
 8003428:	20000b14 	.word	0x20000b14

0800342c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b099      	sub	sp, #100	; 0x64
 8003430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003432:	242c      	movs	r4, #44	; 0x2c
 8003434:	193b      	adds	r3, r7, r4
 8003436:	0018      	movs	r0, r3
 8003438:	2334      	movs	r3, #52	; 0x34
 800343a:	001a      	movs	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	f004 fd9d 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003442:	231c      	movs	r3, #28
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	0018      	movs	r0, r3
 8003448:	2310      	movs	r3, #16
 800344a:	001a      	movs	r2, r3
 800344c:	2100      	movs	r1, #0
 800344e:	f004 fd95 	bl	8007f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003452:	003b      	movs	r3, r7
 8003454:	0018      	movs	r0, r3
 8003456:	231c      	movs	r3, #28
 8003458:	001a      	movs	r2, r3
 800345a:	2100      	movs	r1, #0
 800345c:	f004 fd8e 	bl	8007f7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003460:	0021      	movs	r1, r4
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2203      	movs	r2, #3
 8003466:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2201      	movs	r2, #1
 800346c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2201      	movs	r2, #1
 8003472:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003474:	187b      	adds	r3, r7, r1
 8003476:	2210      	movs	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800347a:	187b      	adds	r3, r7, r1
 800347c:	2202      	movs	r2, #2
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003480:	187b      	adds	r3, r7, r1
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	0252      	lsls	r2, r2, #9
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003488:	187b      	adds	r3, r7, r1
 800348a:	22a0      	movs	r2, #160	; 0xa0
 800348c:	0392      	lsls	r2, r2, #14
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2201      	movs	r2, #1
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003496:	187b      	adds	r3, r7, r1
 8003498:	0018      	movs	r0, r3
 800349a:	f002 f941 	bl	8005720 <HAL_RCC_OscConfig>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d001      	beq.n	80034a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80034a2:	f000 f82b 	bl	80034fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034a6:	211c      	movs	r1, #28
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2207      	movs	r2, #7
 80034ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	2202      	movs	r2, #2
 80034b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	2101      	movs	r1, #1
 80034c4:	0018      	movs	r0, r3
 80034c6:	f002 fcb1 	bl	8005e2c <HAL_RCC_ClockConfig>
 80034ca:	1e03      	subs	r3, r0, #0
 80034cc:	d001      	beq.n	80034d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80034ce:	f000 f815 	bl	80034fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80034d2:	003b      	movs	r3, r7
 80034d4:	2222      	movs	r2, #34	; 0x22
 80034d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034d8:	003b      	movs	r3, r7
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80034de:	003b      	movs	r3, r7
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e4:	003b      	movs	r3, r7
 80034e6:	0018      	movs	r0, r3
 80034e8:	f002 fe1a 	bl	8006120 <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80034f0:	f000 f804 	bl	80034fc <Error_Handler>
  }
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b019      	add	sp, #100	; 0x64
 80034fa:	bd90      	pop	{r4, r7, pc}

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>

08003506 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af04      	add	r7, sp, #16
 8003516:	0002      	movs	r2, r0
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800351c:	4808      	ldr	r0, [pc, #32]	; (8003540 <ssd1306_WriteCommand+0x30>)
 800351e:	2301      	movs	r3, #1
 8003520:	425b      	negs	r3, r3
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	2301      	movs	r3, #1
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2301      	movs	r3, #1
 800352e:	2200      	movs	r2, #0
 8003530:	217a      	movs	r1, #122	; 0x7a
 8003532:	f001 fcd3 	bl	8004edc <HAL_I2C_Mem_Write>
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000ac4 	.word	0x20000ac4

08003544 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af04      	add	r7, sp, #16
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4808      	ldr	r0, [pc, #32]	; (8003574 <ssd1306_WriteData+0x30>)
 8003554:	2201      	movs	r2, #1
 8003556:	4252      	negs	r2, r2
 8003558:	9202      	str	r2, [sp, #8]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2301      	movs	r3, #1
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	217a      	movs	r1, #122	; 0x7a
 8003566:	f001 fcb9 	bl	8004edc <HAL_I2C_Mem_Write>
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000ac4 	.word	0x20000ac4

08003578 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800357c:	f7ff ffc3 	bl	8003506 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003580:	2064      	movs	r0, #100	; 0x64
 8003582:	f000 ff51 	bl	8004428 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003586:	2000      	movs	r0, #0
 8003588:	f000 fa9a 	bl	8003ac0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800358c:	2020      	movs	r0, #32
 800358e:	f7ff ffbf 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff ffbc 	bl	8003510 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003598:	20b0      	movs	r0, #176	; 0xb0
 800359a:	f7ff ffb9 	bl	8003510 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800359e:	20c8      	movs	r0, #200	; 0xc8
 80035a0:	f7ff ffb6 	bl	8003510 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7ff ffb3 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80035aa:	2010      	movs	r0, #16
 80035ac:	f7ff ffb0 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80035b0:	2040      	movs	r0, #64	; 0x40
 80035b2:	f7ff ffad 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80035b6:	20ff      	movs	r0, #255	; 0xff
 80035b8:	f000 fa6a 	bl	8003a90 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80035bc:	20a1      	movs	r0, #161	; 0xa1
 80035be:	f7ff ffa7 	bl	8003510 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80035c2:	20a6      	movs	r0, #166	; 0xa6
 80035c4:	f7ff ffa4 	bl	8003510 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80035c8:	20a8      	movs	r0, #168	; 0xa8
 80035ca:	f7ff ffa1 	bl	8003510 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80035ce:	203f      	movs	r0, #63	; 0x3f
 80035d0:	f7ff ff9e 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80035d4:	20a4      	movs	r0, #164	; 0xa4
 80035d6:	f7ff ff9b 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80035da:	20d3      	movs	r0, #211	; 0xd3
 80035dc:	f7ff ff98 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7ff ff95 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80035e6:	20d5      	movs	r0, #213	; 0xd5
 80035e8:	f7ff ff92 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80035ec:	20f0      	movs	r0, #240	; 0xf0
 80035ee:	f7ff ff8f 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80035f2:	20d9      	movs	r0, #217	; 0xd9
 80035f4:	f7ff ff8c 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80035f8:	2022      	movs	r0, #34	; 0x22
 80035fa:	f7ff ff89 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80035fe:	20da      	movs	r0, #218	; 0xda
 8003600:	f7ff ff86 	bl	8003510 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003604:	2012      	movs	r0, #18
 8003606:	f7ff ff83 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800360a:	20db      	movs	r0, #219	; 0xdb
 800360c:	f7ff ff80 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003610:	2020      	movs	r0, #32
 8003612:	f7ff ff7d 	bl	8003510 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003616:	208d      	movs	r0, #141	; 0x8d
 8003618:	f7ff ff7a 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800361c:	2014      	movs	r0, #20
 800361e:	f7ff ff77 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003622:	2001      	movs	r0, #1
 8003624:	f000 fa4c 	bl	8003ac0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003628:	2000      	movs	r0, #0
 800362a:	f000 f811 	bl	8003650 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800362e:	f000 f833 	bl	8003698 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <ssd1306_Init+0xd4>)
 8003634:	2200      	movs	r2, #0
 8003636:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <ssd1306_Init+0xd4>)
 800363a:	2200      	movs	r2, #0
 800363c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <ssd1306_Init+0xd4>)
 8003640:	2201      	movs	r2, #1
 8003642:	711a      	strb	r2, [r3, #4]
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	20000a68 	.word	0x20000a68

08003650 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	0002      	movs	r2, r0
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e00e      	b.n	8003680 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003662:	1dfb      	adds	r3, r7, #7
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <ssd1306_Fill+0x1e>
 800366a:	2100      	movs	r1, #0
 800366c:	e000      	b.n	8003670 <ssd1306_Fill+0x20>
 800366e:	21ff      	movs	r1, #255	; 0xff
 8003670:	4a08      	ldr	r2, [pc, #32]	; (8003694 <ssd1306_Fill+0x44>)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	18d3      	adds	r3, r2, r3
 8003676:	1c0a      	adds	r2, r1, #0
 8003678:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3301      	adds	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	429a      	cmp	r2, r3
 8003688:	d3eb      	bcc.n	8003662 <ssd1306_Fill+0x12>
    }
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000668 	.word	0x20000668

08003698 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e01a      	b.n	80036dc <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	3b50      	subs	r3, #80	; 0x50
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7ff ff2e 	bl	8003510 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7ff ff2b 	bl	8003510 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80036ba:	2010      	movs	r0, #16
 80036bc:	f7ff ff28 	bl	8003510 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	01da      	lsls	r2, r3, #7
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <ssd1306_UpdateScreen+0x58>)
 80036c8:	18d3      	adds	r3, r2, r3
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff ff39 	bl	8003544 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	3201      	adds	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b07      	cmp	r3, #7
 80036e2:	d9e0      	bls.n	80036a6 <ssd1306_UpdateScreen+0xe>
    }
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	20000668 	.word	0x20000668

080036f4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0004      	movs	r4, r0
 80036fc:	0008      	movs	r0, r1
 80036fe:	0011      	movs	r1, r2
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	1c22      	adds	r2, r4, #0
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	1c02      	adds	r2, r0, #0
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	1d7b      	adds	r3, r7, #5
 800370e:	1c0a      	adds	r2, r1, #0
 8003710:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	db47      	blt.n	80037ac <ssd1306_DrawPixel+0xb8>
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b3f      	cmp	r3, #63	; 0x3f
 8003722:	d843      	bhi.n	80037ac <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003724:	1d7b      	adds	r3, r7, #5
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d11e      	bne.n	800376a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	1dbb      	adds	r3, r7, #6
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	08db      	lsrs	r3, r3, #3
 8003736:	b2d8      	uxtb	r0, r3
 8003738:	0003      	movs	r3, r0
 800373a:	01db      	lsls	r3, r3, #7
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <ssd1306_DrawPixel+0xc0>)
 8003740:	5cd3      	ldrb	r3, [r2, r3]
 8003742:	b25a      	sxtb	r2, r3
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2107      	movs	r1, #7
 800374a:	400b      	ands	r3, r1
 800374c:	2101      	movs	r1, #1
 800374e:	4099      	lsls	r1, r3
 8003750:	000b      	movs	r3, r1
 8003752:	b25b      	sxtb	r3, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	b259      	sxtb	r1, r3
 8003758:	1dfb      	adds	r3, r7, #7
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	0003      	movs	r3, r0
 800375e:	01db      	lsls	r3, r3, #7
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	b2c9      	uxtb	r1, r1
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <ssd1306_DrawPixel+0xc0>)
 8003766:	54d1      	strb	r1, [r2, r3]
 8003768:	e021      	b.n	80037ae <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dbb      	adds	r3, r7, #6
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	b2d8      	uxtb	r0, r3
 8003776:	0003      	movs	r3, r0
 8003778:	01db      	lsls	r3, r3, #7
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <ssd1306_DrawPixel+0xc0>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	b25b      	sxtb	r3, r3
 8003782:	1dba      	adds	r2, r7, #6
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	2107      	movs	r1, #7
 8003788:	400a      	ands	r2, r1
 800378a:	2101      	movs	r1, #1
 800378c:	4091      	lsls	r1, r2
 800378e:	000a      	movs	r2, r1
 8003790:	b252      	sxtb	r2, r2
 8003792:	43d2      	mvns	r2, r2
 8003794:	b252      	sxtb	r2, r2
 8003796:	4013      	ands	r3, r2
 8003798:	b259      	sxtb	r1, r3
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	0003      	movs	r3, r0
 80037a0:	01db      	lsls	r3, r3, #7
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	b2c9      	uxtb	r1, r1
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <ssd1306_DrawPixel+0xc0>)
 80037a8:	54d1      	strb	r1, [r2, r3]
 80037aa:	e000      	b.n	80037ae <ssd1306_DrawPixel+0xba>
        return;
 80037ac:	46c0      	nop			; (mov r8, r8)
    }
}
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b003      	add	sp, #12
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	20000668 	.word	0x20000668

080037b8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	0004      	movs	r4, r0
 80037c0:	1d38      	adds	r0, r7, #4
 80037c2:	6001      	str	r1, [r0, #0]
 80037c4:	6042      	str	r2, [r0, #4]
 80037c6:	0019      	movs	r1, r3
 80037c8:	200f      	movs	r0, #15
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	1c22      	adds	r2, r4, #0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	230e      	movs	r3, #14
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	1c0a      	adds	r2, r1, #0
 80037d6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b1f      	cmp	r3, #31
 80037de:	d903      	bls.n	80037e8 <ssd1306_WriteChar+0x30>
 80037e0:	183b      	adds	r3, r7, r0
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b7e      	cmp	r3, #126	; 0x7e
 80037e6:	d901      	bls.n	80037ec <ssd1306_WriteChar+0x34>
        return 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e078      	b.n	80038de <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037ec:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <ssd1306_WriteChar+0x130>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	001a      	movs	r2, r3
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	18d3      	adds	r3, r2, r3
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	dc07      	bgt.n	800380c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <ssd1306_WriteChar+0x130>)
 80037fe:	885b      	ldrh	r3, [r3, #2]
 8003800:	001a      	movs	r2, r3
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	dd01      	ble.n	8003810 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800380c:	2300      	movs	r3, #0
 800380e:	e066      	b.n	80038de <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e051      	b.n	80038ba <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	230f      	movs	r3, #15
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	3b20      	subs	r3, #32
 8003822:	1d39      	adds	r1, r7, #4
 8003824:	7849      	ldrb	r1, [r1, #1]
 8003826:	434b      	muls	r3, r1
 8003828:	0019      	movs	r1, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	18cb      	adds	r3, r1, r3
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	18d3      	adds	r3, r2, r3
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e035      	b.n	80038a8 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	409a      	lsls	r2, r3
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	4013      	ands	r3, r2
 8003848:	d014      	beq.n	8003874 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <ssd1306_WriteChar+0x130>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	18d3      	adds	r3, r2, r3
 8003856:	b2d8      	uxtb	r0, r3
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <ssd1306_WriteChar+0x130>)
 800385a:	885b      	ldrh	r3, [r3, #2]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	230e      	movs	r3, #14
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	001a      	movs	r2, r3
 800386e:	f7ff ff41 	bl	80036f4 <ssd1306_DrawPixel>
 8003872:	e016      	b.n	80038a2 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <ssd1306_WriteChar+0x130>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	18d3      	adds	r3, r2, r3
 8003880:	b2d8      	uxtb	r0, r3
 8003882:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <ssd1306_WriteChar+0x130>)
 8003884:	885b      	ldrh	r3, [r3, #2]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	b2d9      	uxtb	r1, r3
 8003890:	230e      	movs	r3, #14
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	425a      	negs	r2, r3
 8003898:	4153      	adcs	r3, r2
 800389a:	b2db      	uxtb	r3, r3
 800389c:	001a      	movs	r2, r3
 800389e:	f7ff ff29 	bl	80036f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	001a      	movs	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d3c3      	bcc.n	800383c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	001a      	movs	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d3a7      	bcc.n	8003816 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <ssd1306_WriteChar+0x130>)
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <ssd1306_WriteChar+0x130>)
 80038d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80038d8:	230f      	movs	r3, #15
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b009      	add	sp, #36	; 0x24
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000a68 	.word	0x20000a68

080038ec <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	1d38      	adds	r0, r7, #4
 80038f6:	6001      	str	r1, [r0, #0]
 80038f8:	6042      	str	r2, [r0, #4]
 80038fa:	001a      	movs	r2, r3
 80038fc:	1cfb      	adds	r3, r7, #3
 80038fe:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8003900:	e014      	b.n	800392c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	7818      	ldrb	r0, [r3, #0]
 8003906:	1cfb      	adds	r3, r7, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	1d3a      	adds	r2, r7, #4
 800390c:	6811      	ldr	r1, [r2, #0]
 800390e:	6852      	ldr	r2, [r2, #4]
 8003910:	f7ff ff52 	bl	80037b8 <ssd1306_WriteChar>
 8003914:	0003      	movs	r3, r0
 8003916:	001a      	movs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d002      	beq.n	8003926 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	e008      	b.n	8003938 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3301      	adds	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	781b      	ldrb	r3, [r3, #0]
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}

08003940 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	0002      	movs	r2, r0
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	1c0a      	adds	r2, r1, #0
 8003950:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b29a      	uxth	r2, r3
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <ssd1306_SetCursor+0x30>)
 800395a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800395c:	1dbb      	adds	r3, r7, #6
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <ssd1306_SetCursor+0x30>)
 8003964:	805a      	strh	r2, [r3, #2]
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000a68 	.word	0x20000a68

08003974 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	0004      	movs	r4, r0
 800397c:	0008      	movs	r0, r1
 800397e:	603a      	str	r2, [r7, #0]
 8003980:	0019      	movs	r1, r3
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	1c22      	adds	r2, r4, #0
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	1c02      	adds	r2, r0, #0
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	1d7b      	adds	r3, r7, #5
 8003990:	1c0a      	adds	r2, r1, #0
 8003992:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003994:	1d7b      	adds	r3, r7, #5
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	3307      	adds	r3, #7
 800399a:	2b00      	cmp	r3, #0
 800399c:	da00      	bge.n	80039a0 <ssd1306_DrawBitmap+0x2c>
 800399e:	3307      	adds	r3, #7
 80039a0:	10db      	asrs	r3, r3, #3
 80039a2:	001a      	movs	r2, r3
 80039a4:	230a      	movs	r3, #10
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80039aa:	230f      	movs	r3, #15
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db65      	blt.n	8003a88 <ssd1306_DrawBitmap+0x114>
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b3f      	cmp	r3, #63	; 0x3f
 80039c2:	d861      	bhi.n	8003a88 <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80039c4:	230e      	movs	r3, #14
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e053      	b.n	8003a76 <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 80039ce:	230d      	movs	r3, #13
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e03c      	b.n	8003a52 <ssd1306_DrawBitmap+0xde>
            if (i & 7)
 80039d8:	230d      	movs	r3, #13
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2207      	movs	r2, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	d006      	beq.n	80039f2 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 80039e4:	230f      	movs	r3, #15
 80039e6:	18fa      	adds	r2, r7, r3
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	18db      	adds	r3, r3, r3
 80039ee:	7013      	strb	r3, [r2, #0]
 80039f0:	e014      	b.n	8003a1c <ssd1306_DrawBitmap+0xa8>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80039f2:	230e      	movs	r3, #14
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	220a      	movs	r2, #10
 80039fa:	18ba      	adds	r2, r7, r2
 80039fc:	2100      	movs	r1, #0
 80039fe:	5e52      	ldrsh	r2, [r2, r1]
 8003a00:	4353      	muls	r3, r2
 8003a02:	220d      	movs	r2, #13
 8003a04:	18ba      	adds	r2, r7, r2
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	08d2      	lsrs	r2, r2, #3
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	189b      	adds	r3, r3, r2
 8003a0e:	001a      	movs	r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	189a      	adds	r2, r3, r2
 8003a14:	230f      	movs	r3, #15
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
            if (byte & 0x80)
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da0e      	bge.n	8003a46 <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 8003a28:	1dfa      	adds	r2, r7, #7
 8003a2a:	230d      	movs	r3, #13
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	b2d8      	uxtb	r0, r3
 8003a36:	2324      	movs	r3, #36	; 0x24
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	1dbb      	adds	r3, r7, #6
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	0019      	movs	r1, r3
 8003a42:	f7ff fe57 	bl	80036f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003a46:	210d      	movs	r1, #13
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	3201      	adds	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	230d      	movs	r3, #13
 8003a54:	18fa      	adds	r2, r7, r3
 8003a56:	1d7b      	adds	r3, r7, #5
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3bb      	bcc.n	80039d8 <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003a60:	210e      	movs	r1, #14
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	3201      	adds	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	1dbb      	adds	r3, r7, #6
 8003a72:	3201      	adds	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	230e      	movs	r3, #14
 8003a78:	18fa      	adds	r2, r7, r3
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3a3      	bcc.n	80039ce <ssd1306_DrawBitmap+0x5a>
        }
    }
    return;
 8003a86:	e000      	b.n	8003a8a <ssd1306_DrawBitmap+0x116>
        return;
 8003a88:	46c0      	nop			; (mov r8, r8)
}
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b005      	add	sp, #20
 8003a8e:	bd90      	pop	{r4, r7, pc}

08003a90 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	0002      	movs	r2, r0
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003a9c:	210f      	movs	r1, #15
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	2281      	movs	r2, #129	; 0x81
 8003aa2:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff fd31 	bl	8003510 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fd2c 	bl	8003510 <ssd1306_WriteCommand>
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003ad4:	230f      	movs	r3, #15
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	22af      	movs	r2, #175	; 0xaf
 8003ada:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <ssd1306_SetDisplayOn+0x48>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	715a      	strb	r2, [r3, #5]
 8003ae2:	e006      	b.n	8003af2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	22ae      	movs	r2, #174	; 0xae
 8003aea:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <ssd1306_SetDisplayOn+0x48>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003af2:	230f      	movs	r3, #15
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff fd09 	bl	8003510 <ssd1306_WriteCommand>
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b004      	add	sp, #16
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	20000a68 	.word	0x20000a68

08003b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_MspInit+0x44>)
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_MspInit+0x44>)
 8003b18:	2101      	movs	r1, #1
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_MspInit+0x44>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_MspInit+0x44>)
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_MspInit+0x44>)
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	0549      	lsls	r1, r1, #21
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_MspInit+0x44>)
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	055b      	lsls	r3, r3, #21
 8003b40:	4013      	ands	r3, r2
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	40021000 	.word	0x40021000

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b58:	e7fe      	b.n	8003b58 <NMI_Handler+0x4>

08003b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5e:	e7fe      	b.n	8003b5e <HardFault_Handler+0x4>

08003b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b78:	f000 fc3a 	bl	80043f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <TIM2_IRQHandler+0x14>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f002 fede 	bl	800694c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000bdc 	.word	0x20000bdc

08003b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <TIM3_IRQHandler+0x84>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f002 fed1 	bl	800694c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  buf[0] = REG_TEMP;
 8003baa:	2200      	movs	r2, #0
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <TIM3_IRQHandler+0x88>)
 8003bae:	701a      	strb	r2, [r3, #0]
  	      ret = HAL_I2C_Master_Transmit(&hi2c1, TC74_ADDR, buf, 1, HAL_MAX_DELAY);
 8003bb0:	2396      	movs	r3, #150	; 0x96
 8003bb2:	b299      	uxth	r1, r3
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <TIM3_IRQHandler+0x88>)
 8003bb6:	481c      	ldr	r0, [pc, #112]	; (8003c28 <TIM3_IRQHandler+0x8c>)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	425b      	negs	r3, r3
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f000 ff7c 	bl	8004abc <HAL_I2C_Master_Transmit>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <TIM3_IRQHandler+0x90>)
 8003bca:	701a      	strb	r2, [r3, #0]
  	      if ( ret != HAL_OK ) {
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <TIM3_IRQHandler+0x90>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <TIM3_IRQHandler+0x4a>
  	        strcpy((char*)buf, "Error Tx\r\n");
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <TIM3_IRQHandler+0x88>)
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <TIM3_IRQHandler+0x94>)
 8003bd8:	0010      	movs	r0, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	230b      	movs	r3, #11
 8003bde:	001a      	movs	r2, r3
 8003be0:	f004 f9b0 	bl	8007f44 <memcpy>
  	          strcpy((char*)buf, "Error Rx\r\n");
  	        }

  	      }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003be4:	e019      	b.n	8003c1a <TIM3_IRQHandler+0x7e>
  	        ret = HAL_I2C_Master_Receive(&hi2c1, TC74_ADDR, &temp_c, 2, HAL_MAX_DELAY);
 8003be6:	2396      	movs	r3, #150	; 0x96
 8003be8:	b299      	uxth	r1, r3
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <TIM3_IRQHandler+0x98>)
 8003bec:	480e      	ldr	r0, [pc, #56]	; (8003c28 <TIM3_IRQHandler+0x8c>)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f001 f869 	bl	8004ccc <HAL_I2C_Master_Receive>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <TIM3_IRQHandler+0x90>)
 8003c00:	701a      	strb	r2, [r3, #0]
  	        if ( ret != HAL_OK ) {
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <TIM3_IRQHandler+0x90>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <TIM3_IRQHandler+0x7e>
  	          strcpy((char*)buf, "Error Rx\r\n");
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <TIM3_IRQHandler+0x88>)
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <TIM3_IRQHandler+0x9c>)
 8003c0e:	0010      	movs	r0, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	230b      	movs	r3, #11
 8003c14:	001a      	movs	r2, r3
 8003c16:	f004 f995 	bl	8007f44 <memcpy>
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000b4c 	.word	0x20000b4c
 8003c24:	20000b3c 	.word	0x20000b3c
 8003c28:	20000ac4 	.word	0x20000ac4
 8003c2c:	20000b48 	.word	0x20000b48
 8003c30:	0800ae84 	.word	0x0800ae84
 8003c34:	20000b30 	.word	0x20000b30
 8003c38:	0800ae90 	.word	0x0800ae90

08003c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	return 1;
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_kill>:

int _kill(int pid, int sig)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c52:	f004 f94d 	bl	8007ef0 <__errno>
 8003c56:	0003      	movs	r3, r0
 8003c58:	2216      	movs	r2, #22
 8003c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	425b      	negs	r3, r3
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_exit>:

void _exit (int status)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c70:	2301      	movs	r3, #1
 8003c72:	425a      	negs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff ffe5 	bl	8003c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c7e:	e7fe      	b.n	8003c7e <_exit+0x16>

08003c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e00a      	b.n	8003ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c92:	e000      	b.n	8003c96 <_read+0x16>
 8003c94:	bf00      	nop
 8003c96:	0001      	movs	r1, r0
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	60ba      	str	r2, [r7, #8]
 8003c9e:	b2ca      	uxtb	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dbf0      	blt.n	8003c92 <_read+0x12>
	}

return len;
 8003cb0:	687b      	ldr	r3, [r7, #4]
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b006      	add	sp, #24
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e009      	b.n	8003ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	e000      	b.n	8003cda <_write+0x20>
 8003cd8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	dbf1      	blt.n	8003ccc <_write+0x12>
	}
	return len;
 8003ce8:	687b      	ldr	r3, [r7, #4]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b006      	add	sp, #24
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_close>:

int _close(int file)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	425b      	negs	r3, r3
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	0192      	lsls	r2, r2, #6
 8003d16:	605a      	str	r2, [r3, #4]
	return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_isatty>:

int _isatty(int file)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
	return 1;
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d54:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <_sbrk+0x5c>)
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <_sbrk+0x60>)
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d60:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <_sbrk+0x64>)
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <_sbrk+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <_sbrk+0x64>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d7c:	f004 f8b8 	bl	8007ef0 <__errno>
 8003d80:	0003      	movs	r3, r0
 8003d82:	220c      	movs	r2, #12
 8003d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	425b      	negs	r3, r3
 8003d8a:	e009      	b.n	8003da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <_sbrk+0x64>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <_sbrk+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	18d2      	adds	r2, r2, r3
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <_sbrk+0x64>)
 8003d9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b006      	add	sp, #24
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20008000 	.word	0x20008000
 8003dac:	00000400 	.word	0x00000400
 8003db0:	20000a70 	.word	0x20000a70
 8003db4:	20000cc0 	.word	0x20000cc0

08003db8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b092      	sub	sp, #72	; 0x48
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	0018      	movs	r0, r3
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f004 f8d1 	bl	8007f7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dda:	2324      	movs	r3, #36	; 0x24
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	0018      	movs	r0, r3
 8003de0:	231c      	movs	r3, #28
 8003de2:	001a      	movs	r2, r3
 8003de4:	2100      	movs	r1, #0
 8003de6:	f004 f8c9 	bl	8007f7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	0018      	movs	r0, r3
 8003dee:	2320      	movs	r3, #32
 8003df0:	001a      	movs	r2, r3
 8003df2:	2100      	movs	r1, #0
 8003df4:	f004 f8c2 	bl	8007f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <MX_TIM1_Init+0x124>)
 8003dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e0c:	4a37      	ldr	r2, [pc, #220]	; (8003eec <MX_TIM1_Init+0x128>)
 8003e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e1c:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e22:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e24:	0018      	movs	r0, r3
 8003e26:	f002 fb1d 	bl	8006464 <HAL_TIM_PWM_Init>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003e2e:	f7ff fb65 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e40:	187a      	adds	r2, r7, r1
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f003 fb8a 	bl	8007560 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e50:	f7ff fb54 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e54:	2124      	movs	r1, #36	; 0x24
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2260      	movs	r2, #96	; 0x60
 8003e5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2200      	movs	r2, #0
 8003e60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e80:	1879      	adds	r1, r7, r1
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	0018      	movs	r0, r3
 8003e88:	f002 fe76 	bl	8006b78 <HAL_TIM_PWM_ConfigChannel>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003e90:	f7ff fb34 	bl	80034fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	0192      	lsls	r2, r2, #6
 8003eb8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ec0:	1d3a      	adds	r2, r7, #4
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f003 fba8 	bl	800761c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ecc:	1e03      	subs	r3, r0, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003ed0:	f7ff fb14 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <MX_TIM1_Init+0x120>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f95c 	bl	8004194 <HAL_TIM_MspPostInit>

}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b012      	add	sp, #72	; 0x48
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000b94 	.word	0x20000b94
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	0000ffff 	.word	0x0000ffff

08003ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b08d      	sub	sp, #52	; 0x34
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ef6:	240c      	movs	r4, #12
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	0018      	movs	r0, r3
 8003efc:	2324      	movs	r3, #36	; 0x24
 8003efe:	001a      	movs	r2, r3
 8003f00:	2100      	movs	r1, #0
 8003f02:	f004 f83b 	bl	8007f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	0018      	movs	r0, r3
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f004 f834 	bl	8007f7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f14:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	05d2      	lsls	r2, r2, #23
 8003f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f22:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4252      	negs	r2, r2
 8003f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f30:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f36:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f3c:	0021      	movs	r1, r4
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	2203      	movs	r2, #3
 8003f42:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	2202      	movs	r2, #2
 8003f48:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f56:	187b      	adds	r3, r7, r1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2202      	movs	r2, #2
 8003f60:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2201      	movs	r2, #1
 8003f66:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003f74:	187a      	adds	r2, r7, r1
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f002 fb7a 	bl	8006674 <HAL_TIM_Encoder_Init>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003f84:	f7ff faba 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f94:	1d3a      	adds	r2, r7, #4
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <MX_TIM2_Init+0xc0>)
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f003 fae0 	bl	8007560 <HAL_TIMEx_MasterConfigSynchronization>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003fa4:	f7ff faaa 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b00d      	add	sp, #52	; 0x34
 8003fae:	bd90      	pop	{r4, r7, pc}
 8003fb0:	20000bdc 	.word	0x20000bdc

08003fb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fba:	2308      	movs	r3, #8
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f003 ffd9 	bl	8007f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fca:	003b      	movs	r3, r7
 8003fcc:	0018      	movs	r0, r3
 8003fce:	2308      	movs	r3, #8
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f003 ffd2 	bl	8007f7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003fda:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <MX_TIM3_Init+0xa4>)
 8003fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <MX_TIM3_Init+0xa8>)
 8003fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <MX_TIM3_Init+0xac>)
 8003fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <MX_TIM3_Init+0xa0>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f002 f98e 	bl	8006320 <HAL_TIM_Base_Init>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004008:	f7ff fa78 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800400c:	2108      	movs	r1, #8
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	0152      	lsls	r2, r2, #5
 8004014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004016:	187a      	adds	r2, r7, r1
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <MX_TIM3_Init+0xa0>)
 800401a:	0011      	movs	r1, r2
 800401c:	0018      	movs	r0, r3
 800401e:	f002 fe71 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004026:	f7ff fa69 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402a:	003b      	movs	r3, r7
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004030:	003b      	movs	r3, r7
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004036:	003a      	movs	r2, r7
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <MX_TIM3_Init+0xa0>)
 800403a:	0011      	movs	r1, r2
 800403c:	0018      	movs	r0, r3
 800403e:	f003 fa8f 	bl	8007560 <HAL_TIMEx_MasterConfigSynchronization>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d001      	beq.n	800404a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004046:	f7ff fa59 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b006      	add	sp, #24
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	20000b4c 	.word	0x20000b4c
 8004058:	40000400 	.word	0x40000400
 800405c:	000012bf 	.word	0x000012bf
 8004060:	00002710 	.word	0x00002710

08004064 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_TIM_PWM_MspInit+0x38>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10d      	bne.n	8004092 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	0109      	lsls	r1, r1, #4
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b004      	add	sp, #16
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b08b      	sub	sp, #44	; 0x2c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	2414      	movs	r4, #20
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	0018      	movs	r0, r3
 80040b2:	2314      	movs	r3, #20
 80040b4:	001a      	movs	r2, r3
 80040b6:	2100      	movs	r1, #0
 80040b8:	f003 ff60 	bl	8007f7c <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	05db      	lsls	r3, r3, #23
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d138      	bne.n	800413a <HAL_TIM_Encoder_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2201      	movs	r2, #1
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e0:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	0289      	lsls	r1, r1, #10
 80040ea:	430a      	orrs	r2, r1
 80040ec:	615a      	str	r2, [r3, #20]
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_TIM_Encoder_MspInit+0xa0>)
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = outputA_Pin|outputB_Pin;
 80040fc:	0021      	movs	r1, r4
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	2203      	movs	r2, #3
 8004102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2202      	movs	r2, #2
 8004108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004116:	187b      	adds	r3, r7, r1
 8004118:	2202      	movs	r2, #2
 800411a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	187a      	adds	r2, r7, r1
 800411e:	2390      	movs	r3, #144	; 0x90
 8004120:	05db      	lsls	r3, r3, #23
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f000 fa81 	bl	800462c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	200f      	movs	r0, #15
 8004130:	f000 fa4a 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004134:	200f      	movs	r0, #15
 8004136:	f000 fa5c 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b00b      	add	sp, #44	; 0x2c
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	40021000 	.word	0x40021000

08004148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_TIM_Base_MspInit+0x44>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d113      	bne.n	8004182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_TIM_Base_MspInit+0x48>)
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_TIM_Base_MspInit+0x48>)
 8004160:	2102      	movs	r1, #2
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_TIM_Base_MspInit+0x48>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	2010      	movs	r0, #16
 8004178:	f000 fa26 	bl	80045c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800417c:	2010      	movs	r0, #16
 800417e:	f000 fa38 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40000400 	.word	0x40000400
 8004190:	40021000 	.word	0x40021000

08004194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	240c      	movs	r4, #12
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	0018      	movs	r0, r3
 80041a2:	2314      	movs	r3, #20
 80041a4:	001a      	movs	r2, r3
 80041a6:	2100      	movs	r1, #0
 80041a8:	f003 fee8 	bl	8007f7c <memset>
  if(timHandle->Instance==TIM1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a16      	ldr	r2, [pc, #88]	; (800420c <HAL_TIM_MspPostInit+0x78>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d125      	bne.n	8004202 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HAL_TIM_MspPostInit+0x7c>)
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_TIM_MspPostInit+0x7c>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0289      	lsls	r1, r1, #10
 80041c0:	430a      	orrs	r2, r1
 80041c2:	615a      	str	r2, [r3, #20]
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_TIM_MspPostInit+0x7c>)
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = fan_Pin;
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	0052      	lsls	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	0021      	movs	r1, r4
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	2202      	movs	r2, #2
 80041e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	2202      	movs	r2, #2
 80041f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(fan_GPIO_Port, &GPIO_InitStruct);
 80041f4:	187a      	adds	r2, r7, r1
 80041f6:	2390      	movs	r3, #144	; 0x90
 80041f8:	05db      	lsls	r3, r3, #23
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 fa15 	bl	800462c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	b009      	add	sp, #36	; 0x24
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40021000 	.word	0x40021000

08004214 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <MX_USART2_UART_Init+0x58>)
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 800421c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004220:	22e1      	movs	r2, #225	; 0xe1
 8004222:	0252      	lsls	r2, r2, #9
 8004224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <MX_USART2_UART_Init+0x58>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <MX_USART2_UART_Init+0x58>)
 800423a:	220c      	movs	r2, #12
 800423c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <MX_USART2_UART_Init+0x58>)
 800424c:	2200      	movs	r2, #0
 800424e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004252:	2200      	movs	r2, #0
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <MX_USART2_UART_Init+0x58>)
 8004258:	0018      	movs	r0, r3
 800425a:	f003 fa4d 	bl	80076f8 <HAL_UART_Init>
 800425e:	1e03      	subs	r3, r0, #0
 8004260:	d001      	beq.n	8004266 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004262:	f7ff f94b 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000c24 	.word	0x20000c24
 8004270:	40004400 	.word	0x40004400

08004274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b08b      	sub	sp, #44	; 0x2c
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	2414      	movs	r4, #20
 800427e:	193b      	adds	r3, r7, r4
 8004280:	0018      	movs	r0, r3
 8004282:	2314      	movs	r3, #20
 8004284:	001a      	movs	r2, r3
 8004286:	2100      	movs	r1, #0
 8004288:	f003 fe78 	bl	8007f7c <memset>
  if(uartHandle->Instance==USART2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <HAL_UART_MspInit+0x90>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d132      	bne.n	80042fc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004296:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <HAL_UART_MspInit+0x94>)
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_UART_MspInit+0x94>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	0289      	lsls	r1, r1, #10
 80042a0:	430a      	orrs	r2, r1
 80042a2:	61da      	str	r2, [r3, #28]
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_UART_MspInit+0x94>)
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_UART_MspInit+0x94>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_UART_MspInit+0x94>)
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	0289      	lsls	r1, r1, #10
 80042bc:	430a      	orrs	r2, r1
 80042be:	615a      	str	r2, [r3, #20]
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_UART_MspInit+0x94>)
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80042ce:	0021      	movs	r1, r4
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	220c      	movs	r2, #12
 80042d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	2202      	movs	r2, #2
 80042da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	2200      	movs	r2, #0
 80042e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	2201      	movs	r2, #1
 80042ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ee:	187a      	adds	r2, r7, r1
 80042f0:	2390      	movs	r3, #144	; 0x90
 80042f2:	05db      	lsls	r3, r3, #23
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 f998 	bl	800462c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b00b      	add	sp, #44	; 0x2c
 8004302:	bd90      	pop	{r4, r7, pc}
 8004304:	40004400 	.word	0x40004400
 8004308:	40021000 	.word	0x40021000

0800430c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800430c:	480d      	ldr	r0, [pc, #52]	; (8004344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800430e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <LoopForever+0x6>)
  ldr r1, =_edata
 8004312:	490e      	ldr	r1, [pc, #56]	; (800434c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004314:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <LoopForever+0xe>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004318:	e002      	b.n	8004320 <LoopCopyDataInit>

0800431a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800431c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431e:	3304      	adds	r3, #4

08004320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004324:	d3f9      	bcc.n	800431a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004326:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004328:	4c0b      	ldr	r4, [pc, #44]	; (8004358 <LoopForever+0x16>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800432c:	e001      	b.n	8004332 <LoopFillZerobss>

0800432e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004330:	3204      	adds	r2, #4

08004332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004334:	d3fb      	bcc.n	800432e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004336:	f7ff fd3f 	bl	8003db8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800433a:	f003 fddf 	bl	8007efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800433e:	f7fe ff75 	bl	800322c <main>

08004342 <LoopForever>:

LoopForever:
    b LoopForever
 8004342:	e7fe      	b.n	8004342 <LoopForever>
  ldr   r0, =_estack
 8004344:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800434c:	20000634 	.word	0x20000634
  ldr r2, =_sidata
 8004350:	0800dbd4 	.word	0x0800dbd4
  ldr r2, =_sbss
 8004354:	20000634 	.word	0x20000634
  ldr r4, =_ebss
 8004358:	20000cbc 	.word	0x20000cbc

0800435c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC1_COMP_IRQHandler>
	...

08004360 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_Init+0x24>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_Init+0x24>)
 800436a:	2110      	movs	r1, #16
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004370:	2000      	movs	r0, #0
 8004372:	f000 f809 	bl	8004388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004376:	f7ff fbc9 	bl	8003b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40022000 	.word	0x40022000

08004388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_InitTick+0x5c>)
 8004392:	681c      	ldr	r4, [r3, #0]
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_InitTick+0x60>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	0019      	movs	r1, r3
 800439a:	23fa      	movs	r3, #250	; 0xfa
 800439c:	0098      	lsls	r0, r3, #2
 800439e:	f7fb fecd 	bl	800013c <__udivsi3>
 80043a2:	0003      	movs	r3, r0
 80043a4:	0019      	movs	r1, r3
 80043a6:	0020      	movs	r0, r4
 80043a8:	f7fb fec8 	bl	800013c <__udivsi3>
 80043ac:	0003      	movs	r3, r0
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f92f 	bl	8004612 <HAL_SYSTICK_Config>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d001      	beq.n	80043bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e00f      	b.n	80043dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d80b      	bhi.n	80043da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	2301      	movs	r3, #1
 80043c6:	425b      	negs	r3, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 f8fc 	bl	80045c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_InitTick+0x64>)
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	b003      	add	sp, #12
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	20000458 	.word	0x20000458
 80043e8:	20000460 	.word	0x20000460
 80043ec:	2000045c 	.word	0x2000045c

080043f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_IncTick+0x1c>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	001a      	movs	r2, r3
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_IncTick+0x20>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	18d2      	adds	r2, r2, r3
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_IncTick+0x20>)
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	20000460 	.word	0x20000460
 8004410:	20000ca8 	.word	0x20000ca8

08004414 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  return uwTick;
 8004418:	4b02      	ldr	r3, [pc, #8]	; (8004424 <HAL_GetTick+0x10>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000ca8 	.word	0x20000ca8

08004428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004430:	f7ff fff0 	bl	8004414 <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	d005      	beq.n	800444e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_Delay+0x44>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	001a      	movs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	189b      	adds	r3, r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	f7ff ffe0 	bl	8004414 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d8f7      	bhi.n	8004450 <HAL_Delay+0x28>
  {
  }
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b004      	add	sp, #16
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	20000460 	.word	0x20000460

08004470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	0002      	movs	r2, r0
 8004478:	1dfb      	adds	r3, r7, #7
 800447a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b7f      	cmp	r3, #127	; 0x7f
 8004482:	d809      	bhi.n	8004498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004484:	1dfb      	adds	r3, r7, #7
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	001a      	movs	r2, r3
 800448a:	231f      	movs	r3, #31
 800448c:	401a      	ands	r2, r3
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__NVIC_EnableIRQ+0x30>)
 8004490:	2101      	movs	r1, #1
 8004492:	4091      	lsls	r1, r2
 8004494:	000a      	movs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
  }
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000e100 	.word	0xe000e100

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	0002      	movs	r2, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b7f      	cmp	r3, #127	; 0x7f
 80044b8:	d828      	bhi.n	800450c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <__NVIC_SetPriority+0xd4>)
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	33c0      	adds	r3, #192	; 0xc0
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	589b      	ldr	r3, [r3, r2]
 80044ca:	1dfa      	adds	r2, r7, #7
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	0011      	movs	r1, r2
 80044d0:	2203      	movs	r2, #3
 80044d2:	400a      	ands	r2, r1
 80044d4:	00d2      	lsls	r2, r2, #3
 80044d6:	21ff      	movs	r1, #255	; 0xff
 80044d8:	4091      	lsls	r1, r2
 80044da:	000a      	movs	r2, r1
 80044dc:	43d2      	mvns	r2, r2
 80044de:	401a      	ands	r2, r3
 80044e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	22ff      	movs	r2, #255	; 0xff
 80044e8:	401a      	ands	r2, r3
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	0018      	movs	r0, r3
 80044f0:	2303      	movs	r3, #3
 80044f2:	4003      	ands	r3, r0
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044f8:	481f      	ldr	r0, [pc, #124]	; (8004578 <__NVIC_SetPriority+0xd4>)
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	430a      	orrs	r2, r1
 8004504:	33c0      	adds	r3, #192	; 0xc0
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800450a:	e031      	b.n	8004570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <__NVIC_SetPriority+0xd8>)
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	0019      	movs	r1, r3
 8004514:	230f      	movs	r3, #15
 8004516:	400b      	ands	r3, r1
 8004518:	3b08      	subs	r3, #8
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3306      	adds	r3, #6
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	3304      	adds	r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1dfa      	adds	r2, r7, #7
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	0011      	movs	r1, r2
 800452c:	2203      	movs	r2, #3
 800452e:	400a      	ands	r2, r1
 8004530:	00d2      	lsls	r2, r2, #3
 8004532:	21ff      	movs	r1, #255	; 0xff
 8004534:	4091      	lsls	r1, r2
 8004536:	000a      	movs	r2, r1
 8004538:	43d2      	mvns	r2, r2
 800453a:	401a      	ands	r2, r3
 800453c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	22ff      	movs	r2, #255	; 0xff
 8004544:	401a      	ands	r2, r3
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	0018      	movs	r0, r3
 800454c:	2303      	movs	r3, #3
 800454e:	4003      	ands	r3, r0
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004554:	4809      	ldr	r0, [pc, #36]	; (800457c <__NVIC_SetPriority+0xd8>)
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	001c      	movs	r4, r3
 800455c:	230f      	movs	r3, #15
 800455e:	4023      	ands	r3, r4
 8004560:	3b08      	subs	r3, #8
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	430a      	orrs	r2, r1
 8004566:	3306      	adds	r3, #6
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	18c3      	adds	r3, r0, r3
 800456c:	3304      	adds	r3, #4
 800456e:	601a      	str	r2, [r3, #0]
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b003      	add	sp, #12
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1e5a      	subs	r2, r3, #1
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	045b      	lsls	r3, r3, #17
 8004590:	429a      	cmp	r2, r3
 8004592:	d301      	bcc.n	8004598 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004594:	2301      	movs	r3, #1
 8004596:	e010      	b.n	80045ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <SysTick_Config+0x44>)
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	3a01      	subs	r2, #1
 800459e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045a0:	2301      	movs	r3, #1
 80045a2:	425b      	negs	r3, r3
 80045a4:	2103      	movs	r1, #3
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7ff ff7c 	bl	80044a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <SysTick_Config+0x44>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <SysTick_Config+0x44>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	e000e010 	.word	0xe000e010

080045c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	210f      	movs	r1, #15
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	1c02      	adds	r2, r0, #0
 80045d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	0011      	movs	r1, r2
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff ff5d 	bl	80044a4 <__NVIC_SetPriority>
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	0002      	movs	r2, r0
 80045fa:	1dfb      	adds	r3, r7, #7
 80045fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045fe:	1dfb      	adds	r3, r7, #7
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b25b      	sxtb	r3, r3
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff33 	bl	8004470 <__NVIC_EnableIRQ>
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff ffaf 	bl	8004580 <SysTick_Config>
 8004622:	0003      	movs	r3, r0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800463a:	e155      	b.n	80048e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2101      	movs	r1, #1
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4091      	lsls	r1, r2
 8004646:	000a      	movs	r2, r1
 8004648:	4013      	ands	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d100      	bne.n	8004654 <HAL_GPIO_Init+0x28>
 8004652:	e146      	b.n	80048e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2203      	movs	r2, #3
 800465a:	4013      	ands	r3, r2
 800465c:	2b01      	cmp	r3, #1
 800465e:	d005      	beq.n	800466c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004668:	2b02      	cmp	r3, #2
 800466a:	d130      	bne.n	80046ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	2203      	movs	r2, #3
 8004678:	409a      	lsls	r2, r3
 800467a:	0013      	movs	r3, r2
 800467c:	43da      	mvns	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	409a      	lsls	r2, r3
 800468e:	0013      	movs	r3, r2
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a2:	2201      	movs	r2, #1
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
 80046a8:	0013      	movs	r3, r2
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	2201      	movs	r2, #1
 80046ba:	401a      	ands	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d017      	beq.n	800470a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2203      	movs	r2, #3
 80046e6:	409a      	lsls	r2, r3
 80046e8:	0013      	movs	r3, r2
 80046ea:	43da      	mvns	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	4013      	ands	r3, r2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d123      	bne.n	800475e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	08da      	lsrs	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3208      	adds	r2, #8
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	58d3      	ldr	r3, [r2, r3]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2207      	movs	r2, #7
 8004728:	4013      	ands	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	220f      	movs	r2, #15
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	43da      	mvns	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2107      	movs	r1, #7
 8004742:	400b      	ands	r3, r1
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	08da      	lsrs	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3208      	adds	r2, #8
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2203      	movs	r2, #3
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	43da      	mvns	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2203      	movs	r2, #3
 800477c:	401a      	ands	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	23c0      	movs	r3, #192	; 0xc0
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	4013      	ands	r3, r2
 800479c:	d100      	bne.n	80047a0 <HAL_GPIO_Init+0x174>
 800479e:	e0a0      	b.n	80048e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a0:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	4b56      	ldr	r3, [pc, #344]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2201      	movs	r2, #1
 80047b2:	4013      	ands	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047b8:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_GPIO_Init+0x2d8>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3302      	adds	r3, #2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	589b      	ldr	r3, [r3, r2]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4013      	ands	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	220f      	movs	r2, #15
 80047d0:	409a      	lsls	r2, r3
 80047d2:	0013      	movs	r3, r2
 80047d4:	43da      	mvns	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	2390      	movs	r3, #144	; 0x90
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x1ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_GPIO_Init+0x2dc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x1ea>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_GPIO_Init+0x2e0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x1e6>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a45      	ldr	r2, [pc, #276]	; (8004910 <HAL_GPIO_Init+0x2e4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x1e2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a44      	ldr	r2, [pc, #272]	; (8004914 <HAL_GPIO_Init+0x2e8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x1de>
 8004806:	2304      	movs	r3, #4
 8004808:	e008      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800480a:	2305      	movs	r3, #5
 800480c:	e006      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800480e:	2303      	movs	r3, #3
 8004810:	e004      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 8004812:	2302      	movs	r3, #2
 8004814:	e002      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800481a:	2300      	movs	r3, #0
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	2103      	movs	r1, #3
 8004820:	400a      	ands	r2, r1
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	4093      	lsls	r3, r2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800482c:	4935      	ldr	r1, [pc, #212]	; (8004904 <HAL_GPIO_Init+0x2d8>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	43da      	mvns	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	4013      	ands	r3, r2
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004864:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	43da      	mvns	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	4013      	ands	r3, r2
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004888:	4b23      	ldr	r3, [pc, #140]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43da      	mvns	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	035b      	lsls	r3, r3, #13
 80048a6:	4013      	ands	r3, r2
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	039b      	lsls	r3, r3, #14
 80048d0:	4013      	ands	r3, r2
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	40da      	lsrs	r2, r3
 80048f0:	1e13      	subs	r3, r2, #0
 80048f2:	d000      	beq.n	80048f6 <HAL_GPIO_Init+0x2ca>
 80048f4:	e6a2      	b.n	800463c <HAL_GPIO_Init+0x10>
  } 
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	40010000 	.word	0x40010000
 8004908:	48000400 	.word	0x48000400
 800490c:	48000800 	.word	0x48000800
 8004910:	48000c00 	.word	0x48000c00
 8004914:	48001000 	.word	0x48001000
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	000a      	movs	r2, r1
 8004926:	1cbb      	adds	r3, r7, #2
 8004928:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	1cba      	adds	r2, r7, #2
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004936:	230f      	movs	r3, #15
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e003      	b.n	8004948 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004940:	230f      	movs	r3, #15
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004948:	230f      	movs	r3, #15
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
  }
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	0008      	movs	r0, r1
 8004960:	0011      	movs	r1, r2
 8004962:	1cbb      	adds	r3, r7, #2
 8004964:	1c02      	adds	r2, r0, #0
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	1c7b      	adds	r3, r7, #1
 800496a:	1c0a      	adds	r2, r1, #0
 800496c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800496e:	1c7b      	adds	r3, r7, #1
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004976:	1cbb      	adds	r3, r7, #2
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800497e:	e003      	b.n	8004988 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004980:	1cbb      	adds	r3, r7, #2
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e082      	b.n	8004aa8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fe fb0b 	bl	8002fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2241      	movs	r2, #65	; 0x41
 80049c2:	2124      	movs	r1, #36	; 0x24
 80049c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	438a      	bics	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_I2C_Init+0x120>)
 80049e0:	400a      	ands	r2, r1
 80049e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4931      	ldr	r1, [pc, #196]	; (8004ab4 <HAL_I2C_Init+0x124>)
 80049f0:	400a      	ands	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d108      	bne.n	8004a0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0209      	lsls	r1, r1, #8
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e007      	b.n	8004a1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2184      	movs	r1, #132	; 0x84
 8004a18:	0209      	lsls	r1, r1, #8
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d104      	bne.n	8004a30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <HAL_I2C_Init+0x128>)
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	491a      	ldr	r1, [pc, #104]	; (8004ab4 <HAL_I2C_Init+0x124>)
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69d9      	ldr	r1, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2241      	movs	r2, #65	; 0x41
 8004a94:	2120      	movs	r1, #32
 8004a96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2242      	movs	r2, #66	; 0x42
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b002      	add	sp, #8
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	f0ffffff 	.word	0xf0ffffff
 8004ab4:	ffff7fff 	.word	0xffff7fff
 8004ab8:	02008000 	.word	0x02008000

08004abc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	0008      	movs	r0, r1
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	0019      	movs	r1, r3
 8004aca:	230a      	movs	r3, #10
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	1c02      	adds	r2, r0, #0
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	1c0a      	adds	r2, r1, #0
 8004ad8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2241      	movs	r2, #65	; 0x41
 8004ade:	5c9b      	ldrb	r3, [r3, r2]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d000      	beq.n	8004ae8 <HAL_I2C_Master_Transmit+0x2c>
 8004ae6:	e0e7      	b.n	8004cb8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	5c9b      	ldrb	r3, [r3, r2]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_I2C_Master_Transmit+0x3a>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e0e1      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2240      	movs	r2, #64	; 0x40
 8004afa:	2101      	movs	r1, #1
 8004afc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004afe:	f7ff fc89 	bl	8004414 <HAL_GetTick>
 8004b02:	0003      	movs	r3, r0
 8004b04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	0219      	lsls	r1, r3, #8
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2319      	movs	r3, #25
 8004b12:	2201      	movs	r2, #1
 8004b14:	f000 fb96 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2241      	movs	r2, #65	; 0x41
 8004b24:	2121      	movs	r1, #33	; 0x21
 8004b26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2242      	movs	r2, #66	; 0x42
 8004b2c:	2110      	movs	r1, #16
 8004b2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2208      	movs	r2, #8
 8004b40:	18ba      	adds	r2, r7, r2
 8004b42:	8812      	ldrh	r2, [r2, #0]
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2bff      	cmp	r3, #255	; 0xff
 8004b54:	d911      	bls.n	8004b7a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	22ff      	movs	r2, #255	; 0xff
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	045c      	lsls	r4, r3, #17
 8004b66:	230a      	movs	r3, #10
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	8819      	ldrh	r1, [r3, #0]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	4b55      	ldr	r3, [pc, #340]	; (8004cc4 <HAL_I2C_Master_Transmit+0x208>)
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	0023      	movs	r3, r4
 8004b74:	f000 fd06 	bl	8005584 <I2C_TransferConfig>
 8004b78:	e075      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	049c      	lsls	r4, r3, #18
 8004b8e:	230a      	movs	r3, #10
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	8819      	ldrh	r1, [r3, #0]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <HAL_I2C_Master_Transmit+0x208>)
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	0023      	movs	r3, r4
 8004b9c:	f000 fcf2 	bl	8005584 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ba0:	e061      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fb8a 	bl	80052c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e081      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d03a      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0x1aa>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d136      	bne.n	8004c66 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	0013      	movs	r3, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	f000 fb1d 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	1e03      	subs	r3, r0, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e053      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2bff      	cmp	r3, #255	; 0xff
 8004c1a:	d911      	bls.n	8004c40 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22ff      	movs	r2, #255	; 0xff
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	045c      	lsls	r4, r3, #17
 8004c2c:	230a      	movs	r3, #10
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	8819      	ldrh	r1, [r3, #0]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	2300      	movs	r3, #0
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	0023      	movs	r3, r4
 8004c3a:	f000 fca3 	bl	8005584 <I2C_TransferConfig>
 8004c3e:	e012      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	049c      	lsls	r4, r3, #18
 8004c54:	230a      	movs	r3, #10
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	8819      	ldrh	r1, [r3, #0]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	0023      	movs	r3, r4
 8004c62:	f000 fc8f 	bl	8005584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d198      	bne.n	8004ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 fb62 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e01a      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <HAL_I2C_Master_Transmit+0x20c>)
 8004c98:	400a      	ands	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2241      	movs	r2, #65	; 0x41
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2242      	movs	r2, #66	; 0x42
 8004ca8:	2100      	movs	r1, #0
 8004caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b007      	add	sp, #28
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	80002000 	.word	0x80002000
 8004cc8:	fe00e800 	.word	0xfe00e800

08004ccc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b089      	sub	sp, #36	; 0x24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	0008      	movs	r0, r1
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	0019      	movs	r1, r3
 8004cda:	230a      	movs	r3, #10
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	1c02      	adds	r2, r0, #0
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	1c0a      	adds	r2, r1, #0
 8004ce8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2241      	movs	r2, #65	; 0x41
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d000      	beq.n	8004cf8 <HAL_I2C_Master_Receive+0x2c>
 8004cf6:	e0e8      	b.n	8004eca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2240      	movs	r2, #64	; 0x40
 8004cfc:	5c9b      	ldrb	r3, [r3, r2]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_Master_Receive+0x3a>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0e2      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2240      	movs	r2, #64	; 0x40
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d0e:	f7ff fb81 	bl	8004414 <HAL_GetTick>
 8004d12:	0003      	movs	r3, r0
 8004d14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	0219      	lsls	r1, r3, #8
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	2319      	movs	r3, #25
 8004d22:	2201      	movs	r2, #1
 8004d24:	f000 fa8e 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	1e03      	subs	r3, r0, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0cd      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2241      	movs	r2, #65	; 0x41
 8004d34:	2122      	movs	r1, #34	; 0x22
 8004d36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2242      	movs	r2, #66	; 0x42
 8004d3c:	2110      	movs	r1, #16
 8004d3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	18ba      	adds	r2, r7, r2
 8004d52:	8812      	ldrh	r2, [r2, #0]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2bff      	cmp	r3, #255	; 0xff
 8004d64:	d911      	bls.n	8004d8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22ff      	movs	r2, #255	; 0xff
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	045c      	lsls	r4, r3, #17
 8004d76:	230a      	movs	r3, #10
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	8819      	ldrh	r1, [r3, #0]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <HAL_I2C_Master_Receive+0x208>)
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	0023      	movs	r3, r4
 8004d84:	f000 fbfe 	bl	8005584 <I2C_TransferConfig>
 8004d88:	e076      	b.n	8004e78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	049c      	lsls	r4, r3, #18
 8004d9e:	230a      	movs	r3, #10
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	8819      	ldrh	r1, [r3, #0]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_I2C_Master_Receive+0x208>)
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	0023      	movs	r3, r4
 8004dac:	f000 fbea 	bl	8005584 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004db0:	e062      	b.n	8004e78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 fafd 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dbe:	1e03      	subs	r3, r0, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e082      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03a      	beq.n	8004e78 <HAL_I2C_Master_Receive+0x1ac>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d136      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	0013      	movs	r3, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	f000 fa14 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004e1c:	1e03      	subs	r3, r0, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e053      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2bff      	cmp	r3, #255	; 0xff
 8004e2c:	d911      	bls.n	8004e52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	045c      	lsls	r4, r3, #17
 8004e3e:	230a      	movs	r3, #10
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	8819      	ldrh	r1, [r3, #0]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	0023      	movs	r3, r4
 8004e4c:	f000 fb9a 	bl	8005584 <I2C_TransferConfig>
 8004e50:	e012      	b.n	8004e78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	049c      	lsls	r4, r3, #18
 8004e66:	230a      	movs	r3, #10
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	8819      	ldrh	r1, [r3, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	0023      	movs	r3, r4
 8004e74:	f000 fb86 	bl	8005584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d197      	bne.n	8004db2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 fa59 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e01a      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <HAL_I2C_Master_Receive+0x20c>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2242      	movs	r2, #66	; 0x42
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	0018      	movs	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b007      	add	sp, #28
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	80002400 	.word	0x80002400
 8004ed8:	fe00e800 	.word	0xfe00e800

08004edc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b089      	sub	sp, #36	; 0x24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	000c      	movs	r4, r1
 8004ee6:	0010      	movs	r0, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	230a      	movs	r3, #10
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	1c22      	adds	r2, r4, #0
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	1c02      	adds	r2, r0, #0
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	1dbb      	adds	r3, r7, #6
 8004efc:	1c0a      	adds	r2, r1, #0
 8004efe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2241      	movs	r2, #65	; 0x41
 8004f04:	5c9b      	ldrb	r3, [r3, r2]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d000      	beq.n	8004f0e <HAL_I2C_Mem_Write+0x32>
 8004f0c:	e10c      	b.n	8005128 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_I2C_Mem_Write+0x42>
 8004f14:	232c      	movs	r3, #44	; 0x2c
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0ff      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_I2C_Mem_Write+0x5c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0f8      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f40:	f7ff fa68 	bl	8004414 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	0219      	lsls	r1, r3, #8
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2319      	movs	r3, #25
 8004f54:	2201      	movs	r2, #1
 8004f56:	f000 f975 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e0e3      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2241      	movs	r2, #65	; 0x41
 8004f66:	2121      	movs	r1, #33	; 0x21
 8004f68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2242      	movs	r2, #66	; 0x42
 8004f6e:	2140      	movs	r1, #64	; 0x40
 8004f70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	222c      	movs	r2, #44	; 0x2c
 8004f82:	18ba      	adds	r2, r7, r2
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f8e:	1dbb      	adds	r3, r7, #6
 8004f90:	881c      	ldrh	r4, [r3, #0]
 8004f92:	2308      	movs	r3, #8
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	881a      	ldrh	r2, [r3, #0]
 8004f98:	230a      	movs	r3, #10
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	8819      	ldrh	r1, [r3, #0]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	0023      	movs	r3, r4
 8004faa:	f000 f8c5 	bl	8005138 <I2C_RequestMemoryWrite>
 8004fae:	1e03      	subs	r3, r0, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0b5      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2bff      	cmp	r3, #255	; 0xff
 8004fc6:	d911      	bls.n	8004fec <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	045c      	lsls	r4, r3, #17
 8004fd8:	230a      	movs	r3, #10
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	8819      	ldrh	r1, [r3, #0]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	0023      	movs	r3, r4
 8004fe6:	f000 facd 	bl	8005584 <I2C_TransferConfig>
 8004fea:	e012      	b.n	8005012 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	049c      	lsls	r4, r3, #18
 8005000:	230a      	movs	r3, #10
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	8819      	ldrh	r1, [r3, #0]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	0023      	movs	r3, r4
 800500e:	f000 fab9 	bl	8005584 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	0018      	movs	r0, r3
 800501a:	f000 f952 	bl	80052c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e081      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d03a      	beq.n	80050d6 <HAL_I2C_Mem_Write+0x1fa>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d136      	bne.n	80050d6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	0013      	movs	r3, r2
 8005072:	2200      	movs	r2, #0
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	f000 f8e5 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 800507a:	1e03      	subs	r3, r0, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e053      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2bff      	cmp	r3, #255	; 0xff
 800508a:	d911      	bls.n	80050b0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	045c      	lsls	r4, r3, #17
 800509c:	230a      	movs	r3, #10
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	8819      	ldrh	r1, [r3, #0]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	0023      	movs	r3, r4
 80050aa:	f000 fa6b 	bl	8005584 <I2C_TransferConfig>
 80050ae:	e012      	b.n	80050d6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	049c      	lsls	r4, r3, #18
 80050c4:	230a      	movs	r3, #10
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	8819      	ldrh	r1, [r3, #0]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	0023      	movs	r3, r4
 80050d2:	f000 fa57 	bl	8005584 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d198      	bne.n	8005012 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f92a 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050ec:	1e03      	subs	r3, r0, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e01a      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2220      	movs	r2, #32
 80050fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	490b      	ldr	r1, [pc, #44]	; (8005134 <HAL_I2C_Mem_Write+0x258>)
 8005108:	400a      	ands	r2, r1
 800510a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2241      	movs	r2, #65	; 0x41
 8005110:	2120      	movs	r1, #32
 8005112:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2242      	movs	r2, #66	; 0x42
 8005118:	2100      	movs	r1, #0
 800511a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	2100      	movs	r1, #0
 8005122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b007      	add	sp, #28
 8005130:	bd90      	pop	{r4, r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	fe00e800 	.word	0xfe00e800

08005138 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005138:	b5b0      	push	{r4, r5, r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	000c      	movs	r4, r1
 8005142:	0010      	movs	r0, r2
 8005144:	0019      	movs	r1, r3
 8005146:	250a      	movs	r5, #10
 8005148:	197b      	adds	r3, r7, r5
 800514a:	1c22      	adds	r2, r4, #0
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	2308      	movs	r3, #8
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	1c02      	adds	r2, r0, #0
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	1dbb      	adds	r3, r7, #6
 8005158:	1c0a      	adds	r2, r1, #0
 800515a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800515c:	1dbb      	adds	r3, r7, #6
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	045c      	lsls	r4, r3, #17
 8005166:	197b      	adds	r3, r7, r5
 8005168:	8819      	ldrh	r1, [r3, #0]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <I2C_RequestMemoryWrite+0xc4>)
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	0023      	movs	r3, r4
 8005172:	f000 fa07 	bl	8005584 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	6a39      	ldr	r1, [r7, #32]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	0018      	movs	r0, r3
 800517e:	f000 f8a0 	bl	80052c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005182:	1e03      	subs	r3, r0, #0
 8005184:	d001      	beq.n	800518a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e033      	b.n	80051f2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800518a:	1dbb      	adds	r3, r7, #6
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005192:	2308      	movs	r3, #8
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28
 80051a0:	e019      	b.n	80051d6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051a2:	2308      	movs	r3, #8
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	6a39      	ldr	r1, [r7, #32]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 f881 	bl	80052c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051c0:	1e03      	subs	r3, r0, #0
 80051c2:	d001      	beq.n	80051c8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e014      	b.n	80051f2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051c8:	2308      	movs	r3, #8
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	0013      	movs	r3, r2
 80051e0:	2200      	movs	r2, #0
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	f000 f82e 	bl	8005244 <I2C_WaitOnFlagUntilTimeout>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	d001      	beq.n	80051f0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b004      	add	sp, #16
 80051f8:	bdb0      	pop	{r4, r5, r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	80002000 	.word	0x80002000

08005200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2202      	movs	r2, #2
 8005210:	4013      	ands	r3, r2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d103      	bne.n	800521e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	2b01      	cmp	r3, #1
 800522a:	d007      	beq.n	800523c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2101      	movs	r1, #1
 8005238:	430a      	orrs	r2, r1
 800523a:	619a      	str	r2, [r3, #24]
  }
}
 800523c:	46c0      	nop			; (mov r8, r8)
 800523e:	46bd      	mov	sp, r7
 8005240:	b002      	add	sp, #8
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	e021      	b.n	800529a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	d01e      	beq.n	800529a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7ff f8da 	bl	8004414 <HAL_GetTick>
 8005260:	0002      	movs	r2, r0
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d113      	bne.n	800529a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	2220      	movs	r2, #32
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2241      	movs	r2, #65	; 0x41
 8005282:	2120      	movs	r1, #32
 8005284:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2242      	movs	r2, #66	; 0x42
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2240      	movs	r2, #64	; 0x40
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e00f      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	425a      	negs	r2, r3
 80052aa:	4153      	adcs	r3, r2
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	001a      	movs	r2, r3
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d0ce      	beq.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	0018      	movs	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	b004      	add	sp, #16
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052ce:	e02b      	b.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	0018      	movs	r0, r3
 80052d8:	f000 f8da 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80052dc:	1e03      	subs	r3, r0, #0
 80052de:	d001      	beq.n	80052e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e029      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3301      	adds	r3, #1
 80052e8:	d01e      	beq.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7ff f893 	bl	8004414 <HAL_GetTick>
 80052ee:	0002      	movs	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	2220      	movs	r2, #32
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2241      	movs	r2, #65	; 0x41
 8005310:	2120      	movs	r1, #32
 8005312:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2242      	movs	r2, #66	; 0x42
 8005318:	2100      	movs	r1, #0
 800531a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2240      	movs	r2, #64	; 0x40
 8005320:	2100      	movs	r1, #0
 8005322:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e007      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2202      	movs	r2, #2
 8005330:	4013      	ands	r3, r2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d1cc      	bne.n	80052d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b004      	add	sp, #16
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534c:	e028      	b.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 f89b 	bl	8005490 <I2C_IsAcknowledgeFailed>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e026      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7ff f857 	bl	8004414 <HAL_GetTick>
 8005366:	0002      	movs	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	2220      	movs	r2, #32
 800537e:	431a      	orrs	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2241      	movs	r2, #65	; 0x41
 8005388:	2120      	movs	r1, #32
 800538a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2242      	movs	r2, #66	; 0x42
 8005390:	2100      	movs	r1, #0
 8005392:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2220      	movs	r2, #32
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d1cf      	bne.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b004      	add	sp, #16
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e055      	b.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 f85f 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80053d2:	1e03      	subs	r3, r0, #0
 80053d4:	d001      	beq.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e053      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2220      	movs	r2, #32
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d129      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2204      	movs	r2, #4
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d105      	bne.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e03f      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2220      	movs	r2, #32
 8005408:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	491d      	ldr	r1, [pc, #116]	; (800548c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005416:	400a      	ands	r2, r1
 8005418:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2241      	movs	r2, #65	; 0x41
 8005424:	2120      	movs	r1, #32
 8005426:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2242      	movs	r2, #66	; 0x42
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2240      	movs	r2, #64	; 0x40
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e022      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fe ffea 	bl	8004414 <HAL_GetTick>
 8005440:	0002      	movs	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	2220      	movs	r2, #32
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	2120      	movs	r1, #32
 8005464:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	2100      	movs	r1, #0
 800546c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2204      	movs	r2, #4
 800547a:	4013      	ands	r3, r2
 800547c:	2b04      	cmp	r3, #4
 800547e:	d1a2      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b004      	add	sp, #16
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2210      	movs	r2, #16
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d164      	bne.n	8005574 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	049b      	lsls	r3, r3, #18
 80054b4:	401a      	ands	r2, r3
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	049b      	lsls	r3, r3, #18
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d02b      	beq.n	8005516 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	01c9      	lsls	r1, r1, #7
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d0:	e021      	b.n	8005516 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3301      	adds	r3, #1
 80054d6:	d01e      	beq.n	8005516 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d8:	f7fe ff9c 	bl	8004414 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <I2C_IsAcknowledgeFailed+0x5e>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d113      	bne.n	8005516 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	2220      	movs	r2, #32
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2241      	movs	r2, #65	; 0x41
 80054fe:	2120      	movs	r1, #32
 8005500:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2242      	movs	r2, #66	; 0x42
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2240      	movs	r2, #64	; 0x40
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e02f      	b.n	8005576 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2220      	movs	r2, #32
 800551e:	4013      	ands	r3, r2
 8005520:	2b20      	cmp	r3, #32
 8005522:	d1d6      	bne.n	80054d2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2210      	movs	r2, #16
 800552a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2220      	movs	r2, #32
 8005532:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	0018      	movs	r0, r3
 8005538:	f7ff fe62 	bl	8005200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	490e      	ldr	r1, [pc, #56]	; (8005580 <I2C_IsAcknowledgeFailed+0xf0>)
 8005548:	400a      	ands	r2, r1
 800554a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	2204      	movs	r2, #4
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2241      	movs	r2, #65	; 0x41
 800555c:	2120      	movs	r1, #32
 800555e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2242      	movs	r2, #66	; 0x42
 8005564:	2100      	movs	r1, #0
 8005566:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2240      	movs	r2, #64	; 0x40
 800556c:	2100      	movs	r1, #0
 800556e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	fe00e800 	.word	0xfe00e800

08005584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	0008      	movs	r0, r1
 800558e:	0011      	movs	r1, r2
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	240a      	movs	r4, #10
 8005594:	193b      	adds	r3, r7, r4
 8005596:	1c02      	adds	r2, r0, #0
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	2009      	movs	r0, #9
 800559c:	183b      	adds	r3, r7, r0
 800559e:	1c0a      	adds	r2, r1, #0
 80055a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	0d51      	lsrs	r1, r2, #21
 80055ac:	2280      	movs	r2, #128	; 0x80
 80055ae:	00d2      	lsls	r2, r2, #3
 80055b0:	400a      	ands	r2, r1
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <I2C_TransferConfig+0x68>)
 80055b4:	430a      	orrs	r2, r1
 80055b6:	43d2      	mvns	r2, r2
 80055b8:	401a      	ands	r2, r3
 80055ba:	0011      	movs	r1, r2
 80055bc:	193b      	adds	r3, r7, r4
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	059b      	lsls	r3, r3, #22
 80055c2:	0d9a      	lsrs	r2, r3, #22
 80055c4:	183b      	adds	r3, r7, r0
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	0418      	lsls	r0, r3, #16
 80055ca:	23ff      	movs	r3, #255	; 0xff
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4003      	ands	r3, r0
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b005      	add	sp, #20
 80055e8:	bd90      	pop	{r4, r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	03ff63ff 	.word	0x03ff63ff

080055f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2241      	movs	r2, #65	; 0x41
 80055fe:	5c9b      	ldrb	r3, [r3, r2]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d138      	bne.n	8005678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	5c9b      	ldrb	r3, [r3, r2]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005610:	2302      	movs	r3, #2
 8005612:	e032      	b.n	800567a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	2101      	movs	r1, #1
 800561a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2241      	movs	r2, #65	; 0x41
 8005620:	2124      	movs	r1, #36	; 0x24
 8005622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2101      	movs	r1, #1
 8005630:	438a      	bics	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4911      	ldr	r1, [pc, #68]	; (8005684 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005640:	400a      	ands	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2241      	movs	r2, #65	; 0x41
 8005668:	2120      	movs	r1, #32
 800566a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	2100      	movs	r1, #0
 8005672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	0018      	movs	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	ffffefff 	.word	0xffffefff

08005688 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2241      	movs	r2, #65	; 0x41
 8005696:	5c9b      	ldrb	r3, [r3, r2]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	d139      	bne.n	8005712 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2240      	movs	r2, #64	; 0x40
 80056a2:	5c9b      	ldrb	r3, [r3, r2]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e033      	b.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2240      	movs	r2, #64	; 0x40
 80056b0:	2101      	movs	r1, #1
 80056b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2241      	movs	r2, #65	; 0x41
 80056b8:	2124      	movs	r1, #36	; 0x24
 80056ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2101      	movs	r1, #1
 80056c8:	438a      	bics	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a11      	ldr	r2, [pc, #68]	; (800571c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2101      	movs	r1, #1
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2241      	movs	r2, #65	; 0x41
 8005702:	2120      	movs	r1, #32
 8005704:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2240      	movs	r2, #64	; 0x40
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}
 800571c:	fffff0ff 	.word	0xfffff0ff

08005720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f000 fb76 	bl	8005e20 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2201      	movs	r2, #1
 800573a:	4013      	ands	r3, r2
 800573c:	d100      	bne.n	8005740 <HAL_RCC_OscConfig+0x20>
 800573e:	e08e      	b.n	800585e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005740:	4bc5      	ldr	r3, [pc, #788]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	220c      	movs	r2, #12
 8005746:	4013      	ands	r3, r2
 8005748:	2b04      	cmp	r3, #4
 800574a:	d00e      	beq.n	800576a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800574c:	4bc2      	ldr	r3, [pc, #776]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	220c      	movs	r2, #12
 8005752:	4013      	ands	r3, r2
 8005754:	2b08      	cmp	r3, #8
 8005756:	d117      	bne.n	8005788 <HAL_RCC_OscConfig+0x68>
 8005758:	4bbf      	ldr	r3, [pc, #764]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	23c0      	movs	r3, #192	; 0xc0
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	401a      	ands	r2, r3
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	025b      	lsls	r3, r3, #9
 8005766:	429a      	cmp	r2, r3
 8005768:	d10e      	bne.n	8005788 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576a:	4bbb      	ldr	r3, [pc, #748]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	029b      	lsls	r3, r3, #10
 8005772:	4013      	ands	r3, r2
 8005774:	d100      	bne.n	8005778 <HAL_RCC_OscConfig+0x58>
 8005776:	e071      	b.n	800585c <HAL_RCC_OscConfig+0x13c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d000      	beq.n	8005782 <HAL_RCC_OscConfig+0x62>
 8005780:	e06c      	b.n	800585c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f000 fb4c 	bl	8005e20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x80>
 8005790:	4bb1      	ldr	r3, [pc, #708]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4bb0      	ldr	r3, [pc, #704]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005796:	2180      	movs	r1, #128	; 0x80
 8005798:	0249      	lsls	r1, r1, #9
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e02f      	b.n	8005800 <HAL_RCC_OscConfig+0xe0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0xa2>
 80057a8:	4bab      	ldr	r3, [pc, #684]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4baa      	ldr	r3, [pc, #680]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057ae:	49ab      	ldr	r1, [pc, #684]	; (8005a5c <HAL_RCC_OscConfig+0x33c>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	4ba8      	ldr	r3, [pc, #672]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4ba7      	ldr	r3, [pc, #668]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057ba:	49a9      	ldr	r1, [pc, #676]	; (8005a60 <HAL_RCC_OscConfig+0x340>)
 80057bc:	400a      	ands	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e01e      	b.n	8005800 <HAL_RCC_OscConfig+0xe0>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d10e      	bne.n	80057e8 <HAL_RCC_OscConfig+0xc8>
 80057ca:	4ba3      	ldr	r3, [pc, #652]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4ba2      	ldr	r3, [pc, #648]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	02c9      	lsls	r1, r1, #11
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	4b9f      	ldr	r3, [pc, #636]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b9e      	ldr	r3, [pc, #632]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	0249      	lsls	r1, r1, #9
 80057e2:	430a      	orrs	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0xe0>
 80057e8:	4b9b      	ldr	r3, [pc, #620]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b9a      	ldr	r3, [pc, #616]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057ee:	499b      	ldr	r1, [pc, #620]	; (8005a5c <HAL_RCC_OscConfig+0x33c>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	4b98      	ldr	r3, [pc, #608]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b97      	ldr	r3, [pc, #604]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80057fa:	4999      	ldr	r1, [pc, #612]	; (8005a60 <HAL_RCC_OscConfig+0x340>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d014      	beq.n	8005832 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fe fe04 	bl	8004414 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005812:	f7fe fdff 	bl	8004414 <HAL_GetTick>
 8005816:	0002      	movs	r2, r0
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b64      	cmp	r3, #100	; 0x64
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e2fd      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005824:	4b8c      	ldr	r3, [pc, #560]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	4013      	ands	r3, r2
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0xf2>
 8005830:	e015      	b.n	800585e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005832:	f7fe fdef 	bl	8004414 <HAL_GetTick>
 8005836:	0003      	movs	r3, r0
 8005838:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583c:	f7fe fdea 	bl	8004414 <HAL_GetTick>
 8005840:	0002      	movs	r2, r0
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e2e8      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584e:	4b82      	ldr	r3, [pc, #520]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	4013      	ands	r3, r2
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x11c>
 800585a:	e000      	b.n	800585e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2202      	movs	r2, #2
 8005864:	4013      	ands	r3, r2
 8005866:	d100      	bne.n	800586a <HAL_RCC_OscConfig+0x14a>
 8005868:	e06c      	b.n	8005944 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800586a:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	220c      	movs	r2, #12
 8005870:	4013      	ands	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005874:	4b78      	ldr	r3, [pc, #480]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	220c      	movs	r2, #12
 800587a:	4013      	ands	r3, r2
 800587c:	2b08      	cmp	r3, #8
 800587e:	d11f      	bne.n	80058c0 <HAL_RCC_OscConfig+0x1a0>
 8005880:	4b75      	ldr	r3, [pc, #468]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	23c0      	movs	r3, #192	; 0xc0
 8005886:	025b      	lsls	r3, r3, #9
 8005888:	401a      	ands	r2, r3
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	429a      	cmp	r2, r3
 8005890:	d116      	bne.n	80058c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	4b71      	ldr	r3, [pc, #452]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2202      	movs	r2, #2
 8005898:	4013      	ands	r3, r2
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x188>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e2bb      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b6b      	ldr	r3, [pc, #428]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	22f8      	movs	r2, #248	; 0xf8
 80058ae:	4393      	bics	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00da      	lsls	r2, r3, #3
 80058b8:	4b67      	ldr	r3, [pc, #412]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	e041      	b.n	8005944 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d024      	beq.n	8005912 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c8:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058ce:	2101      	movs	r1, #1
 80058d0:	430a      	orrs	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fe fd9e 	bl	8004414 <HAL_GetTick>
 80058d8:	0003      	movs	r3, r0
 80058da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058de:	f7fe fd99 	bl	8004414 <HAL_GetTick>
 80058e2:	0002      	movs	r2, r0
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e297      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f0:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2202      	movs	r2, #2
 80058f6:	4013      	ands	r3, r2
 80058f8:	d0f1      	beq.n	80058de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fa:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	22f8      	movs	r2, #248	; 0xf8
 8005900:	4393      	bics	r3, r2
 8005902:	0019      	movs	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	00da      	lsls	r2, r3, #3
 800590a:	4b53      	ldr	r3, [pc, #332]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e018      	b.n	8005944 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005912:	4b51      	ldr	r3, [pc, #324]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b50      	ldr	r3, [pc, #320]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005918:	2101      	movs	r1, #1
 800591a:	438a      	bics	r2, r1
 800591c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fe fd79 	bl	8004414 <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005928:	f7fe fd74 	bl	8004414 <HAL_GetTick>
 800592c:	0002      	movs	r2, r0
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e272      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2202      	movs	r2, #2
 8005940:	4013      	ands	r3, r2
 8005942:	d1f1      	bne.n	8005928 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2208      	movs	r2, #8
 800594a:	4013      	ands	r3, r2
 800594c:	d036      	beq.n	80059bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d019      	beq.n	800598a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005956:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595a:	4b3f      	ldr	r3, [pc, #252]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800595c:	2101      	movs	r1, #1
 800595e:	430a      	orrs	r2, r1
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005962:	f7fe fd57 	bl	8004414 <HAL_GetTick>
 8005966:	0003      	movs	r3, r0
 8005968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800596c:	f7fe fd52 	bl	8004414 <HAL_GetTick>
 8005970:	0002      	movs	r2, r0
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e250      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2202      	movs	r2, #2
 8005984:	4013      	ands	r3, r2
 8005986:	d0f1      	beq.n	800596c <HAL_RCC_OscConfig+0x24c>
 8005988:	e018      	b.n	80059bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 800598c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598e:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005990:	2101      	movs	r1, #1
 8005992:	438a      	bics	r2, r1
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005996:	f7fe fd3d 	bl	8004414 <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a0:	f7fe fd38 	bl	8004414 <HAL_GetTick>
 80059a4:	0002      	movs	r2, r0
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e236      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2202      	movs	r2, #2
 80059b8:	4013      	ands	r3, r2
 80059ba:	d1f1      	bne.n	80059a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2204      	movs	r2, #4
 80059c2:	4013      	ands	r3, r2
 80059c4:	d100      	bne.n	80059c8 <HAL_RCC_OscConfig+0x2a8>
 80059c6:	e0b5      	b.n	8005b34 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c8:	201f      	movs	r0, #31
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d0:	4b21      	ldr	r3, [pc, #132]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	055b      	lsls	r3, r3, #21
 80059d8:	4013      	ands	r3, r2
 80059da:	d110      	bne.n	80059fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059dc:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	0549      	lsls	r1, r1, #21
 80059e6:	430a      	orrs	r2, r1
 80059e8:	61da      	str	r2, [r3, #28]
 80059ea:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	055b      	lsls	r3, r3, #21
 80059f2:	4013      	ands	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059f8:	183b      	adds	r3, r7, r0
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_RCC_OscConfig+0x344>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4013      	ands	r3, r2
 8005a08:	d11a      	bne.n	8005a40 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a0a:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <HAL_RCC_OscConfig+0x344>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <HAL_RCC_OscConfig+0x344>)
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	0049      	lsls	r1, r1, #1
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a18:	f7fe fcfc 	bl	8004414 <HAL_GetTick>
 8005a1c:	0003      	movs	r3, r0
 8005a1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a22:	f7fe fcf7 	bl	8004414 <HAL_GetTick>
 8005a26:	0002      	movs	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b64      	cmp	r3, #100	; 0x64
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e1f5      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_OscConfig+0x344>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10f      	bne.n	8005a68 <HAL_RCC_OscConfig+0x348>
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <HAL_RCC_OscConfig+0x338>)
 8005a4e:	2101      	movs	r1, #1
 8005a50:	430a      	orrs	r2, r1
 8005a52:	621a      	str	r2, [r3, #32]
 8005a54:	e036      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3a4>
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	fffeffff 	.word	0xfffeffff
 8005a60:	fffbffff 	.word	0xfffbffff
 8005a64:	40007000 	.word	0x40007000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <HAL_RCC_OscConfig+0x36a>
 8005a70:	4bca      	ldr	r3, [pc, #808]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	4bc9      	ldr	r3, [pc, #804]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a76:	2101      	movs	r1, #1
 8005a78:	438a      	bics	r2, r1
 8005a7a:	621a      	str	r2, [r3, #32]
 8005a7c:	4bc7      	ldr	r3, [pc, #796]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	4bc6      	ldr	r3, [pc, #792]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a82:	2104      	movs	r1, #4
 8005a84:	438a      	bics	r2, r1
 8005a86:	621a      	str	r2, [r3, #32]
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3a4>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x38c>
 8005a92:	4bc2      	ldr	r3, [pc, #776]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	4bc1      	ldr	r3, [pc, #772]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005a98:	2104      	movs	r1, #4
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	621a      	str	r2, [r3, #32]
 8005a9e:	4bbf      	ldr	r3, [pc, #764]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	4bbe      	ldr	r3, [pc, #760]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	621a      	str	r2, [r3, #32]
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3a4>
 8005aac:	4bbb      	ldr	r3, [pc, #748]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	4bba      	ldr	r3, [pc, #744]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	438a      	bics	r2, r1
 8005ab6:	621a      	str	r2, [r3, #32]
 8005ab8:	4bb8      	ldr	r3, [pc, #736]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	4bb7      	ldr	r3, [pc, #732]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005abe:	2104      	movs	r1, #4
 8005ac0:	438a      	bics	r2, r1
 8005ac2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d014      	beq.n	8005af6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005acc:	f7fe fca2 	bl	8004414 <HAL_GetTick>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	e009      	b.n	8005aea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fe fc9d 	bl	8004414 <HAL_GetTick>
 8005ada:	0002      	movs	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	4aaf      	ldr	r2, [pc, #700]	; (8005da0 <HAL_RCC_OscConfig+0x680>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e19a      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aea:	4bac      	ldr	r3, [pc, #688]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	2202      	movs	r2, #2
 8005af0:	4013      	ands	r3, r2
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x3b6>
 8005af4:	e013      	b.n	8005b1e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fe fc8d 	bl	8004414 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fe fc88 	bl	8004414 <HAL_GetTick>
 8005b04:	0002      	movs	r2, r0
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	4aa5      	ldr	r2, [pc, #660]	; (8005da0 <HAL_RCC_OscConfig+0x680>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e185      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	4ba1      	ldr	r3, [pc, #644]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b1e:	231f      	movs	r3, #31
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b9c      	ldr	r3, [pc, #624]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	4b9b      	ldr	r3, [pc, #620]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b2e:	499d      	ldr	r1, [pc, #628]	; (8005da4 <HAL_RCC_OscConfig+0x684>)
 8005b30:	400a      	ands	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2210      	movs	r2, #16
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d063      	beq.n	8005c06 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d12a      	bne.n	8005b9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b46:	4b95      	ldr	r3, [pc, #596]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4a:	4b94      	ldr	r3, [pc, #592]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005b52:	4b92      	ldr	r3, [pc, #584]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	4b91      	ldr	r3, [pc, #580]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b58:	2101      	movs	r1, #1
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5e:	f7fe fc59 	bl	8004414 <HAL_GetTick>
 8005b62:	0003      	movs	r3, r0
 8005b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b68:	f7fe fc54 	bl	8004414 <HAL_GetTick>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e152      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b7a:	4b88      	ldr	r3, [pc, #544]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	2202      	movs	r2, #2
 8005b80:	4013      	ands	r3, r2
 8005b82:	d0f1      	beq.n	8005b68 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b84:	4b85      	ldr	r3, [pc, #532]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	22f8      	movs	r2, #248	; 0xf8
 8005b8a:	4393      	bics	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	00da      	lsls	r2, r3, #3
 8005b94:	4b81      	ldr	r3, [pc, #516]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005b96:	430a      	orrs	r2, r1
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34
 8005b9a:	e034      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	3305      	adds	r3, #5
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005ba4:	4b7d      	ldr	r3, [pc, #500]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005baa:	2104      	movs	r1, #4
 8005bac:	438a      	bics	r2, r1
 8005bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005bb0:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	22f8      	movs	r2, #248	; 0xf8
 8005bb6:	4393      	bics	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	00da      	lsls	r2, r3, #3
 8005bc0:	4b76      	ldr	r3, [pc, #472]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8005bc6:	e01e      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bc8:	4b74      	ldr	r3, [pc, #464]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bcc:	4b73      	ldr	r3, [pc, #460]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bce:	2104      	movs	r1, #4
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005bd4:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	4b70      	ldr	r3, [pc, #448]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bda:	2101      	movs	r1, #1
 8005bdc:	438a      	bics	r2, r1
 8005bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be0:	f7fe fc18 	bl	8004414 <HAL_GetTick>
 8005be4:	0003      	movs	r3, r0
 8005be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005bea:	f7fe fc13 	bl	8004414 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e111      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005bfc:	4b67      	ldr	r3, [pc, #412]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	2202      	movs	r2, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	d1f1      	bne.n	8005bea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d05c      	beq.n	8005cca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c10:	4b62      	ldr	r3, [pc, #392]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	220c      	movs	r2, #12
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d00e      	beq.n	8005c3a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c1c:	4b5f      	ldr	r3, [pc, #380]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	220c      	movs	r2, #12
 8005c22:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d114      	bne.n	8005c52 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c28:	4b5c      	ldr	r3, [pc, #368]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	23c0      	movs	r3, #192	; 0xc0
 8005c2e:	025b      	lsls	r3, r3, #9
 8005c30:	401a      	ands	r2, r3
 8005c32:	23c0      	movs	r3, #192	; 0xc0
 8005c34:	025b      	lsls	r3, r3, #9
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d10b      	bne.n	8005c52 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c3a:	4b58      	ldr	r3, [pc, #352]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	025b      	lsls	r3, r3, #9
 8005c42:	4013      	ands	r3, r2
 8005c44:	d040      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x5a8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d03c      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0e6      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01b      	beq.n	8005c92 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005c5a:	4b50      	ldr	r3, [pc, #320]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5e:	4b4f      	ldr	r3, [pc, #316]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	0249      	lsls	r1, r1, #9
 8005c64:	430a      	orrs	r2, r1
 8005c66:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fe fbd4 	bl	8004414 <HAL_GetTick>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c72:	f7fe fbcf 	bl	8004414 <HAL_GetTick>
 8005c76:	0002      	movs	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0cd      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c84:	4b45      	ldr	r3, [pc, #276]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x552>
 8005c90:	e01b      	b.n	8005cca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005c92:	4b42      	ldr	r3, [pc, #264]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005c98:	4943      	ldr	r1, [pc, #268]	; (8005da8 <HAL_RCC_OscConfig+0x688>)
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fe fbb9 	bl	8004414 <HAL_GetTick>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ca8:	f7fe fbb4 	bl	8004414 <HAL_GetTick>
 8005cac:	0002      	movs	r2, r0
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0b2      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005cba:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	025b      	lsls	r3, r3, #9
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x588>
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005cc8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d100      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5b4>
 8005cd2:	e0a4      	b.n	8005e1e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd4:	4b31      	ldr	r3, [pc, #196]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	220c      	movs	r2, #12
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d100      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x5c2>
 8005ce0:	e078      	b.n	8005dd4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d14c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cea:	4b2c      	ldr	r3, [pc, #176]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005cf0:	492e      	ldr	r1, [pc, #184]	; (8005dac <HAL_RCC_OscConfig+0x68c>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fe fb8d 	bl	8004414 <HAL_GetTick>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d00:	f7fe fb88 	bl	8004414 <HAL_GetTick>
 8005d04:	0002      	movs	r2, r0
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e086      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	049b      	lsls	r3, r3, #18
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	220f      	movs	r2, #15
 8005d24:	4393      	bics	r3, r2
 8005d26:	0019      	movs	r1, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d32:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_RCC_OscConfig+0x690>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	431a      	orrs	r2, r3
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0449      	lsls	r1, r1, #17
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fe fb5b 	bl	8004414 <HAL_GetTick>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fe fb56 	bl	8004414 <HAL_GetTick>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e054      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	2380      	movs	r3, #128	; 0x80
 8005d7c:	049b      	lsls	r3, r3, #18
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x644>
 8005d82:	e04c      	b.n	8005e1e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <HAL_RCC_OscConfig+0x67c>)
 8005d8a:	4908      	ldr	r1, [pc, #32]	; (8005dac <HAL_RCC_OscConfig+0x68c>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fe fb40 	bl	8004414 <HAL_GetTick>
 8005d94:	0003      	movs	r3, r0
 8005d96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d98:	e015      	b.n	8005dc6 <HAL_RCC_OscConfig+0x6a6>
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	00001388 	.word	0x00001388
 8005da4:	efffffff 	.word	0xefffffff
 8005da8:	fffeffff 	.word	0xfffeffff
 8005dac:	feffffff 	.word	0xfeffffff
 8005db0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db4:	f7fe fb2e 	bl	8004414 <HAL_GetTick>
 8005db8:	0002      	movs	r2, r0
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e02c      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <HAL_RCC_OscConfig+0x708>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	049b      	lsls	r3, r3, #18
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d1f0      	bne.n	8005db4 <HAL_RCC_OscConfig+0x694>
 8005dd2:	e024      	b.n	8005e1e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e01f      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_RCC_OscConfig+0x708>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_OscConfig+0x708>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	23c0      	movs	r3, #192	; 0xc0
 8005df0:	025b      	lsls	r3, r3, #9
 8005df2:	401a      	ands	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d10e      	bne.n	8005e1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	220f      	movs	r2, #15
 8005e00:	401a      	ands	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d107      	bne.n	8005e1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	23f0      	movs	r3, #240	; 0xf0
 8005e0e:	039b      	lsls	r3, r3, #14
 8005e10:	401a      	ands	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d001      	beq.n	8005e1e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b008      	add	sp, #32
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40021000 	.word	0x40021000

08005e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0bf      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e40:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	4013      	ands	r3, r2
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d911      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b5e      	ldr	r3, [pc, #376]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4393      	bics	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e60:	4b59      	ldr	r3, [pc, #356]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	4013      	ands	r3, r2
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d001      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e0a6      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2202      	movs	r2, #2
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2204      	movs	r2, #4
 8005e82:	4013      	ands	r3, r2
 8005e84:	d006      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e86:	4b51      	ldr	r3, [pc, #324]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005e8c:	21e0      	movs	r1, #224	; 0xe0
 8005e8e:	00c9      	lsls	r1, r1, #3
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e94:	4b4d      	ldr	r3, [pc, #308]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	22f0      	movs	r2, #240	; 0xf0
 8005e9a:	4393      	bics	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	4b4a      	ldr	r3, [pc, #296]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d04c      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b44      	ldr	r3, [pc, #272]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	; 0x80
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d120      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e07a      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed2:	4b3e      	ldr	r3, [pc, #248]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	049b      	lsls	r3, r3, #18
 8005eda:	4013      	ands	r3, r2
 8005edc:	d114      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e06e      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d107      	bne.n	8005efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e062      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2202      	movs	r2, #2
 8005f00:	4013      	ands	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e05b      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f08:	4b30      	ldr	r3, [pc, #192]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	4393      	bics	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f1c:	f7fe fa7a 	bl	8004414 <HAL_GetTick>
 8005f20:	0003      	movs	r3, r0
 8005f22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f24:	e009      	b.n	8005f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f26:	f7fe fa75 	bl	8004414 <HAL_GetTick>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <HAL_RCC_ClockConfig+0x1a4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e042      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3a:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	220c      	movs	r2, #12
 8005f40:	401a      	ands	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d1ec      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4013      	ands	r3, r2
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d211      	bcs.n	8005f7e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4393      	bics	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6c:	4b16      	ldr	r3, [pc, #88]	; (8005fc8 <HAL_RCC_ClockConfig+0x19c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2201      	movs	r2, #1
 8005f72:	4013      	ands	r3, r2
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e020      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2204      	movs	r2, #4
 8005f84:	4013      	ands	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <HAL_RCC_ClockConfig+0x1a8>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f9c:	f000 f820 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8005fa0:	0001      	movs	r1, r0
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <HAL_RCC_ClockConfig+0x1a0>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	220f      	movs	r2, #15
 8005faa:	4013      	ands	r3, r2
 8005fac:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_RCC_ClockConfig+0x1ac>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	000a      	movs	r2, r1
 8005fb2:	40da      	lsrs	r2, r3
 8005fb4:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_RCC_ClockConfig+0x1b0>)
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f7fe f9e5 	bl	8004388 <HAL_InitTick>
  
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b004      	add	sp, #16
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40022000 	.word	0x40022000
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	00001388 	.word	0x00001388
 8005fd4:	fffff8ff 	.word	0xfffff8ff
 8005fd8:	0800d7d0 	.word	0x0800d7d0
 8005fdc:	20000458 	.word	0x20000458

08005fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b08f      	sub	sp, #60	; 0x3c
 8005fe4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005fe6:	2314      	movs	r3, #20
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_RCC_GetSysClockFreq+0xec>)
 8005fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fee:	c313      	stmia	r3!, {r0, r1, r4}
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	4a36      	ldr	r2, [pc, #216]	; (80060d0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005ff8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ffa:	c313      	stmia	r3!, {r0, r1, r4}
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006004:	2300      	movs	r3, #0
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
 8006008:	2300      	movs	r3, #0
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
 800600c:	2300      	movs	r3, #0
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006014:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	220c      	movs	r2, #12
 800601e:	4013      	ands	r3, r2
 8006020:	2b0c      	cmp	r3, #12
 8006022:	d047      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0xd4>
 8006024:	d849      	bhi.n	80060ba <HAL_RCC_GetSysClockFreq+0xda>
 8006026:	2b04      	cmp	r3, #4
 8006028:	d002      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0x50>
 800602a:	2b08      	cmp	r3, #8
 800602c:	d003      	beq.n	8006036 <HAL_RCC_GetSysClockFreq+0x56>
 800602e:	e044      	b.n	80060ba <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006030:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006032:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006034:	e044      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	0c9b      	lsrs	r3, r3, #18
 800603a:	220f      	movs	r2, #15
 800603c:	4013      	ands	r3, r2
 800603e:	2214      	movs	r2, #20
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006046:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	220f      	movs	r2, #15
 800604c:	4013      	ands	r3, r2
 800604e:	1d3a      	adds	r2, r7, #4
 8006050:	5cd3      	ldrb	r3, [r2, r3]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006056:	23c0      	movs	r3, #192	; 0xc0
 8006058:	025b      	lsls	r3, r3, #9
 800605a:	401a      	ands	r2, r3
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	025b      	lsls	r3, r3, #9
 8006060:	429a      	cmp	r2, r3
 8006062:	d109      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006066:	481c      	ldr	r0, [pc, #112]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006068:	f7fa f868 	bl	800013c <__udivsi3>
 800606c:	0003      	movs	r3, r0
 800606e:	001a      	movs	r2, r3
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	4353      	muls	r3, r2
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
 8006076:	e01a      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607a:	23c0      	movs	r3, #192	; 0xc0
 800607c:	025b      	lsls	r3, r3, #9
 800607e:	401a      	ands	r2, r3
 8006080:	23c0      	movs	r3, #192	; 0xc0
 8006082:	025b      	lsls	r3, r3, #9
 8006084:	429a      	cmp	r2, r3
 8006086:	d109      	bne.n	800609c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608a:	4814      	ldr	r0, [pc, #80]	; (80060dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800608c:	f7fa f856 	bl	800013c <__udivsi3>
 8006090:	0003      	movs	r3, r0
 8006092:	001a      	movs	r2, r3
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	4353      	muls	r3, r2
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	e008      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800609c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609e:	480e      	ldr	r0, [pc, #56]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060a0:	f7fa f84c 	bl	800013c <__udivsi3>
 80060a4:	0003      	movs	r3, r0
 80060a6:	001a      	movs	r2, r3
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	4353      	muls	r3, r2
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060b2:	e005      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCC_GetSysClockFreq+0xfc>)
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060b8:	e002      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b00f      	add	sp, #60	; 0x3c
 80060c8:	bd90      	pop	{r4, r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	0800ae9c 	.word	0x0800ae9c
 80060d0:	0800aeac 	.word	0x0800aeac
 80060d4:	40021000 	.word	0x40021000
 80060d8:	007a1200 	.word	0x007a1200
 80060dc:	02dc6c00 	.word	0x02dc6c00

080060e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e4:	4b02      	ldr	r3, [pc, #8]	; (80060f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80060e6:	681b      	ldr	r3, [r3, #0]
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	20000458 	.word	0x20000458

080060f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80060f8:	f7ff fff2 	bl	80060e0 <HAL_RCC_GetHCLKFreq>
 80060fc:	0001      	movs	r1, r0
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	2207      	movs	r2, #7
 8006106:	4013      	ands	r3, r2
 8006108:	4a04      	ldr	r2, [pc, #16]	; (800611c <HAL_RCC_GetPCLK1Freq+0x28>)
 800610a:	5cd3      	ldrb	r3, [r2, r3]
 800610c:	40d9      	lsrs	r1, r3
 800610e:	000b      	movs	r3, r1
}    
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	40021000 	.word	0x40021000
 800611c:	0800d7e0 	.word	0x0800d7e0

08006120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	025b      	lsls	r3, r3, #9
 8006138:	4013      	ands	r3, r2
 800613a:	d100      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800613c:	e08e      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800613e:	2017      	movs	r0, #23
 8006140:	183b      	adds	r3, r7, r0
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006146:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	055b      	lsls	r3, r3, #21
 800614e:	4013      	ands	r3, r2
 8006150:	d110      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	4b6b      	ldr	r3, [pc, #428]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	4b6a      	ldr	r3, [pc, #424]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006158:	2180      	movs	r1, #128	; 0x80
 800615a:	0549      	lsls	r1, r1, #21
 800615c:	430a      	orrs	r2, r1
 800615e:	61da      	str	r2, [r3, #28]
 8006160:	4b67      	ldr	r3, [pc, #412]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	055b      	lsls	r3, r3, #21
 8006168:	4013      	ands	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800616e:	183b      	adds	r3, r7, r0
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006174:	4b63      	ldr	r3, [pc, #396]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4013      	ands	r3, r2
 800617e:	d11a      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006180:	4b60      	ldr	r3, [pc, #384]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b5f      	ldr	r3, [pc, #380]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	0049      	lsls	r1, r1, #1
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fe f941 	bl	8004414 <HAL_GetTick>
 8006192:	0003      	movs	r3, r0
 8006194:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006196:	e008      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fe f93c 	bl	8004414 <HAL_GetTick>
 800619c:	0002      	movs	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0a6      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061aa:	4b56      	ldr	r3, [pc, #344]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	4013      	ands	r3, r2
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b6:	4b52      	ldr	r3, [pc, #328]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	23c0      	movs	r3, #192	; 0xc0
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4013      	ands	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d034      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	23c0      	movs	r3, #192	; 0xc0
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4013      	ands	r3, r2
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d02c      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d8:	4b49      	ldr	r3, [pc, #292]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061de:	4013      	ands	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e2:	4b47      	ldr	r3, [pc, #284]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061e4:	6a1a      	ldr	r2, [r3, #32]
 80061e6:	4b46      	ldr	r3, [pc, #280]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	0249      	lsls	r1, r1, #9
 80061ec:	430a      	orrs	r2, r1
 80061ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061f0:	4b43      	ldr	r3, [pc, #268]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061f6:	4945      	ldr	r1, [pc, #276]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80061f8:	400a      	ands	r2, r1
 80061fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061fc:	4b40      	ldr	r3, [pc, #256]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	4013      	ands	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620a:	f7fe f903 	bl	8004414 <HAL_GetTick>
 800620e:	0003      	movs	r3, r0
 8006210:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	e009      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fe f8fe 	bl	8004414 <HAL_GetTick>
 8006218:	0002      	movs	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	4a3c      	ldr	r2, [pc, #240]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d901      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e067      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006228:	4b35      	ldr	r3, [pc, #212]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	2202      	movs	r2, #2
 800622e:	4013      	ands	r3, r2
 8006230:	d0f0      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006232:	4b33      	ldr	r3, [pc, #204]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	4a34      	ldr	r2, [pc, #208]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006242:	430a      	orrs	r2, r1
 8006244:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006246:	2317      	movs	r3, #23
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006250:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006256:	492f      	ldr	r1, [pc, #188]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006258:	400a      	ands	r2, r1
 800625a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2201      	movs	r2, #1
 8006262:	4013      	ands	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006266:	4b26      	ldr	r3, [pc, #152]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	2203      	movs	r2, #3
 800626c:	4393      	bics	r3, r2
 800626e:	0019      	movs	r1, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	4b22      	ldr	r3, [pc, #136]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006276:	430a      	orrs	r2, r1
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2202      	movs	r2, #2
 8006280:	4013      	ands	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	4a23      	ldr	r2, [pc, #140]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800628a:	4013      	ands	r3, r2
 800628c:	0019      	movs	r1, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006294:	430a      	orrs	r2, r1
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	02db      	lsls	r3, r3, #11
 80062a0:	4013      	ands	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	0019      	movs	r1, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062b4:	430a      	orrs	r2, r1
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2220      	movs	r2, #32
 80062be:	4013      	ands	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	2210      	movs	r2, #16
 80062c8:	4393      	bics	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062d2:	430a      	orrs	r2, r1
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4013      	ands	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	4393      	bics	r3, r2
 80062ea:	0019      	movs	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	4b03      	ldr	r3, [pc, #12]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062f2:	430a      	orrs	r2, r1
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b006      	add	sp, #24
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	40007000 	.word	0x40007000
 8006308:	fffffcff 	.word	0xfffffcff
 800630c:	fffeffff 	.word	0xfffeffff
 8006310:	00001388 	.word	0x00001388
 8006314:	efffffff 	.word	0xefffffff
 8006318:	fffcffff 	.word	0xfffcffff
 800631c:	fff3ffff 	.word	0xfff3ffff

08006320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e042      	b.n	80063b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223d      	movs	r2, #61	; 0x3d
 8006336:	5c9b      	ldrb	r3, [r3, r2]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	223c      	movs	r2, #60	; 0x3c
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f7fd fefd 	bl	8004148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223d      	movs	r2, #61	; 0x3d
 8006352:	2102      	movs	r1, #2
 8006354:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	0019      	movs	r1, r3
 8006360:	0010      	movs	r0, r2
 8006362:	f000 fdc3 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2246      	movs	r2, #70	; 0x46
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	223e      	movs	r2, #62	; 0x3e
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	223f      	movs	r2, #63	; 0x3f
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2240      	movs	r2, #64	; 0x40
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2241      	movs	r2, #65	; 0x41
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2242      	movs	r2, #66	; 0x42
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2243      	movs	r2, #67	; 0x43
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2244      	movs	r2, #68	; 0x44
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2245      	movs	r2, #69	; 0x45
 80063aa:	2101      	movs	r1, #1
 80063ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	223d      	movs	r2, #61	; 0x3d
 80063b2:	2101      	movs	r1, #1
 80063b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	223d      	movs	r2, #61	; 0x3d
 80063cc:	5c9b      	ldrb	r3, [r3, r2]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e03b      	b.n	8006450 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	223d      	movs	r2, #61	; 0x3d
 80063dc:	2102      	movs	r1, #2
 80063de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	430a      	orrs	r2, r1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIM_Base_Start_IT+0x98>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00f      	beq.n	800641a <HAL_TIM_Base_Start_IT+0x5a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	05db      	lsls	r3, r3, #23
 8006402:	429a      	cmp	r2, r3
 8006404:	d009      	beq.n	800641a <HAL_TIM_Base_Start_IT+0x5a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a14      	ldr	r2, [pc, #80]	; (800645c <HAL_TIM_Base_Start_IT+0x9c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIM_Base_Start_IT+0x5a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <HAL_TIM_Base_Start_IT+0xa0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d111      	bne.n	800643e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2207      	movs	r2, #7
 8006422:	4013      	ands	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b06      	cmp	r3, #6
 800642a:	d010      	beq.n	800644e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2101      	movs	r1, #1
 8006438:	430a      	orrs	r2, r1
 800643a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	e007      	b.n	800644e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	b004      	add	sp, #16
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40014000 	.word	0x40014000

08006464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e042      	b.n	80064fc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	223d      	movs	r2, #61	; 0x3d
 800647a:	5c9b      	ldrb	r3, [r3, r2]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	223c      	movs	r2, #60	; 0x3c
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	0018      	movs	r0, r3
 800648e:	f7fd fde9 	bl	8004064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	223d      	movs	r2, #61	; 0x3d
 8006496:	2102      	movs	r1, #2
 8006498:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	0019      	movs	r1, r3
 80064a4:	0010      	movs	r0, r2
 80064a6:	f000 fd21 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2246      	movs	r2, #70	; 0x46
 80064ae:	2101      	movs	r1, #1
 80064b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	223e      	movs	r2, #62	; 0x3e
 80064b6:	2101      	movs	r1, #1
 80064b8:	5499      	strb	r1, [r3, r2]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	223f      	movs	r2, #63	; 0x3f
 80064be:	2101      	movs	r1, #1
 80064c0:	5499      	strb	r1, [r3, r2]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2241      	movs	r2, #65	; 0x41
 80064ce:	2101      	movs	r1, #1
 80064d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2242      	movs	r2, #66	; 0x42
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2243      	movs	r2, #67	; 0x43
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2244      	movs	r2, #68	; 0x44
 80064e6:	2101      	movs	r1, #1
 80064e8:	5499      	strb	r1, [r3, r2]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2245      	movs	r2, #69	; 0x45
 80064ee:	2101      	movs	r1, #1
 80064f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	223d      	movs	r2, #61	; 0x3d
 80064f6:	2101      	movs	r1, #1
 80064f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	0018      	movs	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	b002      	add	sp, #8
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <HAL_TIM_PWM_Start+0x22>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	223e      	movs	r2, #62	; 0x3e
 8006518:	5c9b      	ldrb	r3, [r3, r2]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	1e5a      	subs	r2, r3, #1
 8006520:	4193      	sbcs	r3, r2
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e01f      	b.n	8006566 <HAL_TIM_PWM_Start+0x62>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d108      	bne.n	800653e <HAL_TIM_PWM_Start+0x3a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	223f      	movs	r2, #63	; 0x3f
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	4193      	sbcs	r3, r2
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e013      	b.n	8006566 <HAL_TIM_PWM_Start+0x62>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d108      	bne.n	8006556 <HAL_TIM_PWM_Start+0x52>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	5c9b      	ldrb	r3, [r3, r2]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	1e5a      	subs	r2, r3, #1
 8006550:	4193      	sbcs	r3, r2
 8006552:	b2db      	uxtb	r3, r3
 8006554:	e007      	b.n	8006566 <HAL_TIM_PWM_Start+0x62>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2241      	movs	r2, #65	; 0x41
 800655a:	5c9b      	ldrb	r3, [r3, r2]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	1e5a      	subs	r2, r3, #1
 8006562:	4193      	sbcs	r3, r2
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e074      	b.n	8006658 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0x7a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	223e      	movs	r2, #62	; 0x3e
 8006578:	2102      	movs	r1, #2
 800657a:	5499      	strb	r1, [r3, r2]
 800657c:	e013      	b.n	80065a6 <HAL_TIM_PWM_Start+0xa2>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0x8a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	223f      	movs	r2, #63	; 0x3f
 8006588:	2102      	movs	r1, #2
 800658a:	5499      	strb	r1, [r3, r2]
 800658c:	e00b      	b.n	80065a6 <HAL_TIM_PWM_Start+0xa2>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0x9a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	2102      	movs	r1, #2
 800659a:	5499      	strb	r1, [r3, r2]
 800659c:	e003      	b.n	80065a6 <HAL_TIM_PWM_Start+0xa2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2241      	movs	r2, #65	; 0x41
 80065a2:	2102      	movs	r1, #2
 80065a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 ffb2 	bl	8007518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a29      	ldr	r2, [pc, #164]	; (8006660 <HAL_TIM_PWM_Start+0x15c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIM_PWM_Start+0xd8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a28      	ldr	r2, [pc, #160]	; (8006664 <HAL_TIM_PWM_Start+0x160>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIM_PWM_Start+0xd8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a26      	ldr	r2, [pc, #152]	; (8006668 <HAL_TIM_PWM_Start+0x164>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIM_PWM_Start+0xd8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a25      	ldr	r2, [pc, #148]	; (800666c <HAL_TIM_PWM_Start+0x168>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d101      	bne.n	80065e0 <HAL_TIM_PWM_Start+0xdc>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <HAL_TIM_PWM_Start+0xde>
 80065e0:	2300      	movs	r3, #0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	0209      	lsls	r1, r1, #8
 80065f4:	430a      	orrs	r2, r1
 80065f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a18      	ldr	r2, [pc, #96]	; (8006660 <HAL_TIM_PWM_Start+0x15c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <HAL_TIM_PWM_Start+0x11e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	2380      	movs	r3, #128	; 0x80
 8006608:	05db      	lsls	r3, r3, #23
 800660a:	429a      	cmp	r2, r3
 800660c:	d009      	beq.n	8006622 <HAL_TIM_PWM_Start+0x11e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_TIM_PWM_Start+0x16c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIM_PWM_Start+0x11e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <HAL_TIM_PWM_Start+0x160>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d111      	bne.n	8006646 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2207      	movs	r2, #7
 800662a:	4013      	ands	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b06      	cmp	r3, #6
 8006632:	d010      	beq.n	8006656 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2101      	movs	r1, #1
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	e007      	b.n	8006656 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	430a      	orrs	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b004      	add	sp, #16
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800
 8006670:	40000400 	.word	0x40000400

08006674 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e090      	b.n	80067aa <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	223d      	movs	r2, #61	; 0x3d
 800668c:	5c9b      	ldrb	r3, [r3, r2]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	223c      	movs	r2, #60	; 0x3c
 8006698:	2100      	movs	r1, #0
 800669a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f7fd fd00 	bl	80040a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	223d      	movs	r2, #61	; 0x3d
 80066a8:	2102      	movs	r1, #2
 80066aa:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	493f      	ldr	r1, [pc, #252]	; (80067b4 <HAL_TIM_Encoder_Init+0x140>)
 80066b8:	400a      	ands	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	0019      	movs	r1, r3
 80066c6:	0010      	movs	r0, r2
 80066c8:	f000 fc10 	bl	8006eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_TIM_Encoder_Init+0x144>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	4313      	orrs	r3, r2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <HAL_TIM_Encoder_Init+0x148>)
 800670c:	4013      	ands	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4a2b      	ldr	r2, [pc, #172]	; (80067c0 <HAL_TIM_Encoder_Init+0x14c>)
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	4313      	orrs	r3, r2
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	011a      	lsls	r2, r3, #4
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	4313      	orrs	r3, r2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2222      	movs	r2, #34	; 0x22
 8006742:	4393      	bics	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2288      	movs	r2, #136	; 0x88
 800674a:	4393      	bics	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4313      	orrs	r3, r2
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2246      	movs	r2, #70	; 0x46
 800677c:	2101      	movs	r1, #1
 800677e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	223e      	movs	r2, #62	; 0x3e
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	223f      	movs	r2, #63	; 0x3f
 800678c:	2101      	movs	r1, #1
 800678e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2242      	movs	r2, #66	; 0x42
 8006794:	2101      	movs	r1, #1
 8006796:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2243      	movs	r2, #67	; 0x43
 800679c:	2101      	movs	r1, #1
 800679e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	223d      	movs	r2, #61	; 0x3d
 80067a4:	2101      	movs	r1, #1
 80067a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	0018      	movs	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b006      	add	sp, #24
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	ffffbff8 	.word	0xffffbff8
 80067b8:	fffffcfc 	.word	0xfffffcfc
 80067bc:	fffff3f3 	.word	0xfffff3f3
 80067c0:	ffff0f0f 	.word	0xffff0f0f

080067c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067ce:	200f      	movs	r0, #15
 80067d0:	183b      	adds	r3, r7, r0
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	213e      	movs	r1, #62	; 0x3e
 80067d6:	5c52      	ldrb	r2, [r2, r1]
 80067d8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067da:	230e      	movs	r3, #14
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	213f      	movs	r1, #63	; 0x3f
 80067e2:	5c52      	ldrb	r2, [r2, r1]
 80067e4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067e6:	240d      	movs	r4, #13
 80067e8:	193b      	adds	r3, r7, r4
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	2142      	movs	r1, #66	; 0x42
 80067ee:	5c52      	ldrb	r2, [r2, r1]
 80067f0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067f2:	230c      	movs	r3, #12
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	2143      	movs	r1, #67	; 0x43
 80067fa:	5c52      	ldrb	r2, [r2, r1]
 80067fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d112      	bne.n	800682a <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006804:	183b      	adds	r3, r7, r0
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d103      	bne.n	8006814 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800680c:	193b      	adds	r3, r7, r4
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e095      	b.n	8006944 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	223e      	movs	r2, #62	; 0x3e
 800681c:	2102      	movs	r1, #2
 800681e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2242      	movs	r2, #66	; 0x42
 8006824:	2102      	movs	r1, #2
 8006826:	5499      	strb	r1, [r3, r2]
 8006828:	e03d      	b.n	80068a6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d114      	bne.n	800685a <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006830:	230e      	movs	r3, #14
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d104      	bne.n	8006844 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800683a:	230c      	movs	r3, #12
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d001      	beq.n	8006848 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e07d      	b.n	8006944 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	223f      	movs	r2, #63	; 0x3f
 800684c:	2102      	movs	r1, #2
 800684e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2243      	movs	r2, #67	; 0x43
 8006854:	2102      	movs	r1, #2
 8006856:	5499      	strb	r1, [r3, r2]
 8006858:	e025      	b.n	80068a6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	230f      	movs	r3, #15
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10e      	bne.n	8006882 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006864:	230e      	movs	r3, #14
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d109      	bne.n	8006882 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	230d      	movs	r3, #13
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d104      	bne.n	8006882 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006878:	230c      	movs	r3, #12
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d001      	beq.n	8006886 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e05e      	b.n	8006944 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	223e      	movs	r2, #62	; 0x3e
 800688a:	2102      	movs	r1, #2
 800688c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	223f      	movs	r2, #63	; 0x3f
 8006892:	2102      	movs	r1, #2
 8006894:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2242      	movs	r2, #66	; 0x42
 800689a:	2102      	movs	r1, #2
 800689c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2243      	movs	r2, #67	; 0x43
 80068a2:	2102      	movs	r1, #2
 80068a4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_TIM_Encoder_Start_IT+0xf0>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d010      	beq.n	80068d4 <HAL_TIM_Encoder_Start_IT+0x110>
 80068b2:	e01f      	b.n	80068f4 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2201      	movs	r2, #1
 80068ba:	2100      	movs	r1, #0
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 fe2b 	bl	8007518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2102      	movs	r1, #2
 80068ce:	430a      	orrs	r2, r1
 80068d0:	60da      	str	r2, [r3, #12]
      break;
 80068d2:	e02e      	b.n	8006932 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2201      	movs	r2, #1
 80068da:	2104      	movs	r1, #4
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 fe1b 	bl	8007518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2104      	movs	r1, #4
 80068ee:	430a      	orrs	r2, r1
 80068f0:	60da      	str	r2, [r3, #12]
      break;
 80068f2:	e01e      	b.n	8006932 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	2100      	movs	r1, #0
 80068fc:	0018      	movs	r0, r3
 80068fe:	f000 fe0b 	bl	8007518 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2201      	movs	r2, #1
 8006908:	2104      	movs	r1, #4
 800690a:	0018      	movs	r0, r3
 800690c:	f000 fe04 	bl	8007518 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2102      	movs	r1, #2
 800691c:	430a      	orrs	r2, r1
 800691e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2104      	movs	r1, #4
 800692c:	430a      	orrs	r2, r1
 800692e:	60da      	str	r2, [r3, #12]
      break;
 8006930:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2101      	movs	r1, #1
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b005      	add	sp, #20
 800694a:	bd90      	pop	{r4, r7, pc}

0800694c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2202      	movs	r2, #2
 800695c:	4013      	ands	r3, r2
 800695e:	2b02      	cmp	r3, #2
 8006960:	d124      	bne.n	80069ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2202      	movs	r2, #2
 800696a:	4013      	ands	r3, r2
 800696c:	2b02      	cmp	r3, #2
 800696e:	d11d      	bne.n	80069ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2203      	movs	r2, #3
 8006976:	4252      	negs	r2, r2
 8006978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2203      	movs	r2, #3
 8006988:	4013      	ands	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	0018      	movs	r0, r3
 8006990:	f7fc fb6e 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8006994:	e007      	b.n	80069a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fa8f 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 fa93 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2204      	movs	r2, #4
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d125      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2204      	movs	r2, #4
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d11e      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2205      	movs	r2, #5
 80069ce:	4252      	negs	r2, r2
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	23c0      	movs	r3, #192	; 0xc0
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4013      	ands	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f7fc fb41 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 80069ee:	e007      	b.n	8006a00 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 fa62 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 fa66 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d124      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d11d      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2209      	movs	r2, #9
 8006a28:	4252      	negs	r2, r2
 8006a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7fc fb15 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8006a46:	e007      	b.n	8006a58 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 fa36 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 fa3a 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2210      	movs	r2, #16
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d125      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2210      	movs	r2, #16
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d11e      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2211      	movs	r2, #17
 8006a80:	4252      	negs	r2, r2
 8006a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2208      	movs	r2, #8
 8006a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	23c0      	movs	r3, #192	; 0xc0
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4013      	ands	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7fc fae8 	bl	8003070 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e007      	b.n	8006ab2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f000 fa09 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 fa0d 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d108      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	4252      	negs	r2, r2
 8006adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f000 f9e3 	bl	8006eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2280      	movs	r2, #128	; 0x80
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d10f      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d108      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2281      	movs	r2, #129	; 0x81
 8006b08:	4252      	negs	r2, r2
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 fdea 	bl	80076e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d10f      	bne.n	8006b42 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2240      	movs	r2, #64	; 0x40
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d108      	bne.n	8006b42 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2241      	movs	r2, #65	; 0x41
 8006b36:	4252      	negs	r2, r2
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 f9cd 	bl	8006edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d10f      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d108      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2221      	movs	r2, #33	; 0x21
 8006b64:	4252      	negs	r2, r2
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f000 fdb4 	bl	80076d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2317      	movs	r3, #23
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	223c      	movs	r2, #60	; 0x3c
 8006b90:	5c9b      	ldrb	r3, [r3, r2]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ad      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	223c      	movs	r2, #60	; 0x3c
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d100      	bne.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x32>
 8006ba8:	e076      	b.n	8006c98 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	d900      	bls.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006bb0:	e095      	b.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x166>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d04e      	beq.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d900      	bls.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006bbe:	e08e      	b.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x166>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_PWM_ConfigChannel+0x56>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d021      	beq.n	8006c10 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006bcc:	e087      	b.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 fa08 	bl	8006fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2108      	movs	r1, #8
 8006be8:	430a      	orrs	r2, r1
 8006bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	438a      	bics	r2, r1
 8006bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6999      	ldr	r1, [r3, #24]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	619a      	str	r2, [r3, #24]
      break;
 8006c0e:	e06b      	b.n	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fa6f 	bl	80070fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0109      	lsls	r1, r1, #4
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4931      	ldr	r1, [pc, #196]	; (8006d00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006c3c:	400a      	ands	r2, r1
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e048      	b.n	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0011      	movs	r1, r2
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 fad0 	bl	8007204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2108      	movs	r1, #8
 8006c70:	430a      	orrs	r2, r1
 8006c72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2104      	movs	r1, #4
 8006c80:	438a      	bics	r2, r1
 8006c82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69d9      	ldr	r1, [r3, #28]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	61da      	str	r2, [r3, #28]
      break;
 8006c96:	e027      	b.n	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	0011      	movs	r1, r2
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 fb35 	bl	8007310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2180      	movs	r1, #128	; 0x80
 8006cb2:	0109      	lsls	r1, r1, #4
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	490f      	ldr	r1, [pc, #60]	; (8006d00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006cc4:	400a      	ands	r2, r1
 8006cc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69d9      	ldr	r1, [r3, #28]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	61da      	str	r2, [r3, #28]
      break;
 8006cdc:	e004      	b.n	8006ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006cde:	2317      	movs	r3, #23
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	223c      	movs	r2, #60	; 0x3c
 8006cec:	2100      	movs	r1, #0
 8006cee:	5499      	strb	r1, [r3, r2]

  return status;
 8006cf0:	2317      	movs	r3, #23
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	781b      	ldrb	r3, [r3, #0]
}
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b006      	add	sp, #24
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	fffffbff 	.word	0xfffffbff

08006d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0e:	230f      	movs	r3, #15
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	223c      	movs	r2, #60	; 0x3c
 8006d1a:	5c9b      	ldrb	r3, [r3, r2]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_ConfigClockSource+0x20>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0bc      	b.n	8006e9e <HAL_TIM_ConfigClockSource+0x19a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	223c      	movs	r2, #60	; 0x3c
 8006d28:	2101      	movs	r1, #1
 8006d2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	223d      	movs	r2, #61	; 0x3d
 8006d30:	2102      	movs	r1, #2
 8006d32:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2277      	movs	r2, #119	; 0x77
 8006d40:	4393      	bics	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a58      	ldr	r2, [pc, #352]	; (8006ea8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2280      	movs	r2, #128	; 0x80
 8006d5a:	0192      	lsls	r2, r2, #6
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d040      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0xde>
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	0192      	lsls	r2, r2, #6
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d900      	bls.n	8006d6a <HAL_TIM_ConfigClockSource+0x66>
 8006d68:	e088      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	0152      	lsls	r2, r2, #5
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d100      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x70>
 8006d72:	e088      	b.n	8006e86 <HAL_TIM_ConfigClockSource+0x182>
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	0152      	lsls	r2, r2, #5
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d900      	bls.n	8006d7e <HAL_TIM_ConfigClockSource+0x7a>
 8006d7c:	e07e      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d7e:	2b70      	cmp	r3, #112	; 0x70
 8006d80:	d018      	beq.n	8006db4 <HAL_TIM_ConfigClockSource+0xb0>
 8006d82:	d900      	bls.n	8006d86 <HAL_TIM_ConfigClockSource+0x82>
 8006d84:	e07a      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d86:	2b60      	cmp	r3, #96	; 0x60
 8006d88:	d04f      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x126>
 8006d8a:	d900      	bls.n	8006d8e <HAL_TIM_ConfigClockSource+0x8a>
 8006d8c:	e076      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d8e:	2b50      	cmp	r3, #80	; 0x50
 8006d90:	d03b      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x106>
 8006d92:	d900      	bls.n	8006d96 <HAL_TIM_ConfigClockSource+0x92>
 8006d94:	e072      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d057      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x146>
 8006d9a:	d900      	bls.n	8006d9e <HAL_TIM_ConfigClockSource+0x9a>
 8006d9c:	e06e      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006d9e:	2b30      	cmp	r3, #48	; 0x30
 8006da0:	d063      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x166>
 8006da2:	d86b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d060      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x166>
 8006da8:	d868      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d05d      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x166>
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d05b      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x166>
 8006db2:	e063      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6899      	ldr	r1, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f000 fb88 	bl	80074d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2277      	movs	r2, #119	; 0x77
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	609a      	str	r2, [r3, #8]
      break;
 8006de0:	e052      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6899      	ldr	r1, [r3, #8]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f000 fb71 	bl	80074d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2180      	movs	r1, #128	; 0x80
 8006e02:	01c9      	lsls	r1, r1, #7
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
      break;
 8006e08:	e03e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	001a      	movs	r2, r3
 8006e18:	f000 fae4 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2150      	movs	r1, #80	; 0x50
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 fb3e 	bl	80074a4 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e02e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	001a      	movs	r2, r3
 8006e38:	f000 fb02 	bl	8007440 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2160      	movs	r1, #96	; 0x60
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 fb2e 	bl	80074a4 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e01e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	001a      	movs	r2, r3
 8006e58:	f000 fac4 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2140      	movs	r1, #64	; 0x40
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fb1e 	bl	80074a4 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e00e      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	0019      	movs	r1, r3
 8006e74:	0010      	movs	r0, r2
 8006e76:	f000 fb15 	bl	80074a4 <TIM_ITRx_SetConfig>
      break;
 8006e7a:	e005      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	230f      	movs	r3, #15
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2201      	movs	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006e86:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	223d      	movs	r2, #61	; 0x3d
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	223c      	movs	r2, #60	; 0x3c
 8006e94:	2100      	movs	r1, #0
 8006e96:	5499      	strb	r1, [r3, r2]

  return status;
 8006e98:	230f      	movs	r3, #15
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	781b      	ldrb	r3, [r3, #0]
}
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b004      	add	sp, #16
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	ffff00ff 	.word	0xffff00ff

08006eac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd80      	pop	{r7, pc}

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d008      	beq.n	8006f16 <TIM_Base_SetConfig+0x2a>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	05db      	lsls	r3, r3, #23
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d003      	beq.n	8006f16 <TIM_Base_SetConfig+0x2a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d108      	bne.n	8006f28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2270      	movs	r2, #112	; 0x70
 8006f1a:	4393      	bics	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d018      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	05db      	lsls	r3, r3, #23
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d013      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <TIM_Base_SetConfig+0xec>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <TIM_Base_SetConfig+0xf4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <TIM_Base_SetConfig+0xf8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d108      	bne.n	8006f74 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a20      	ldr	r2, [pc, #128]	; (8006fe8 <TIM_Base_SetConfig+0xfc>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	4393      	bics	r3, r2
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00b      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d007      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <TIM_Base_SetConfig+0xf4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d003      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <TIM_Base_SetConfig+0xf8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d103      	bne.n	8006fc2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	615a      	str	r2, [r3, #20]
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b004      	add	sp, #16
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40002000 	.word	0x40002000
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800
 8006fe8:	fffffcff 	.word	0xfffffcff

08006fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4393      	bics	r3, r2
 8006ffe:	001a      	movs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2270      	movs	r2, #112	; 0x70
 800701a:	4393      	bics	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2203      	movs	r2, #3
 8007022:	4393      	bics	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2202      	movs	r2, #2
 8007034:	4393      	bics	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a27      	ldr	r2, [pc, #156]	; (80070e4 <TIM_OC1_SetConfig+0xf8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a26      	ldr	r2, [pc, #152]	; (80070e8 <TIM_OC1_SetConfig+0xfc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <TIM_OC1_SetConfig+0x100>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_OC1_SetConfig+0x104>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10c      	bne.n	800707c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2208      	movs	r2, #8
 8007066:	4393      	bics	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2204      	movs	r2, #4
 8007078:	4393      	bics	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_OC1_SetConfig+0xf8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <TIM_OC1_SetConfig+0xfc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <TIM_OC1_SetConfig+0x100>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <TIM_OC1_SetConfig+0x104>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d111      	bne.n	80070c0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <TIM_OC1_SetConfig+0x108>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4a14      	ldr	r2, [pc, #80]	; (80070f8 <TIM_OC1_SetConfig+0x10c>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b006      	add	sp, #24
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800
 80070f4:	fffffeff 	.word	0xfffffeff
 80070f8:	fffffdff 	.word	0xfffffdff

080070fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	2210      	movs	r2, #16
 800710c:	4393      	bics	r3, r2
 800710e:	001a      	movs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a2e      	ldr	r2, [pc, #184]	; (80071e4 <TIM_OC2_SetConfig+0xe8>)
 800712a:	4013      	ands	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a2d      	ldr	r2, [pc, #180]	; (80071e8 <TIM_OC2_SetConfig+0xec>)
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2220      	movs	r2, #32
 8007146:	4393      	bics	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a24      	ldr	r2, [pc, #144]	; (80071ec <TIM_OC2_SetConfig+0xf0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10d      	bne.n	800717a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	4393      	bics	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	4393      	bics	r3, r2
 8007178:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <TIM_OC2_SetConfig+0xf0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <TIM_OC2_SetConfig+0xf4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <TIM_OC2_SetConfig+0xf8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <TIM_OC2_SetConfig+0xfc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d113      	bne.n	80071c2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <TIM_OC2_SetConfig+0x100>)
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC2_SetConfig+0x104>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b006      	add	sp, #24
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	ffff8fff 	.word	0xffff8fff
 80071e8:	fffffcff 	.word	0xfffffcff
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	fffffbff 	.word	0xfffffbff
 8007200:	fffff7ff 	.word	0xfffff7ff

08007204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	4a35      	ldr	r2, [pc, #212]	; (80072e8 <TIM_OC3_SetConfig+0xe4>)
 8007214:	401a      	ands	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2270      	movs	r2, #112	; 0x70
 8007230:	4393      	bics	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2203      	movs	r2, #3
 8007238:	4393      	bics	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4a28      	ldr	r2, [pc, #160]	; (80072ec <TIM_OC3_SetConfig+0xe8>)
 800724a:	4013      	ands	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <TIM_OC3_SetConfig+0xec>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d10d      	bne.n	800727e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_OC3_SetConfig+0xf0>)
 8007266:	4013      	ands	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <TIM_OC3_SetConfig+0xf4>)
 800727a:	4013      	ands	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a1b      	ldr	r2, [pc, #108]	; (80072f0 <TIM_OC3_SetConfig+0xec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00b      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <TIM_OC3_SetConfig+0xf8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d007      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC3_SetConfig+0xfc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC3_SetConfig+0x100>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d113      	bne.n	80072c6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC3_SetConfig+0x104>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC3_SetConfig+0x108>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b006      	add	sp, #24
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	fffffeff 	.word	0xfffffeff
 80072ec:	fffffdff 	.word	0xfffffdff
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	fffff7ff 	.word	0xfffff7ff
 80072f8:	fffffbff 	.word	0xfffffbff
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800
 8007308:	ffffefff 	.word	0xffffefff
 800730c:	ffffdfff 	.word	0xffffdfff

08007310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_OC4_SetConfig+0xb0>)
 8007320:	401a      	ands	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <TIM_OC4_SetConfig+0xb4>)
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <TIM_OC4_SetConfig+0xb8>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <TIM_OC4_SetConfig+0xbc>)
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a19      	ldr	r2, [pc, #100]	; (80073d0 <TIM_OC4_SetConfig+0xc0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00b      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <TIM_OC4_SetConfig+0xc4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <TIM_OC4_SetConfig+0xc8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a16      	ldr	r2, [pc, #88]	; (80073dc <TIM_OC4_SetConfig+0xcc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d109      	bne.n	800739c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <TIM_OC4_SetConfig+0xd0>)
 800738c:	4013      	ands	r3, r2
 800738e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	019b      	lsls	r3, r3, #6
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b006      	add	sp, #24
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	ffffefff 	.word	0xffffefff
 80073c4:	ffff8fff 	.word	0xffff8fff
 80073c8:	fffffcff 	.word	0xfffffcff
 80073cc:	ffffdfff 	.word	0xffffdfff
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800
 80073e0:	ffffbfff 	.word	0xffffbfff

080073e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	2201      	movs	r2, #1
 80073fc:	4393      	bics	r3, r2
 80073fe:	001a      	movs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	22f0      	movs	r2, #240	; 0xf0
 800740e:	4393      	bics	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	220a      	movs	r2, #10
 8007420:	4393      	bics	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b006      	add	sp, #24
 800743e:	bd80      	pop	{r7, pc}

08007440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	2210      	movs	r2, #16
 8007452:	4393      	bics	r3, r2
 8007454:	001a      	movs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	4a0d      	ldr	r2, [pc, #52]	; (80074a0 <TIM_TI2_ConfigInputStage+0x60>)
 800746a:	4013      	ands	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	22a0      	movs	r2, #160	; 0xa0
 800747c:	4393      	bics	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	46bd      	mov	sp, r7
 800749a:	b006      	add	sp, #24
 800749c:	bd80      	pop	{r7, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	ffff0fff 	.word	0xffff0fff

080074a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2270      	movs	r2, #112	; 0x70
 80074b8:	4393      	bics	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	2207      	movs	r2, #7
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <TIM_ETR_SetConfig+0x3c>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	021a      	lsls	r2, r3, #8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	609a      	str	r2, [r3, #8]
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b006      	add	sp, #24
 8007512:	bd80      	pop	{r7, pc}
 8007514:	ffff00ff 	.word	0xffff00ff

08007518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	221f      	movs	r2, #31
 8007528:	4013      	ands	r3, r2
 800752a:	2201      	movs	r2, #1
 800752c:	409a      	lsls	r2, r3
 800752e:	0013      	movs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	43d2      	mvns	r2, r2
 800753a:	401a      	ands	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1a      	ldr	r2, [r3, #32]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	211f      	movs	r1, #31
 8007548:	400b      	ands	r3, r1
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4099      	lsls	r1, r3
 800754e:	000b      	movs	r3, r1
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	46bd      	mov	sp, r7
 800755a:	b006      	add	sp, #24
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	223c      	movs	r2, #60	; 0x3c
 800756e:	5c9b      	ldrb	r3, [r3, r2]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007574:	2302      	movs	r3, #2
 8007576:	e047      	b.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	223c      	movs	r2, #60	; 0x3c
 800757c:	2101      	movs	r1, #1
 800757e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	223d      	movs	r2, #61	; 0x3d
 8007584:	2102      	movs	r1, #2
 8007586:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2270      	movs	r2, #112	; 0x70
 800759c:	4393      	bics	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a16      	ldr	r2, [pc, #88]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00f      	beq.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2380      	movs	r3, #128	; 0x80
 80075c2:	05db      	lsls	r3, r3, #23
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d009      	beq.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a11      	ldr	r2, [pc, #68]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a10      	ldr	r2, [pc, #64]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10c      	bne.n	80075f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2280      	movs	r2, #128	; 0x80
 80075e0:	4393      	bics	r3, r2
 80075e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	223d      	movs	r2, #61	; 0x3d
 80075fa:	2101      	movs	r1, #1
 80075fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	223c      	movs	r2, #60	; 0x3c
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b004      	add	sp, #16
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40000400 	.word	0x40000400
 8007618:	40014000 	.word	0x40014000

0800761c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	223c      	movs	r2, #60	; 0x3c
 800762e:	5c9b      	ldrb	r3, [r3, r2]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007634:	2302      	movs	r3, #2
 8007636:	e03e      	b.n	80076b6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	223c      	movs	r2, #60	; 0x3c
 800763c:	2101      	movs	r1, #1
 800763e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	22ff      	movs	r2, #255	; 0xff
 8007644:	4393      	bics	r3, r2
 8007646:	001a      	movs	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007654:	401a      	ands	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007662:	401a      	ands	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007670:	401a      	ands	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800767e:	401a      	ands	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800768c:	401a      	ands	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800769a:	401a      	ands	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	223c      	movs	r2, #60	; 0x3c
 80076b0:	2100      	movs	r1, #0
 80076b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	0018      	movs	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	b004      	add	sp, #16
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	fffffcff 	.word	0xfffffcff
 80076c4:	fffffbff 	.word	0xfffffbff
 80076c8:	fffff7ff 	.word	0xfffff7ff
 80076cc:	ffffefff 	.word	0xffffefff
 80076d0:	ffffdfff 	.word	0xffffdfff
 80076d4:	ffffbfff 	.word	0xffffbfff

080076d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b002      	add	sp, #8
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f0:	46c0      	nop			; (mov r8, r8)
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b002      	add	sp, #8
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e044      	b.n	8007794 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770e:	2b00      	cmp	r3, #0
 8007710:	d107      	bne.n	8007722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2274      	movs	r2, #116	; 0x74
 8007716:	2100      	movs	r1, #0
 8007718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	0018      	movs	r0, r3
 800771e:	f7fc fda9 	bl	8004274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2224      	movs	r2, #36	; 0x24
 8007726:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2101      	movs	r1, #1
 8007734:	438a      	bics	r2, r1
 8007736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	0018      	movs	r0, r3
 800773c:	f000 f830 	bl	80077a0 <UART_SetConfig>
 8007740:	0003      	movs	r3, r0
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e024      	b.n	8007794 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0018      	movs	r0, r3
 8007756:	f000 fa0b 	bl	8007b70 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	490d      	ldr	r1, [pc, #52]	; (800779c <HAL_UART_Init+0xa4>)
 8007766:	400a      	ands	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	212a      	movs	r1, #42	; 0x2a
 8007776:	438a      	bics	r2, r1
 8007778:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2101      	movs	r1, #1
 8007786:	430a      	orrs	r2, r1
 8007788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 faa3 	bl	8007cd8 <UART_CheckIdleState>
 8007792:	0003      	movs	r3, r0
}
 8007794:	0018      	movs	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}
 800779c:	ffffb7ff 	.word	0xffffb7ff

080077a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077a8:	231e      	movs	r3, #30
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4abe      	ldr	r2, [pc, #760]	; (8007ac8 <UART_SetConfig+0x328>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	0019      	movs	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	430a      	orrs	r2, r1
 80077dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	4ab9      	ldr	r2, [pc, #740]	; (8007acc <UART_SetConfig+0x32c>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	0019      	movs	r1, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4ab0      	ldr	r2, [pc, #704]	; (8007ad0 <UART_SetConfig+0x330>)
 800780e:	4013      	ands	r3, r2
 8007810:	0019      	movs	r1, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4aac      	ldr	r2, [pc, #688]	; (8007ad4 <UART_SetConfig+0x334>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d127      	bne.n	8007876 <UART_SetConfig+0xd6>
 8007826:	4bac      	ldr	r3, [pc, #688]	; (8007ad8 <UART_SetConfig+0x338>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	2203      	movs	r2, #3
 800782c:	4013      	ands	r3, r2
 800782e:	2b03      	cmp	r3, #3
 8007830:	d00d      	beq.n	800784e <UART_SetConfig+0xae>
 8007832:	d81b      	bhi.n	800786c <UART_SetConfig+0xcc>
 8007834:	2b02      	cmp	r3, #2
 8007836:	d014      	beq.n	8007862 <UART_SetConfig+0xc2>
 8007838:	d818      	bhi.n	800786c <UART_SetConfig+0xcc>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <UART_SetConfig+0xa4>
 800783e:	2b01      	cmp	r3, #1
 8007840:	d00a      	beq.n	8007858 <UART_SetConfig+0xb8>
 8007842:	e013      	b.n	800786c <UART_SetConfig+0xcc>
 8007844:	231f      	movs	r3, #31
 8007846:	18fb      	adds	r3, r7, r3
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	e0bd      	b.n	80079ca <UART_SetConfig+0x22a>
 800784e:	231f      	movs	r3, #31
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e0b8      	b.n	80079ca <UART_SetConfig+0x22a>
 8007858:	231f      	movs	r3, #31
 800785a:	18fb      	adds	r3, r7, r3
 800785c:	2204      	movs	r2, #4
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e0b3      	b.n	80079ca <UART_SetConfig+0x22a>
 8007862:	231f      	movs	r3, #31
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	2208      	movs	r2, #8
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e0ae      	b.n	80079ca <UART_SetConfig+0x22a>
 800786c:	231f      	movs	r3, #31
 800786e:	18fb      	adds	r3, r7, r3
 8007870:	2210      	movs	r2, #16
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e0a9      	b.n	80079ca <UART_SetConfig+0x22a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a98      	ldr	r2, [pc, #608]	; (8007adc <UART_SetConfig+0x33c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d134      	bne.n	80078ea <UART_SetConfig+0x14a>
 8007880:	4b95      	ldr	r3, [pc, #596]	; (8007ad8 <UART_SetConfig+0x338>)
 8007882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007884:	23c0      	movs	r3, #192	; 0xc0
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	4013      	ands	r3, r2
 800788a:	22c0      	movs	r2, #192	; 0xc0
 800788c:	0292      	lsls	r2, r2, #10
 800788e:	4293      	cmp	r3, r2
 8007890:	d017      	beq.n	80078c2 <UART_SetConfig+0x122>
 8007892:	22c0      	movs	r2, #192	; 0xc0
 8007894:	0292      	lsls	r2, r2, #10
 8007896:	4293      	cmp	r3, r2
 8007898:	d822      	bhi.n	80078e0 <UART_SetConfig+0x140>
 800789a:	2280      	movs	r2, #128	; 0x80
 800789c:	0292      	lsls	r2, r2, #10
 800789e:	4293      	cmp	r3, r2
 80078a0:	d019      	beq.n	80078d6 <UART_SetConfig+0x136>
 80078a2:	2280      	movs	r2, #128	; 0x80
 80078a4:	0292      	lsls	r2, r2, #10
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d81a      	bhi.n	80078e0 <UART_SetConfig+0x140>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <UART_SetConfig+0x118>
 80078ae:	2280      	movs	r2, #128	; 0x80
 80078b0:	0252      	lsls	r2, r2, #9
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00a      	beq.n	80078cc <UART_SetConfig+0x12c>
 80078b6:	e013      	b.n	80078e0 <UART_SetConfig+0x140>
 80078b8:	231f      	movs	r3, #31
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	e083      	b.n	80079ca <UART_SetConfig+0x22a>
 80078c2:	231f      	movs	r3, #31
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	2202      	movs	r2, #2
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e07e      	b.n	80079ca <UART_SetConfig+0x22a>
 80078cc:	231f      	movs	r3, #31
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	2204      	movs	r2, #4
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e079      	b.n	80079ca <UART_SetConfig+0x22a>
 80078d6:	231f      	movs	r3, #31
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e074      	b.n	80079ca <UART_SetConfig+0x22a>
 80078e0:	231f      	movs	r3, #31
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	2210      	movs	r2, #16
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	e06f      	b.n	80079ca <UART_SetConfig+0x22a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7c      	ldr	r2, [pc, #496]	; (8007ae0 <UART_SetConfig+0x340>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d134      	bne.n	800795e <UART_SetConfig+0x1be>
 80078f4:	4b78      	ldr	r3, [pc, #480]	; (8007ad8 <UART_SetConfig+0x338>)
 80078f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078f8:	23c0      	movs	r3, #192	; 0xc0
 80078fa:	031b      	lsls	r3, r3, #12
 80078fc:	4013      	ands	r3, r2
 80078fe:	22c0      	movs	r2, #192	; 0xc0
 8007900:	0312      	lsls	r2, r2, #12
 8007902:	4293      	cmp	r3, r2
 8007904:	d017      	beq.n	8007936 <UART_SetConfig+0x196>
 8007906:	22c0      	movs	r2, #192	; 0xc0
 8007908:	0312      	lsls	r2, r2, #12
 800790a:	4293      	cmp	r3, r2
 800790c:	d822      	bhi.n	8007954 <UART_SetConfig+0x1b4>
 800790e:	2280      	movs	r2, #128	; 0x80
 8007910:	0312      	lsls	r2, r2, #12
 8007912:	4293      	cmp	r3, r2
 8007914:	d019      	beq.n	800794a <UART_SetConfig+0x1aa>
 8007916:	2280      	movs	r2, #128	; 0x80
 8007918:	0312      	lsls	r2, r2, #12
 800791a:	4293      	cmp	r3, r2
 800791c:	d81a      	bhi.n	8007954 <UART_SetConfig+0x1b4>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <UART_SetConfig+0x18c>
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	02d2      	lsls	r2, r2, #11
 8007926:	4293      	cmp	r3, r2
 8007928:	d00a      	beq.n	8007940 <UART_SetConfig+0x1a0>
 800792a:	e013      	b.n	8007954 <UART_SetConfig+0x1b4>
 800792c:	231f      	movs	r3, #31
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e049      	b.n	80079ca <UART_SetConfig+0x22a>
 8007936:	231f      	movs	r3, #31
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e044      	b.n	80079ca <UART_SetConfig+0x22a>
 8007940:	231f      	movs	r3, #31
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	2204      	movs	r2, #4
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e03f      	b.n	80079ca <UART_SetConfig+0x22a>
 800794a:	231f      	movs	r3, #31
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	2208      	movs	r2, #8
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e03a      	b.n	80079ca <UART_SetConfig+0x22a>
 8007954:	231f      	movs	r3, #31
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	2210      	movs	r2, #16
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e035      	b.n	80079ca <UART_SetConfig+0x22a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a60      	ldr	r2, [pc, #384]	; (8007ae4 <UART_SetConfig+0x344>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d104      	bne.n	8007972 <UART_SetConfig+0x1d2>
 8007968:	231f      	movs	r3, #31
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e02b      	b.n	80079ca <UART_SetConfig+0x22a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a5c      	ldr	r2, [pc, #368]	; (8007ae8 <UART_SetConfig+0x348>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d104      	bne.n	8007986 <UART_SetConfig+0x1e6>
 800797c:	231f      	movs	r3, #31
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e021      	b.n	80079ca <UART_SetConfig+0x22a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a58      	ldr	r2, [pc, #352]	; (8007aec <UART_SetConfig+0x34c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d104      	bne.n	800799a <UART_SetConfig+0x1fa>
 8007990:	231f      	movs	r3, #31
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e017      	b.n	80079ca <UART_SetConfig+0x22a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a54      	ldr	r2, [pc, #336]	; (8007af0 <UART_SetConfig+0x350>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d104      	bne.n	80079ae <UART_SetConfig+0x20e>
 80079a4:	231f      	movs	r3, #31
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	e00d      	b.n	80079ca <UART_SetConfig+0x22a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a50      	ldr	r2, [pc, #320]	; (8007af4 <UART_SetConfig+0x354>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d104      	bne.n	80079c2 <UART_SetConfig+0x222>
 80079b8:	231f      	movs	r3, #31
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	e003      	b.n	80079ca <UART_SetConfig+0x22a>
 80079c2:	231f      	movs	r3, #31
 80079c4:	18fb      	adds	r3, r7, r3
 80079c6:	2210      	movs	r2, #16
 80079c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d15d      	bne.n	8007a92 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80079d6:	231f      	movs	r3, #31
 80079d8:	18fb      	adds	r3, r7, r3
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d015      	beq.n	8007a0c <UART_SetConfig+0x26c>
 80079e0:	dc18      	bgt.n	8007a14 <UART_SetConfig+0x274>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00d      	beq.n	8007a02 <UART_SetConfig+0x262>
 80079e6:	dc15      	bgt.n	8007a14 <UART_SetConfig+0x274>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UART_SetConfig+0x252>
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d005      	beq.n	80079fc <UART_SetConfig+0x25c>
 80079f0:	e010      	b.n	8007a14 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f2:	f7fe fb7f 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 80079f6:	0003      	movs	r3, r0
 80079f8:	61bb      	str	r3, [r7, #24]
        break;
 80079fa:	e012      	b.n	8007a22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b3e      	ldr	r3, [pc, #248]	; (8007af8 <UART_SetConfig+0x358>)
 80079fe:	61bb      	str	r3, [r7, #24]
        break;
 8007a00:	e00f      	b.n	8007a22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fe faed 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8007a06:	0003      	movs	r3, r0
 8007a08:	61bb      	str	r3, [r7, #24]
        break;
 8007a0a:	e00a      	b.n	8007a22 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	61bb      	str	r3, [r7, #24]
        break;
 8007a12:	e006      	b.n	8007a22 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a18:	231e      	movs	r3, #30
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	701a      	strb	r2, [r3, #0]
        break;
 8007a20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d100      	bne.n	8007a2a <UART_SetConfig+0x28a>
 8007a28:	e095      	b.n	8007b56 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	005a      	lsls	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	18d2      	adds	r2, r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	f7f8 fb7d 	bl	800013c <__udivsi3>
 8007a42:	0003      	movs	r3, r0
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d91c      	bls.n	8007a88 <UART_SetConfig+0x2e8>
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	025b      	lsls	r3, r3, #9
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d217      	bcs.n	8007a88 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	200e      	movs	r0, #14
 8007a5e:	183b      	adds	r3, r7, r0
 8007a60:	210f      	movs	r1, #15
 8007a62:	438a      	bics	r2, r1
 8007a64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2207      	movs	r2, #7
 8007a6e:	4013      	ands	r3, r2
 8007a70:	b299      	uxth	r1, r3
 8007a72:	183b      	adds	r3, r7, r0
 8007a74:	183a      	adds	r2, r7, r0
 8007a76:	8812      	ldrh	r2, [r2, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	183a      	adds	r2, r7, r0
 8007a82:	8812      	ldrh	r2, [r2, #0]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e066      	b.n	8007b56 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007a88:	231e      	movs	r3, #30
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e061      	b.n	8007b56 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a92:	231f      	movs	r3, #31
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d02f      	beq.n	8007afc <UART_SetConfig+0x35c>
 8007a9c:	dc32      	bgt.n	8007b04 <UART_SetConfig+0x364>
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d00d      	beq.n	8007abe <UART_SetConfig+0x31e>
 8007aa2:	dc2f      	bgt.n	8007b04 <UART_SetConfig+0x364>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <UART_SetConfig+0x30e>
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d005      	beq.n	8007ab8 <UART_SetConfig+0x318>
 8007aac:	e02a      	b.n	8007b04 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aae:	f7fe fb21 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8007ab2:	0003      	movs	r3, r0
 8007ab4:	61bb      	str	r3, [r7, #24]
        break;
 8007ab6:	e02c      	b.n	8007b12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <UART_SetConfig+0x358>)
 8007aba:	61bb      	str	r3, [r7, #24]
        break;
 8007abc:	e029      	b.n	8007b12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007abe:	f7fe fa8f 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	61bb      	str	r3, [r7, #24]
        break;
 8007ac6:	e024      	b.n	8007b12 <UART_SetConfig+0x372>
 8007ac8:	efff69f3 	.word	0xefff69f3
 8007acc:	ffffcfff 	.word	0xffffcfff
 8007ad0:	fffff4ff 	.word	0xfffff4ff
 8007ad4:	40013800 	.word	0x40013800
 8007ad8:	40021000 	.word	0x40021000
 8007adc:	40004400 	.word	0x40004400
 8007ae0:	40004800 	.word	0x40004800
 8007ae4:	40004c00 	.word	0x40004c00
 8007ae8:	40005000 	.word	0x40005000
 8007aec:	40011400 	.word	0x40011400
 8007af0:	40011800 	.word	0x40011800
 8007af4:	40011c00 	.word	0x40011c00
 8007af8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	61bb      	str	r3, [r7, #24]
        break;
 8007b02:	e006      	b.n	8007b12 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b08:	231e      	movs	r3, #30
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
        break;
 8007b10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01e      	beq.n	8007b56 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	085a      	lsrs	r2, r3, #1
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	18d2      	adds	r2, r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f7f8 fb07 	bl	800013c <__udivsi3>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d909      	bls.n	8007b4e <UART_SetConfig+0x3ae>
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	025b      	lsls	r3, r3, #9
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d204      	bcs.n	8007b4e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e003      	b.n	8007b56 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4e:	231e      	movs	r3, #30
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b62:	231e      	movs	r3, #30
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	781b      	ldrb	r3, [r3, #0]
}
 8007b68:	0018      	movs	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b008      	add	sp, #32
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a4a      	ldr	r2, [pc, #296]	; (8007cb4 <UART_AdvFeatureConfig+0x144>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4a43      	ldr	r2, [pc, #268]	; (8007cb8 <UART_AdvFeatureConfig+0x148>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	0019      	movs	r1, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d00b      	beq.n	8007bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a3b      	ldr	r2, [pc, #236]	; (8007cbc <UART_AdvFeatureConfig+0x14c>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	0019      	movs	r1, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	2208      	movs	r2, #8
 8007be4:	4013      	ands	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4a34      	ldr	r2, [pc, #208]	; (8007cc0 <UART_AdvFeatureConfig+0x150>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2210      	movs	r2, #16
 8007c06:	4013      	ands	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	4a2c      	ldr	r2, [pc, #176]	; (8007cc4 <UART_AdvFeatureConfig+0x154>)
 8007c12:	4013      	ands	r3, r2
 8007c14:	0019      	movs	r1, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	2220      	movs	r2, #32
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d00b      	beq.n	8007c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	4a25      	ldr	r2, [pc, #148]	; (8007cc8 <UART_AdvFeatureConfig+0x158>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	0019      	movs	r1, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2240      	movs	r2, #64	; 0x40
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4a1d      	ldr	r2, [pc, #116]	; (8007ccc <UART_AdvFeatureConfig+0x15c>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	0019      	movs	r1, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c6a:	2380      	movs	r3, #128	; 0x80
 8007c6c:	035b      	lsls	r3, r3, #13
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d10b      	bne.n	8007c8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <UART_AdvFeatureConfig+0x160>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	0019      	movs	r1, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	4013      	ands	r3, r2
 8007c92:	d00b      	beq.n	8007cac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4a0e      	ldr	r2, [pc, #56]	; (8007cd4 <UART_AdvFeatureConfig+0x164>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	46c0      	nop			; (mov r8, r8)
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b002      	add	sp, #8
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	fffdffff 	.word	0xfffdffff
 8007cb8:	fffeffff 	.word	0xfffeffff
 8007cbc:	fffbffff 	.word	0xfffbffff
 8007cc0:	ffff7fff 	.word	0xffff7fff
 8007cc4:	ffffefff 	.word	0xffffefff
 8007cc8:	ffffdfff 	.word	0xffffdfff
 8007ccc:	ffefffff 	.word	0xffefffff
 8007cd0:	ff9fffff 	.word	0xff9fffff
 8007cd4:	fff7ffff 	.word	0xfff7ffff

08007cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2280      	movs	r2, #128	; 0x80
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ce8:	f7fc fb94 	bl	8004414 <HAL_GetTick>
 8007cec:	0003      	movs	r3, r0
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d10c      	bne.n	8007d18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2280      	movs	r2, #128	; 0x80
 8007d02:	0391      	lsls	r1, r2, #14
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <UART_CheckIdleState+0x8c>)
 8007d08:	9200      	str	r2, [sp, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f000 f82c 	bl	8007d68 <UART_WaitOnFlagUntilTimeout>
 8007d10:	1e03      	subs	r3, r0, #0
 8007d12:	d001      	beq.n	8007d18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e021      	b.n	8007d5c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d10c      	bne.n	8007d40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2280      	movs	r2, #128	; 0x80
 8007d2a:	03d1      	lsls	r1, r2, #15
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4a0d      	ldr	r2, [pc, #52]	; (8007d64 <UART_CheckIdleState+0x8c>)
 8007d30:	9200      	str	r2, [sp, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f000 f818 	bl	8007d68 <UART_WaitOnFlagUntilTimeout>
 8007d38:	1e03      	subs	r3, r0, #0
 8007d3a:	d001      	beq.n	8007d40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e00d      	b.n	8007d5c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2274      	movs	r2, #116	; 0x74
 8007d56:	2100      	movs	r1, #0
 8007d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b004      	add	sp, #16
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	01ffffff 	.word	0x01ffffff

08007d68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b094      	sub	sp, #80	; 0x50
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	1dfb      	adds	r3, r7, #7
 8007d76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d78:	e0a3      	b.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	d100      	bne.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007d80:	e09f      	b.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d82:	f7fc fb47 	bl	8004414 <HAL_GetTick>
 8007d86:	0002      	movs	r2, r0
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d302      	bcc.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d13d      	bne.n	8007e14 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d98:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007da0:	647b      	str	r3, [r7, #68]	; 0x44
 8007da2:	2301      	movs	r3, #1
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f383 8810 	msr	PRIMASK, r3
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	494c      	ldr	r1, [pc, #304]	; (8007eec <UART_WaitOnFlagUntilTimeout+0x184>)
 8007dba:	400a      	ands	r2, r1
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	f383 8810 	msr	PRIMASK, r3
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dca:	f3ef 8310 	mrs	r3, PRIMASK
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f383 8810 	msr	PRIMASK, r3
}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2101      	movs	r1, #1
 8007dec:	438a      	bics	r2, r1
 8007dee:	609a      	str	r2, [r3, #8]
 8007df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df6:	f383 8810 	msr	PRIMASK, r3
}
 8007dfa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2274      	movs	r2, #116	; 0x74
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e067      	b.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	d050      	beq.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69da      	ldr	r2, [r3, #28]
 8007e26:	2380      	movs	r3, #128	; 0x80
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	401a      	ands	r2, r3
 8007e2c:	2380      	movs	r3, #128	; 0x80
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d146      	bne.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2280      	movs	r2, #128	; 0x80
 8007e3a:	0112      	lsls	r2, r2, #4
 8007e3c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e42:	613b      	str	r3, [r7, #16]
  return(result);
 8007e44:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f383 8810 	msr	PRIMASK, r3
}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4923      	ldr	r1, [pc, #140]	; (8007eec <UART_WaitOnFlagUntilTimeout+0x184>)
 8007e60:	400a      	ands	r2, r1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f383 8810 	msr	PRIMASK, r3
}
 8007e6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e70:	f3ef 8310 	mrs	r3, PRIMASK
 8007e74:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e76:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f383 8810 	msr	PRIMASK, r3
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2101      	movs	r1, #1
 8007e92:	438a      	bics	r2, r1
 8007e94:	609a      	str	r2, [r3, #8]
 8007e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ea0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	2120      	movs	r1, #32
 8007eb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2274      	movs	r2, #116	; 0x74
 8007eba:	2100      	movs	r1, #0
 8007ebc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e010      	b.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	425a      	negs	r2, r3
 8007ed2:	4153      	adcs	r3, r2
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	1dfb      	adds	r3, r7, #7
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d100      	bne.n	8007ee2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007ee0:	e74b      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b014      	add	sp, #80	; 0x50
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	fffffe5f 	.word	0xfffffe5f

08007ef0 <__errno>:
 8007ef0:	4b01      	ldr	r3, [pc, #4]	; (8007ef8 <__errno+0x8>)
 8007ef2:	6818      	ldr	r0, [r3, #0]
 8007ef4:	4770      	bx	lr
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	20000464 	.word	0x20000464

08007efc <__libc_init_array>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	2600      	movs	r6, #0
 8007f00:	4d0c      	ldr	r5, [pc, #48]	; (8007f34 <__libc_init_array+0x38>)
 8007f02:	4c0d      	ldr	r4, [pc, #52]	; (8007f38 <__libc_init_array+0x3c>)
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	42a6      	cmp	r6, r4
 8007f0a:	d109      	bne.n	8007f20 <__libc_init_array+0x24>
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	f002 ff6d 	bl	800adec <_init>
 8007f12:	4d0a      	ldr	r5, [pc, #40]	; (8007f3c <__libc_init_array+0x40>)
 8007f14:	4c0a      	ldr	r4, [pc, #40]	; (8007f40 <__libc_init_array+0x44>)
 8007f16:	1b64      	subs	r4, r4, r5
 8007f18:	10a4      	asrs	r4, r4, #2
 8007f1a:	42a6      	cmp	r6, r4
 8007f1c:	d105      	bne.n	8007f2a <__libc_init_array+0x2e>
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	00b3      	lsls	r3, r6, #2
 8007f22:	58eb      	ldr	r3, [r5, r3]
 8007f24:	4798      	blx	r3
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7ee      	b.n	8007f08 <__libc_init_array+0xc>
 8007f2a:	00b3      	lsls	r3, r6, #2
 8007f2c:	58eb      	ldr	r3, [r5, r3]
 8007f2e:	4798      	blx	r3
 8007f30:	3601      	adds	r6, #1
 8007f32:	e7f2      	b.n	8007f1a <__libc_init_array+0x1e>
 8007f34:	0800dbcc 	.word	0x0800dbcc
 8007f38:	0800dbcc 	.word	0x0800dbcc
 8007f3c:	0800dbcc 	.word	0x0800dbcc
 8007f40:	0800dbd0 	.word	0x0800dbd0

08007f44 <memcpy>:
 8007f44:	2300      	movs	r3, #0
 8007f46:	b510      	push	{r4, lr}
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d100      	bne.n	8007f4e <memcpy+0xa>
 8007f4c:	bd10      	pop	{r4, pc}
 8007f4e:	5ccc      	ldrb	r4, [r1, r3]
 8007f50:	54c4      	strb	r4, [r0, r3]
 8007f52:	3301      	adds	r3, #1
 8007f54:	e7f8      	b.n	8007f48 <memcpy+0x4>

08007f56 <memmove>:
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4288      	cmp	r0, r1
 8007f5a:	d902      	bls.n	8007f62 <memmove+0xc>
 8007f5c:	188b      	adds	r3, r1, r2
 8007f5e:	4298      	cmp	r0, r3
 8007f60:	d303      	bcc.n	8007f6a <memmove+0x14>
 8007f62:	2300      	movs	r3, #0
 8007f64:	e007      	b.n	8007f76 <memmove+0x20>
 8007f66:	5c8b      	ldrb	r3, [r1, r2]
 8007f68:	5483      	strb	r3, [r0, r2]
 8007f6a:	3a01      	subs	r2, #1
 8007f6c:	d2fb      	bcs.n	8007f66 <memmove+0x10>
 8007f6e:	bd10      	pop	{r4, pc}
 8007f70:	5ccc      	ldrb	r4, [r1, r3]
 8007f72:	54c4      	strb	r4, [r0, r3]
 8007f74:	3301      	adds	r3, #1
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d1fa      	bne.n	8007f70 <memmove+0x1a>
 8007f7a:	e7f8      	b.n	8007f6e <memmove+0x18>

08007f7c <memset>:
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	1882      	adds	r2, r0, r2
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	7019      	strb	r1, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <__cvt>:
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	001e      	movs	r6, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	0014      	movs	r4, r2
 8007f94:	b08b      	sub	sp, #44	; 0x2c
 8007f96:	429e      	cmp	r6, r3
 8007f98:	da04      	bge.n	8007fa4 <__cvt+0x18>
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	0609      	lsls	r1, r1, #24
 8007f9e:	1873      	adds	r3, r6, r1
 8007fa0:	001e      	movs	r6, r3
 8007fa2:	232d      	movs	r3, #45	; 0x2d
 8007fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fa6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007fa8:	7013      	strb	r3, [r2, #0]
 8007faa:	2320      	movs	r3, #32
 8007fac:	2203      	movs	r2, #3
 8007fae:	439f      	bics	r7, r3
 8007fb0:	2f46      	cmp	r7, #70	; 0x46
 8007fb2:	d007      	beq.n	8007fc4 <__cvt+0x38>
 8007fb4:	003b      	movs	r3, r7
 8007fb6:	3b45      	subs	r3, #69	; 0x45
 8007fb8:	4259      	negs	r1, r3
 8007fba:	414b      	adcs	r3, r1
 8007fbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007fbe:	3a01      	subs	r2, #1
 8007fc0:	18cb      	adds	r3, r1, r3
 8007fc2:	9310      	str	r3, [sp, #64]	; 0x40
 8007fc4:	ab09      	add	r3, sp, #36	; 0x24
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	ab08      	add	r3, sp, #32
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fd4:	0022      	movs	r2, r4
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	0033      	movs	r3, r6
 8007fda:	f000 fcfd 	bl	80089d8 <_dtoa_r>
 8007fde:	0005      	movs	r5, r0
 8007fe0:	2f47      	cmp	r7, #71	; 0x47
 8007fe2:	d102      	bne.n	8007fea <__cvt+0x5e>
 8007fe4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d528      	bpl.n	800803c <__cvt+0xb0>
 8007fea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fec:	18eb      	adds	r3, r5, r3
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	2f46      	cmp	r7, #70	; 0x46
 8007ff2:	d114      	bne.n	800801e <__cvt+0x92>
 8007ff4:	782b      	ldrb	r3, [r5, #0]
 8007ff6:	2b30      	cmp	r3, #48	; 0x30
 8007ff8:	d10c      	bne.n	8008014 <__cvt+0x88>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	0020      	movs	r0, r4
 8008000:	0031      	movs	r1, r6
 8008002:	f7f8 fa21 	bl	8000448 <__aeabi_dcmpeq>
 8008006:	2800      	cmp	r0, #0
 8008008:	d104      	bne.n	8008014 <__cvt+0x88>
 800800a:	2301      	movs	r3, #1
 800800c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008016:	9a07      	ldr	r2, [sp, #28]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	18d3      	adds	r3, r2, r3
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	2200      	movs	r2, #0
 8008020:	2300      	movs	r3, #0
 8008022:	0020      	movs	r0, r4
 8008024:	0031      	movs	r1, r6
 8008026:	f7f8 fa0f 	bl	8000448 <__aeabi_dcmpeq>
 800802a:	2800      	cmp	r0, #0
 800802c:	d001      	beq.n	8008032 <__cvt+0xa6>
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	2230      	movs	r2, #48	; 0x30
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	9907      	ldr	r1, [sp, #28]
 8008038:	428b      	cmp	r3, r1
 800803a:	d306      	bcc.n	800804a <__cvt+0xbe>
 800803c:	0028      	movs	r0, r5
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008042:	1b5b      	subs	r3, r3, r5
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	b00b      	add	sp, #44	; 0x2c
 8008048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800804a:	1c59      	adds	r1, r3, #1
 800804c:	9109      	str	r1, [sp, #36]	; 0x24
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e7f0      	b.n	8008034 <__cvt+0xa8>

08008052 <__exponent>:
 8008052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008054:	1c83      	adds	r3, r0, #2
 8008056:	b087      	sub	sp, #28
 8008058:	9303      	str	r3, [sp, #12]
 800805a:	0005      	movs	r5, r0
 800805c:	000c      	movs	r4, r1
 800805e:	232b      	movs	r3, #43	; 0x2b
 8008060:	7002      	strb	r2, [r0, #0]
 8008062:	2900      	cmp	r1, #0
 8008064:	da01      	bge.n	800806a <__exponent+0x18>
 8008066:	424c      	negs	r4, r1
 8008068:	3302      	adds	r3, #2
 800806a:	706b      	strb	r3, [r5, #1]
 800806c:	2c09      	cmp	r4, #9
 800806e:	dd31      	ble.n	80080d4 <__exponent+0x82>
 8008070:	270a      	movs	r7, #10
 8008072:	ab04      	add	r3, sp, #16
 8008074:	1dde      	adds	r6, r3, #7
 8008076:	0020      	movs	r0, r4
 8008078:	0039      	movs	r1, r7
 800807a:	9601      	str	r6, [sp, #4]
 800807c:	f7f8 f9ce 	bl	800041c <__aeabi_idivmod>
 8008080:	3e01      	subs	r6, #1
 8008082:	3130      	adds	r1, #48	; 0x30
 8008084:	0020      	movs	r0, r4
 8008086:	7031      	strb	r1, [r6, #0]
 8008088:	0039      	movs	r1, r7
 800808a:	9402      	str	r4, [sp, #8]
 800808c:	f7f8 f8e0 	bl	8000250 <__divsi3>
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	0004      	movs	r4, r0
 8008094:	2b63      	cmp	r3, #99	; 0x63
 8008096:	dcee      	bgt.n	8008076 <__exponent+0x24>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	3430      	adds	r4, #48	; 0x30
 800809c:	1e9a      	subs	r2, r3, #2
 800809e:	0013      	movs	r3, r2
 80080a0:	9903      	ldr	r1, [sp, #12]
 80080a2:	7014      	strb	r4, [r2, #0]
 80080a4:	a804      	add	r0, sp, #16
 80080a6:	3007      	adds	r0, #7
 80080a8:	4298      	cmp	r0, r3
 80080aa:	d80e      	bhi.n	80080ca <__exponent+0x78>
 80080ac:	ab04      	add	r3, sp, #16
 80080ae:	3307      	adds	r3, #7
 80080b0:	2000      	movs	r0, #0
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d804      	bhi.n	80080c0 <__exponent+0x6e>
 80080b6:	ab04      	add	r3, sp, #16
 80080b8:	3009      	adds	r0, #9
 80080ba:	18c0      	adds	r0, r0, r3
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	1ac0      	subs	r0, r0, r3
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	1818      	adds	r0, r3, r0
 80080c4:	1b40      	subs	r0, r0, r5
 80080c6:	b007      	add	sp, #28
 80080c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ca:	7818      	ldrb	r0, [r3, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	7008      	strb	r0, [r1, #0]
 80080d0:	3101      	adds	r1, #1
 80080d2:	e7e7      	b.n	80080a4 <__exponent+0x52>
 80080d4:	2330      	movs	r3, #48	; 0x30
 80080d6:	18e4      	adds	r4, r4, r3
 80080d8:	70ab      	strb	r3, [r5, #2]
 80080da:	1d28      	adds	r0, r5, #4
 80080dc:	70ec      	strb	r4, [r5, #3]
 80080de:	e7f1      	b.n	80080c4 <__exponent+0x72>

080080e0 <_printf_float>:
 80080e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e2:	b095      	sub	sp, #84	; 0x54
 80080e4:	000c      	movs	r4, r1
 80080e6:	9208      	str	r2, [sp, #32]
 80080e8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80080ea:	9309      	str	r3, [sp, #36]	; 0x24
 80080ec:	0007      	movs	r7, r0
 80080ee:	f001 fa91 	bl	8009614 <_localeconv_r>
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	0018      	movs	r0, r3
 80080f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f8:	f7f8 f804 	bl	8000104 <strlen>
 80080fc:	2300      	movs	r3, #0
 80080fe:	9312      	str	r3, [sp, #72]	; 0x48
 8008100:	7e23      	ldrb	r3, [r4, #24]
 8008102:	2207      	movs	r2, #7
 8008104:	001e      	movs	r6, r3
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	900d      	str	r0, [sp, #52]	; 0x34
 800810a:	930c      	str	r3, [sp, #48]	; 0x30
 800810c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	05c9      	lsls	r1, r1, #23
 8008112:	d547      	bpl.n	80081a4 <_printf_float+0xc4>
 8008114:	189b      	adds	r3, r3, r2
 8008116:	4393      	bics	r3, r2
 8008118:	001a      	movs	r2, r3
 800811a:	3208      	adds	r2, #8
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	64a2      	str	r2, [r4, #72]	; 0x48
 8008124:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008126:	2201      	movs	r2, #1
 8008128:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800812a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800812c:	930a      	str	r3, [sp, #40]	; 0x28
 800812e:	006b      	lsls	r3, r5, #1
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	930e      	str	r3, [sp, #56]	; 0x38
 8008134:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008136:	4ba8      	ldr	r3, [pc, #672]	; (80083d8 <_printf_float+0x2f8>)
 8008138:	990e      	ldr	r1, [sp, #56]	; 0x38
 800813a:	4252      	negs	r2, r2
 800813c:	f7fa f96a 	bl	8002414 <__aeabi_dcmpun>
 8008140:	2800      	cmp	r0, #0
 8008142:	d131      	bne.n	80081a8 <_printf_float+0xc8>
 8008144:	2201      	movs	r2, #1
 8008146:	4ba4      	ldr	r3, [pc, #656]	; (80083d8 <_printf_float+0x2f8>)
 8008148:	980a      	ldr	r0, [sp, #40]	; 0x28
 800814a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800814c:	4252      	negs	r2, r2
 800814e:	f7f8 f98b 	bl	8000468 <__aeabi_dcmple>
 8008152:	2800      	cmp	r0, #0
 8008154:	d128      	bne.n	80081a8 <_printf_float+0xc8>
 8008156:	2200      	movs	r2, #0
 8008158:	2300      	movs	r3, #0
 800815a:	0029      	movs	r1, r5
 800815c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800815e:	f7f8 f979 	bl	8000454 <__aeabi_dcmplt>
 8008162:	2800      	cmp	r0, #0
 8008164:	d003      	beq.n	800816e <_printf_float+0x8e>
 8008166:	0023      	movs	r3, r4
 8008168:	222d      	movs	r2, #45	; 0x2d
 800816a:	3343      	adds	r3, #67	; 0x43
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	4d9b      	ldr	r5, [pc, #620]	; (80083dc <_printf_float+0x2fc>)
 8008170:	2e47      	cmp	r6, #71	; 0x47
 8008172:	d900      	bls.n	8008176 <_printf_float+0x96>
 8008174:	4d9a      	ldr	r5, [pc, #616]	; (80083e0 <_printf_float+0x300>)
 8008176:	2303      	movs	r3, #3
 8008178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	3301      	adds	r3, #1
 800817e:	439a      	bics	r2, r3
 8008180:	2300      	movs	r3, #0
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	930a      	str	r3, [sp, #40]	; 0x28
 8008186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008188:	0021      	movs	r1, r4
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	0038      	movs	r0, r7
 800818e:	9b08      	ldr	r3, [sp, #32]
 8008190:	aa13      	add	r2, sp, #76	; 0x4c
 8008192:	f000 f9f3 	bl	800857c <_printf_common>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d000      	beq.n	800819c <_printf_float+0xbc>
 800819a:	e09e      	b.n	80082da <_printf_float+0x1fa>
 800819c:	2001      	movs	r0, #1
 800819e:	4240      	negs	r0, r0
 80081a0:	b015      	add	sp, #84	; 0x54
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a4:	3307      	adds	r3, #7
 80081a6:	e7b6      	b.n	8008116 <_printf_float+0x36>
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	002b      	movs	r3, r5
 80081ac:	0010      	movs	r0, r2
 80081ae:	0029      	movs	r1, r5
 80081b0:	f7fa f930 	bl	8002414 <__aeabi_dcmpun>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d00a      	beq.n	80081ce <_printf_float+0xee>
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	da03      	bge.n	80081c4 <_printf_float+0xe4>
 80081bc:	0023      	movs	r3, r4
 80081be:	222d      	movs	r2, #45	; 0x2d
 80081c0:	3343      	adds	r3, #67	; 0x43
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	4d87      	ldr	r5, [pc, #540]	; (80083e4 <_printf_float+0x304>)
 80081c6:	2e47      	cmp	r6, #71	; 0x47
 80081c8:	d9d5      	bls.n	8008176 <_printf_float+0x96>
 80081ca:	4d87      	ldr	r5, [pc, #540]	; (80083e8 <_printf_float+0x308>)
 80081cc:	e7d3      	b.n	8008176 <_printf_float+0x96>
 80081ce:	2220      	movs	r2, #32
 80081d0:	0031      	movs	r1, r6
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	4391      	bics	r1, r2
 80081d6:	910e      	str	r1, [sp, #56]	; 0x38
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	d147      	bne.n	800826c <_printf_float+0x18c>
 80081dc:	3307      	adds	r3, #7
 80081de:	6063      	str	r3, [r4, #4]
 80081e0:	2380      	movs	r3, #128	; 0x80
 80081e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	2200      	movs	r2, #0
 80081ea:	9206      	str	r2, [sp, #24]
 80081ec:	aa12      	add	r2, sp, #72	; 0x48
 80081ee:	9205      	str	r2, [sp, #20]
 80081f0:	aa11      	add	r2, sp, #68	; 0x44
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	2223      	movs	r2, #35	; 0x23
 80081f6:	a908      	add	r1, sp, #32
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	1852      	adds	r2, r2, r1
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	0038      	movs	r0, r7
 8008206:	002b      	movs	r3, r5
 8008208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820a:	9604      	str	r6, [sp, #16]
 800820c:	f7ff febe 	bl	8007f8c <__cvt>
 8008210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008212:	0005      	movs	r5, r0
 8008214:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008216:	2b47      	cmp	r3, #71	; 0x47
 8008218:	d108      	bne.n	800822c <_printf_float+0x14c>
 800821a:	1ccb      	adds	r3, r1, #3
 800821c:	db02      	blt.n	8008224 <_printf_float+0x144>
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	4299      	cmp	r1, r3
 8008222:	dd46      	ble.n	80082b2 <_printf_float+0x1d2>
 8008224:	0033      	movs	r3, r6
 8008226:	3b02      	subs	r3, #2
 8008228:	b2db      	uxtb	r3, r3
 800822a:	001e      	movs	r6, r3
 800822c:	2e65      	cmp	r6, #101	; 0x65
 800822e:	d824      	bhi.n	800827a <_printf_float+0x19a>
 8008230:	0020      	movs	r0, r4
 8008232:	0032      	movs	r2, r6
 8008234:	3901      	subs	r1, #1
 8008236:	3050      	adds	r0, #80	; 0x50
 8008238:	9111      	str	r1, [sp, #68]	; 0x44
 800823a:	f7ff ff0a 	bl	8008052 <__exponent>
 800823e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008240:	900a      	str	r0, [sp, #40]	; 0x28
 8008242:	1813      	adds	r3, r2, r0
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	2a01      	cmp	r2, #1
 8008248:	dc02      	bgt.n	8008250 <_printf_float+0x170>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	07d2      	lsls	r2, r2, #31
 800824e:	d501      	bpl.n	8008254 <_printf_float+0x174>
 8008250:	3301      	adds	r3, #1
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	2323      	movs	r3, #35	; 0x23
 8008256:	aa08      	add	r2, sp, #32
 8008258:	189b      	adds	r3, r3, r2
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d100      	bne.n	8008262 <_printf_float+0x182>
 8008260:	e791      	b.n	8008186 <_printf_float+0xa6>
 8008262:	0023      	movs	r3, r4
 8008264:	222d      	movs	r2, #45	; 0x2d
 8008266:	3343      	adds	r3, #67	; 0x43
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e78c      	b.n	8008186 <_printf_float+0xa6>
 800826c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826e:	2a47      	cmp	r2, #71	; 0x47
 8008270:	d1b6      	bne.n	80081e0 <_printf_float+0x100>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1b4      	bne.n	80081e0 <_printf_float+0x100>
 8008276:	3301      	adds	r3, #1
 8008278:	e7b1      	b.n	80081de <_printf_float+0xfe>
 800827a:	2e66      	cmp	r6, #102	; 0x66
 800827c:	d11b      	bne.n	80082b6 <_printf_float+0x1d6>
 800827e:	6863      	ldr	r3, [r4, #4]
 8008280:	2900      	cmp	r1, #0
 8008282:	dd0d      	ble.n	80082a0 <_printf_float+0x1c0>
 8008284:	6121      	str	r1, [r4, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <_printf_float+0x1b0>
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	07d2      	lsls	r2, r2, #31
 800828e:	d502      	bpl.n	8008296 <_printf_float+0x1b6>
 8008290:	3301      	adds	r3, #1
 8008292:	1859      	adds	r1, r3, r1
 8008294:	6121      	str	r1, [r4, #16]
 8008296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008298:	65a3      	str	r3, [r4, #88]	; 0x58
 800829a:	2300      	movs	r3, #0
 800829c:	930a      	str	r3, [sp, #40]	; 0x28
 800829e:	e7d9      	b.n	8008254 <_printf_float+0x174>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <_printf_float+0x1cc>
 80082a4:	2201      	movs	r2, #1
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	4211      	tst	r1, r2
 80082aa:	d000      	beq.n	80082ae <_printf_float+0x1ce>
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	6122      	str	r2, [r4, #16]
 80082b0:	e7f1      	b.n	8008296 <_printf_float+0x1b6>
 80082b2:	2367      	movs	r3, #103	; 0x67
 80082b4:	001e      	movs	r6, r3
 80082b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082ba:	4293      	cmp	r3, r2
 80082bc:	db06      	blt.n	80082cc <_printf_float+0x1ec>
 80082be:	6822      	ldr	r2, [r4, #0]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	07d2      	lsls	r2, r2, #31
 80082c4:	d5e7      	bpl.n	8008296 <_printf_float+0x1b6>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	e7e4      	b.n	8008296 <_printf_float+0x1b6>
 80082cc:	2101      	movs	r1, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dc01      	bgt.n	80082d6 <_printf_float+0x1f6>
 80082d2:	1849      	adds	r1, r1, r1
 80082d4:	1ac9      	subs	r1, r1, r3
 80082d6:	1852      	adds	r2, r2, r1
 80082d8:	e7e9      	b.n	80082ae <_printf_float+0x1ce>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	0553      	lsls	r3, r2, #21
 80082de:	d408      	bmi.n	80082f2 <_printf_float+0x212>
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	002a      	movs	r2, r5
 80082e4:	0038      	movs	r0, r7
 80082e6:	9908      	ldr	r1, [sp, #32]
 80082e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082ea:	47a8      	blx	r5
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d129      	bne.n	8008344 <_printf_float+0x264>
 80082f0:	e754      	b.n	800819c <_printf_float+0xbc>
 80082f2:	2e65      	cmp	r6, #101	; 0x65
 80082f4:	d800      	bhi.n	80082f8 <_printf_float+0x218>
 80082f6:	e0ec      	b.n	80084d2 <_printf_float+0x3f2>
 80082f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80082fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80082fc:	2200      	movs	r2, #0
 80082fe:	2300      	movs	r3, #0
 8008300:	f7f8 f8a2 	bl	8000448 <__aeabi_dcmpeq>
 8008304:	2800      	cmp	r0, #0
 8008306:	d034      	beq.n	8008372 <_printf_float+0x292>
 8008308:	2301      	movs	r3, #1
 800830a:	0038      	movs	r0, r7
 800830c:	4a37      	ldr	r2, [pc, #220]	; (80083ec <_printf_float+0x30c>)
 800830e:	9908      	ldr	r1, [sp, #32]
 8008310:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008312:	47a8      	blx	r5
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d100      	bne.n	800831a <_printf_float+0x23a>
 8008318:	e740      	b.n	800819c <_printf_float+0xbc>
 800831a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800831c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800831e:	4293      	cmp	r3, r2
 8008320:	db02      	blt.n	8008328 <_printf_float+0x248>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	07db      	lsls	r3, r3, #31
 8008326:	d50d      	bpl.n	8008344 <_printf_float+0x264>
 8008328:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800832a:	0038      	movs	r0, r7
 800832c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008330:	9908      	ldr	r1, [sp, #32]
 8008332:	47a8      	blx	r5
 8008334:	2500      	movs	r5, #0
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d100      	bne.n	800833c <_printf_float+0x25c>
 800833a:	e72f      	b.n	800819c <_printf_float+0xbc>
 800833c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800833e:	3b01      	subs	r3, #1
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc0a      	bgt.n	800835a <_printf_float+0x27a>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	079b      	lsls	r3, r3, #30
 8008348:	d500      	bpl.n	800834c <_printf_float+0x26c>
 800834a:	e114      	b.n	8008576 <_printf_float+0x496>
 800834c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800834e:	68e0      	ldr	r0, [r4, #12]
 8008350:	4298      	cmp	r0, r3
 8008352:	db00      	blt.n	8008356 <_printf_float+0x276>
 8008354:	e724      	b.n	80081a0 <_printf_float+0xc0>
 8008356:	0018      	movs	r0, r3
 8008358:	e722      	b.n	80081a0 <_printf_float+0xc0>
 800835a:	0022      	movs	r2, r4
 800835c:	2301      	movs	r3, #1
 800835e:	0038      	movs	r0, r7
 8008360:	9908      	ldr	r1, [sp, #32]
 8008362:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008364:	321a      	adds	r2, #26
 8008366:	47b0      	blx	r6
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d100      	bne.n	800836e <_printf_float+0x28e>
 800836c:	e716      	b.n	800819c <_printf_float+0xbc>
 800836e:	3501      	adds	r5, #1
 8008370:	e7e4      	b.n	800833c <_printf_float+0x25c>
 8008372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc3b      	bgt.n	80083f0 <_printf_float+0x310>
 8008378:	2301      	movs	r3, #1
 800837a:	0038      	movs	r0, r7
 800837c:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <_printf_float+0x30c>)
 800837e:	9908      	ldr	r1, [sp, #32]
 8008380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008382:	47b0      	blx	r6
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d100      	bne.n	800838a <_printf_float+0x2aa>
 8008388:	e708      	b.n	800819c <_printf_float+0xbc>
 800838a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800838c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800838e:	4313      	orrs	r3, r2
 8008390:	d102      	bne.n	8008398 <_printf_float+0x2b8>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	07db      	lsls	r3, r3, #31
 8008396:	d5d5      	bpl.n	8008344 <_printf_float+0x264>
 8008398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839a:	0038      	movs	r0, r7
 800839c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800839e:	9908      	ldr	r1, [sp, #32]
 80083a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083a2:	47b0      	blx	r6
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d100      	bne.n	80083aa <_printf_float+0x2ca>
 80083a8:	e6f8      	b.n	800819c <_printf_float+0xbc>
 80083aa:	2300      	movs	r3, #0
 80083ac:	930a      	str	r3, [sp, #40]	; 0x28
 80083ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083b2:	425b      	negs	r3, r3
 80083b4:	4293      	cmp	r3, r2
 80083b6:	dc01      	bgt.n	80083bc <_printf_float+0x2dc>
 80083b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ba:	e792      	b.n	80082e2 <_printf_float+0x202>
 80083bc:	0022      	movs	r2, r4
 80083be:	2301      	movs	r3, #1
 80083c0:	0038      	movs	r0, r7
 80083c2:	9908      	ldr	r1, [sp, #32]
 80083c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80083c6:	321a      	adds	r2, #26
 80083c8:	47b0      	blx	r6
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d100      	bne.n	80083d0 <_printf_float+0x2f0>
 80083ce:	e6e5      	b.n	800819c <_printf_float+0xbc>
 80083d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d2:	3301      	adds	r3, #1
 80083d4:	e7ea      	b.n	80083ac <_printf_float+0x2cc>
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	7fefffff 	.word	0x7fefffff
 80083dc:	0800d7ec 	.word	0x0800d7ec
 80083e0:	0800d7f0 	.word	0x0800d7f0
 80083e4:	0800d7f4 	.word	0x0800d7f4
 80083e8:	0800d7f8 	.word	0x0800d7f8
 80083ec:	0800d7fc 	.word	0x0800d7fc
 80083f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083f4:	920a      	str	r2, [sp, #40]	; 0x28
 80083f6:	429a      	cmp	r2, r3
 80083f8:	dd00      	ble.n	80083fc <_printf_float+0x31c>
 80083fa:	930a      	str	r3, [sp, #40]	; 0x28
 80083fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dc3d      	bgt.n	800847e <_printf_float+0x39e>
 8008402:	2300      	movs	r3, #0
 8008404:	930e      	str	r3, [sp, #56]	; 0x38
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	43db      	mvns	r3, r3
 800840a:	17db      	asrs	r3, r3, #31
 800840c:	930f      	str	r3, [sp, #60]	; 0x3c
 800840e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008412:	930c      	str	r3, [sp, #48]	; 0x30
 8008414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008416:	4013      	ands	r3, r2
 8008418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800841e:	4293      	cmp	r3, r2
 8008420:	dc36      	bgt.n	8008490 <_printf_float+0x3b0>
 8008422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008426:	4293      	cmp	r3, r2
 8008428:	db40      	blt.n	80084ac <_printf_float+0x3cc>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	07db      	lsls	r3, r3, #31
 800842e:	d43d      	bmi.n	80084ac <_printf_float+0x3cc>
 8008430:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008434:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	1a52      	subs	r2, r2, r1
 800843a:	920a      	str	r2, [sp, #40]	; 0x28
 800843c:	429a      	cmp	r2, r3
 800843e:	dd00      	ble.n	8008442 <_printf_float+0x362>
 8008440:	930a      	str	r3, [sp, #40]	; 0x28
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc3a      	bgt.n	80084be <_printf_float+0x3de>
 8008448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844a:	2500      	movs	r5, #0
 800844c:	43db      	mvns	r3, r3
 800844e:	17db      	asrs	r3, r3, #31
 8008450:	930b      	str	r3, [sp, #44]	; 0x2c
 8008452:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800845c:	400a      	ands	r2, r1
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	42ab      	cmp	r3, r5
 8008462:	dc00      	bgt.n	8008466 <_printf_float+0x386>
 8008464:	e76e      	b.n	8008344 <_printf_float+0x264>
 8008466:	0022      	movs	r2, r4
 8008468:	2301      	movs	r3, #1
 800846a:	0038      	movs	r0, r7
 800846c:	9908      	ldr	r1, [sp, #32]
 800846e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008470:	321a      	adds	r2, #26
 8008472:	47b0      	blx	r6
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d100      	bne.n	800847a <_printf_float+0x39a>
 8008478:	e690      	b.n	800819c <_printf_float+0xbc>
 800847a:	3501      	adds	r5, #1
 800847c:	e7e9      	b.n	8008452 <_printf_float+0x372>
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	002a      	movs	r2, r5
 8008482:	0038      	movs	r0, r7
 8008484:	9908      	ldr	r1, [sp, #32]
 8008486:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008488:	47b0      	blx	r6
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	d1b9      	bne.n	8008402 <_printf_float+0x322>
 800848e:	e685      	b.n	800819c <_printf_float+0xbc>
 8008490:	0022      	movs	r2, r4
 8008492:	2301      	movs	r3, #1
 8008494:	0038      	movs	r0, r7
 8008496:	9908      	ldr	r1, [sp, #32]
 8008498:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800849a:	321a      	adds	r2, #26
 800849c:	47b0      	blx	r6
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d100      	bne.n	80084a4 <_printf_float+0x3c4>
 80084a2:	e67b      	b.n	800819c <_printf_float+0xbc>
 80084a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084a6:	3301      	adds	r3, #1
 80084a8:	930e      	str	r3, [sp, #56]	; 0x38
 80084aa:	e7b0      	b.n	800840e <_printf_float+0x32e>
 80084ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ae:	0038      	movs	r0, r7
 80084b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b2:	9908      	ldr	r1, [sp, #32]
 80084b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084b6:	47b0      	blx	r6
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d1b9      	bne.n	8008430 <_printf_float+0x350>
 80084bc:	e66e      	b.n	800819c <_printf_float+0xbc>
 80084be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c0:	0038      	movs	r0, r7
 80084c2:	18ea      	adds	r2, r5, r3
 80084c4:	9908      	ldr	r1, [sp, #32]
 80084c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084ca:	47a8      	blx	r5
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d1bb      	bne.n	8008448 <_printf_float+0x368>
 80084d0:	e664      	b.n	800819c <_printf_float+0xbc>
 80084d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	dc02      	bgt.n	80084de <_printf_float+0x3fe>
 80084d8:	2301      	movs	r3, #1
 80084da:	421a      	tst	r2, r3
 80084dc:	d038      	beq.n	8008550 <_printf_float+0x470>
 80084de:	2301      	movs	r3, #1
 80084e0:	002a      	movs	r2, r5
 80084e2:	0038      	movs	r0, r7
 80084e4:	9908      	ldr	r1, [sp, #32]
 80084e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084e8:	47b0      	blx	r6
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d100      	bne.n	80084f0 <_printf_float+0x410>
 80084ee:	e655      	b.n	800819c <_printf_float+0xbc>
 80084f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f2:	0038      	movs	r0, r7
 80084f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084f6:	9908      	ldr	r1, [sp, #32]
 80084f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084fa:	47b0      	blx	r6
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d100      	bne.n	8008502 <_printf_float+0x422>
 8008500:	e64c      	b.n	800819c <_printf_float+0xbc>
 8008502:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008504:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008506:	2200      	movs	r2, #0
 8008508:	2300      	movs	r3, #0
 800850a:	f7f7 ff9d 	bl	8000448 <__aeabi_dcmpeq>
 800850e:	2800      	cmp	r0, #0
 8008510:	d11c      	bne.n	800854c <_printf_float+0x46c>
 8008512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008514:	1c6a      	adds	r2, r5, #1
 8008516:	3b01      	subs	r3, #1
 8008518:	0038      	movs	r0, r7
 800851a:	9908      	ldr	r1, [sp, #32]
 800851c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800851e:	47a8      	blx	r5
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d10f      	bne.n	8008544 <_printf_float+0x464>
 8008524:	e63a      	b.n	800819c <_printf_float+0xbc>
 8008526:	0022      	movs	r2, r4
 8008528:	2301      	movs	r3, #1
 800852a:	0038      	movs	r0, r7
 800852c:	9908      	ldr	r1, [sp, #32]
 800852e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008530:	321a      	adds	r2, #26
 8008532:	47b0      	blx	r6
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d100      	bne.n	800853a <_printf_float+0x45a>
 8008538:	e630      	b.n	800819c <_printf_float+0xbc>
 800853a:	3501      	adds	r5, #1
 800853c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800853e:	3b01      	subs	r3, #1
 8008540:	42ab      	cmp	r3, r5
 8008542:	dcf0      	bgt.n	8008526 <_printf_float+0x446>
 8008544:	0022      	movs	r2, r4
 8008546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008548:	3250      	adds	r2, #80	; 0x50
 800854a:	e6cb      	b.n	80082e4 <_printf_float+0x204>
 800854c:	2500      	movs	r5, #0
 800854e:	e7f5      	b.n	800853c <_printf_float+0x45c>
 8008550:	002a      	movs	r2, r5
 8008552:	e7e1      	b.n	8008518 <_printf_float+0x438>
 8008554:	0022      	movs	r2, r4
 8008556:	2301      	movs	r3, #1
 8008558:	0038      	movs	r0, r7
 800855a:	9908      	ldr	r1, [sp, #32]
 800855c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800855e:	3219      	adds	r2, #25
 8008560:	47b0      	blx	r6
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d100      	bne.n	8008568 <_printf_float+0x488>
 8008566:	e619      	b.n	800819c <_printf_float+0xbc>
 8008568:	3501      	adds	r5, #1
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	42ab      	cmp	r3, r5
 8008572:	dcef      	bgt.n	8008554 <_printf_float+0x474>
 8008574:	e6ea      	b.n	800834c <_printf_float+0x26c>
 8008576:	2500      	movs	r5, #0
 8008578:	e7f7      	b.n	800856a <_printf_float+0x48a>
 800857a:	46c0      	nop			; (mov r8, r8)

0800857c <_printf_common>:
 800857c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800857e:	0015      	movs	r5, r2
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	688a      	ldr	r2, [r1, #8]
 8008584:	690b      	ldr	r3, [r1, #16]
 8008586:	000c      	movs	r4, r1
 8008588:	9000      	str	r0, [sp, #0]
 800858a:	4293      	cmp	r3, r2
 800858c:	da00      	bge.n	8008590 <_printf_common+0x14>
 800858e:	0013      	movs	r3, r2
 8008590:	0022      	movs	r2, r4
 8008592:	602b      	str	r3, [r5, #0]
 8008594:	3243      	adds	r2, #67	; 0x43
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	2a00      	cmp	r2, #0
 800859a:	d001      	beq.n	80085a0 <_printf_common+0x24>
 800859c:	3301      	adds	r3, #1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	069b      	lsls	r3, r3, #26
 80085a4:	d502      	bpl.n	80085ac <_printf_common+0x30>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	3302      	adds	r3, #2
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	2306      	movs	r3, #6
 80085b0:	0017      	movs	r7, r2
 80085b2:	401f      	ands	r7, r3
 80085b4:	421a      	tst	r2, r3
 80085b6:	d027      	beq.n	8008608 <_printf_common+0x8c>
 80085b8:	0023      	movs	r3, r4
 80085ba:	3343      	adds	r3, #67	; 0x43
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	1e5a      	subs	r2, r3, #1
 80085c0:	4193      	sbcs	r3, r2
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	0692      	lsls	r2, r2, #26
 80085c6:	d430      	bmi.n	800862a <_printf_common+0xae>
 80085c8:	0022      	movs	r2, r4
 80085ca:	9901      	ldr	r1, [sp, #4]
 80085cc:	9800      	ldr	r0, [sp, #0]
 80085ce:	9e08      	ldr	r6, [sp, #32]
 80085d0:	3243      	adds	r2, #67	; 0x43
 80085d2:	47b0      	blx	r6
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d025      	beq.n	8008624 <_printf_common+0xa8>
 80085d8:	2306      	movs	r3, #6
 80085da:	6820      	ldr	r0, [r4, #0]
 80085dc:	682a      	ldr	r2, [r5, #0]
 80085de:	68e1      	ldr	r1, [r4, #12]
 80085e0:	2500      	movs	r5, #0
 80085e2:	4003      	ands	r3, r0
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d103      	bne.n	80085f0 <_printf_common+0x74>
 80085e8:	1a8d      	subs	r5, r1, r2
 80085ea:	43eb      	mvns	r3, r5
 80085ec:	17db      	asrs	r3, r3, #31
 80085ee:	401d      	ands	r5, r3
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	6922      	ldr	r2, [r4, #16]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	dd01      	ble.n	80085fc <_printf_common+0x80>
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	18ed      	adds	r5, r5, r3
 80085fc:	2700      	movs	r7, #0
 80085fe:	42bd      	cmp	r5, r7
 8008600:	d120      	bne.n	8008644 <_printf_common+0xc8>
 8008602:	2000      	movs	r0, #0
 8008604:	e010      	b.n	8008628 <_printf_common+0xac>
 8008606:	3701      	adds	r7, #1
 8008608:	68e3      	ldr	r3, [r4, #12]
 800860a:	682a      	ldr	r2, [r5, #0]
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	42bb      	cmp	r3, r7
 8008610:	ddd2      	ble.n	80085b8 <_printf_common+0x3c>
 8008612:	0022      	movs	r2, r4
 8008614:	2301      	movs	r3, #1
 8008616:	9901      	ldr	r1, [sp, #4]
 8008618:	9800      	ldr	r0, [sp, #0]
 800861a:	9e08      	ldr	r6, [sp, #32]
 800861c:	3219      	adds	r2, #25
 800861e:	47b0      	blx	r6
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d1f0      	bne.n	8008606 <_printf_common+0x8a>
 8008624:	2001      	movs	r0, #1
 8008626:	4240      	negs	r0, r0
 8008628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800862a:	2030      	movs	r0, #48	; 0x30
 800862c:	18e1      	adds	r1, r4, r3
 800862e:	3143      	adds	r1, #67	; 0x43
 8008630:	7008      	strb	r0, [r1, #0]
 8008632:	0021      	movs	r1, r4
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	3145      	adds	r1, #69	; 0x45
 8008638:	7809      	ldrb	r1, [r1, #0]
 800863a:	18a2      	adds	r2, r4, r2
 800863c:	3243      	adds	r2, #67	; 0x43
 800863e:	3302      	adds	r3, #2
 8008640:	7011      	strb	r1, [r2, #0]
 8008642:	e7c1      	b.n	80085c8 <_printf_common+0x4c>
 8008644:	0022      	movs	r2, r4
 8008646:	2301      	movs	r3, #1
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	9800      	ldr	r0, [sp, #0]
 800864c:	9e08      	ldr	r6, [sp, #32]
 800864e:	321a      	adds	r2, #26
 8008650:	47b0      	blx	r6
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d0e6      	beq.n	8008624 <_printf_common+0xa8>
 8008656:	3701      	adds	r7, #1
 8008658:	e7d1      	b.n	80085fe <_printf_common+0x82>
	...

0800865c <_printf_i>:
 800865c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865e:	b08b      	sub	sp, #44	; 0x2c
 8008660:	9206      	str	r2, [sp, #24]
 8008662:	000a      	movs	r2, r1
 8008664:	3243      	adds	r2, #67	; 0x43
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	9005      	str	r0, [sp, #20]
 800866a:	9204      	str	r2, [sp, #16]
 800866c:	7e0a      	ldrb	r2, [r1, #24]
 800866e:	000c      	movs	r4, r1
 8008670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008672:	2a78      	cmp	r2, #120	; 0x78
 8008674:	d806      	bhi.n	8008684 <_printf_i+0x28>
 8008676:	2a62      	cmp	r2, #98	; 0x62
 8008678:	d808      	bhi.n	800868c <_printf_i+0x30>
 800867a:	2a00      	cmp	r2, #0
 800867c:	d100      	bne.n	8008680 <_printf_i+0x24>
 800867e:	e0c0      	b.n	8008802 <_printf_i+0x1a6>
 8008680:	2a58      	cmp	r2, #88	; 0x58
 8008682:	d052      	beq.n	800872a <_printf_i+0xce>
 8008684:	0026      	movs	r6, r4
 8008686:	3642      	adds	r6, #66	; 0x42
 8008688:	7032      	strb	r2, [r6, #0]
 800868a:	e022      	b.n	80086d2 <_printf_i+0x76>
 800868c:	0010      	movs	r0, r2
 800868e:	3863      	subs	r0, #99	; 0x63
 8008690:	2815      	cmp	r0, #21
 8008692:	d8f7      	bhi.n	8008684 <_printf_i+0x28>
 8008694:	f7f7 fd48 	bl	8000128 <__gnu_thumb1_case_shi>
 8008698:	001f0016 	.word	0x001f0016
 800869c:	fff6fff6 	.word	0xfff6fff6
 80086a0:	fff6fff6 	.word	0xfff6fff6
 80086a4:	fff6001f 	.word	0xfff6001f
 80086a8:	fff6fff6 	.word	0xfff6fff6
 80086ac:	00a8fff6 	.word	0x00a8fff6
 80086b0:	009a0036 	.word	0x009a0036
 80086b4:	fff6fff6 	.word	0xfff6fff6
 80086b8:	fff600b9 	.word	0xfff600b9
 80086bc:	fff60036 	.word	0xfff60036
 80086c0:	009efff6 	.word	0x009efff6
 80086c4:	0026      	movs	r6, r4
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	3642      	adds	r6, #66	; 0x42
 80086ca:	1d11      	adds	r1, r2, #4
 80086cc:	6019      	str	r1, [r3, #0]
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	7033      	strb	r3, [r6, #0]
 80086d2:	2301      	movs	r3, #1
 80086d4:	e0a7      	b.n	8008826 <_printf_i+0x1ca>
 80086d6:	6808      	ldr	r0, [r1, #0]
 80086d8:	6819      	ldr	r1, [r3, #0]
 80086da:	1d0a      	adds	r2, r1, #4
 80086dc:	0605      	lsls	r5, r0, #24
 80086de:	d50b      	bpl.n	80086f8 <_printf_i+0x9c>
 80086e0:	680d      	ldr	r5, [r1, #0]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	da03      	bge.n	80086f0 <_printf_i+0x94>
 80086e8:	232d      	movs	r3, #45	; 0x2d
 80086ea:	9a04      	ldr	r2, [sp, #16]
 80086ec:	426d      	negs	r5, r5
 80086ee:	7013      	strb	r3, [r2, #0]
 80086f0:	4b61      	ldr	r3, [pc, #388]	; (8008878 <_printf_i+0x21c>)
 80086f2:	270a      	movs	r7, #10
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	e032      	b.n	800875e <_printf_i+0x102>
 80086f8:	680d      	ldr	r5, [r1, #0]
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	0641      	lsls	r1, r0, #25
 80086fe:	d5f1      	bpl.n	80086e4 <_printf_i+0x88>
 8008700:	b22d      	sxth	r5, r5
 8008702:	e7ef      	b.n	80086e4 <_printf_i+0x88>
 8008704:	680d      	ldr	r5, [r1, #0]
 8008706:	6819      	ldr	r1, [r3, #0]
 8008708:	1d08      	adds	r0, r1, #4
 800870a:	6018      	str	r0, [r3, #0]
 800870c:	062e      	lsls	r6, r5, #24
 800870e:	d501      	bpl.n	8008714 <_printf_i+0xb8>
 8008710:	680d      	ldr	r5, [r1, #0]
 8008712:	e003      	b.n	800871c <_printf_i+0xc0>
 8008714:	066d      	lsls	r5, r5, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0xb4>
 8008718:	680d      	ldr	r5, [r1, #0]
 800871a:	b2ad      	uxth	r5, r5
 800871c:	4b56      	ldr	r3, [pc, #344]	; (8008878 <_printf_i+0x21c>)
 800871e:	270a      	movs	r7, #10
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	2a6f      	cmp	r2, #111	; 0x6f
 8008724:	d117      	bne.n	8008756 <_printf_i+0xfa>
 8008726:	2708      	movs	r7, #8
 8008728:	e015      	b.n	8008756 <_printf_i+0xfa>
 800872a:	3145      	adds	r1, #69	; 0x45
 800872c:	700a      	strb	r2, [r1, #0]
 800872e:	4a52      	ldr	r2, [pc, #328]	; (8008878 <_printf_i+0x21c>)
 8008730:	9203      	str	r2, [sp, #12]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6821      	ldr	r1, [r4, #0]
 8008736:	ca20      	ldmia	r2!, {r5}
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	0608      	lsls	r0, r1, #24
 800873c:	d550      	bpl.n	80087e0 <_printf_i+0x184>
 800873e:	07cb      	lsls	r3, r1, #31
 8008740:	d502      	bpl.n	8008748 <_printf_i+0xec>
 8008742:	2320      	movs	r3, #32
 8008744:	4319      	orrs	r1, r3
 8008746:	6021      	str	r1, [r4, #0]
 8008748:	2710      	movs	r7, #16
 800874a:	2d00      	cmp	r5, #0
 800874c:	d103      	bne.n	8008756 <_printf_i+0xfa>
 800874e:	2320      	movs	r3, #32
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	439a      	bics	r2, r3
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	0023      	movs	r3, r4
 8008758:	2200      	movs	r2, #0
 800875a:	3343      	adds	r3, #67	; 0x43
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db03      	blt.n	800876e <_printf_i+0x112>
 8008766:	2204      	movs	r2, #4
 8008768:	6821      	ldr	r1, [r4, #0]
 800876a:	4391      	bics	r1, r2
 800876c:	6021      	str	r1, [r4, #0]
 800876e:	2d00      	cmp	r5, #0
 8008770:	d102      	bne.n	8008778 <_printf_i+0x11c>
 8008772:	9e04      	ldr	r6, [sp, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <_printf_i+0x136>
 8008778:	9e04      	ldr	r6, [sp, #16]
 800877a:	0028      	movs	r0, r5
 800877c:	0039      	movs	r1, r7
 800877e:	f7f7 fd63 	bl	8000248 <__aeabi_uidivmod>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	3e01      	subs	r6, #1
 8008786:	5c5b      	ldrb	r3, [r3, r1]
 8008788:	7033      	strb	r3, [r6, #0]
 800878a:	002b      	movs	r3, r5
 800878c:	0005      	movs	r5, r0
 800878e:	429f      	cmp	r7, r3
 8008790:	d9f3      	bls.n	800877a <_printf_i+0x11e>
 8008792:	2f08      	cmp	r7, #8
 8008794:	d109      	bne.n	80087aa <_printf_i+0x14e>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	07db      	lsls	r3, r3, #31
 800879a:	d506      	bpl.n	80087aa <_printf_i+0x14e>
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	6922      	ldr	r2, [r4, #16]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	dc02      	bgt.n	80087aa <_printf_i+0x14e>
 80087a4:	2330      	movs	r3, #48	; 0x30
 80087a6:	3e01      	subs	r6, #1
 80087a8:	7033      	strb	r3, [r6, #0]
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	1b9b      	subs	r3, r3, r6
 80087ae:	6123      	str	r3, [r4, #16]
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	0021      	movs	r1, r4
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	9805      	ldr	r0, [sp, #20]
 80087b8:	9b06      	ldr	r3, [sp, #24]
 80087ba:	aa09      	add	r2, sp, #36	; 0x24
 80087bc:	f7ff fede 	bl	800857c <_printf_common>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d135      	bne.n	8008830 <_printf_i+0x1d4>
 80087c4:	2001      	movs	r0, #1
 80087c6:	4240      	negs	r0, r0
 80087c8:	b00b      	add	sp, #44	; 0x2c
 80087ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087cc:	2220      	movs	r2, #32
 80087ce:	6809      	ldr	r1, [r1, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	6022      	str	r2, [r4, #0]
 80087d4:	0022      	movs	r2, r4
 80087d6:	2178      	movs	r1, #120	; 0x78
 80087d8:	3245      	adds	r2, #69	; 0x45
 80087da:	7011      	strb	r1, [r2, #0]
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <_printf_i+0x220>)
 80087de:	e7a7      	b.n	8008730 <_printf_i+0xd4>
 80087e0:	0648      	lsls	r0, r1, #25
 80087e2:	d5ac      	bpl.n	800873e <_printf_i+0xe2>
 80087e4:	b2ad      	uxth	r5, r5
 80087e6:	e7aa      	b.n	800873e <_printf_i+0xe2>
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	680d      	ldr	r5, [r1, #0]
 80087ec:	1d10      	adds	r0, r2, #4
 80087ee:	6949      	ldr	r1, [r1, #20]
 80087f0:	6018      	str	r0, [r3, #0]
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	062e      	lsls	r6, r5, #24
 80087f6:	d501      	bpl.n	80087fc <_printf_i+0x1a0>
 80087f8:	6019      	str	r1, [r3, #0]
 80087fa:	e002      	b.n	8008802 <_printf_i+0x1a6>
 80087fc:	066d      	lsls	r5, r5, #25
 80087fe:	d5fb      	bpl.n	80087f8 <_printf_i+0x19c>
 8008800:	8019      	strh	r1, [r3, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	9e04      	ldr	r6, [sp, #16]
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	e7d2      	b.n	80087b0 <_printf_i+0x154>
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	1d11      	adds	r1, r2, #4
 800880e:	6019      	str	r1, [r3, #0]
 8008810:	6816      	ldr	r6, [r2, #0]
 8008812:	2100      	movs	r1, #0
 8008814:	0030      	movs	r0, r6
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	f000 ff0a 	bl	8009630 <memchr>
 800881c:	2800      	cmp	r0, #0
 800881e:	d001      	beq.n	8008824 <_printf_i+0x1c8>
 8008820:	1b80      	subs	r0, r0, r6
 8008822:	6060      	str	r0, [r4, #4]
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	2300      	movs	r3, #0
 800882a:	9a04      	ldr	r2, [sp, #16]
 800882c:	7013      	strb	r3, [r2, #0]
 800882e:	e7bf      	b.n	80087b0 <_printf_i+0x154>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	0032      	movs	r2, r6
 8008834:	9906      	ldr	r1, [sp, #24]
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	9d07      	ldr	r5, [sp, #28]
 800883a:	47a8      	blx	r5
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d0c1      	beq.n	80087c4 <_printf_i+0x168>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	079b      	lsls	r3, r3, #30
 8008844:	d415      	bmi.n	8008872 <_printf_i+0x216>
 8008846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008848:	68e0      	ldr	r0, [r4, #12]
 800884a:	4298      	cmp	r0, r3
 800884c:	dabc      	bge.n	80087c8 <_printf_i+0x16c>
 800884e:	0018      	movs	r0, r3
 8008850:	e7ba      	b.n	80087c8 <_printf_i+0x16c>
 8008852:	0022      	movs	r2, r4
 8008854:	2301      	movs	r3, #1
 8008856:	9906      	ldr	r1, [sp, #24]
 8008858:	9805      	ldr	r0, [sp, #20]
 800885a:	9e07      	ldr	r6, [sp, #28]
 800885c:	3219      	adds	r2, #25
 800885e:	47b0      	blx	r6
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d0af      	beq.n	80087c4 <_printf_i+0x168>
 8008864:	3501      	adds	r5, #1
 8008866:	68e3      	ldr	r3, [r4, #12]
 8008868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	42ab      	cmp	r3, r5
 800886e:	dcf0      	bgt.n	8008852 <_printf_i+0x1f6>
 8008870:	e7e9      	b.n	8008846 <_printf_i+0x1ea>
 8008872:	2500      	movs	r5, #0
 8008874:	e7f7      	b.n	8008866 <_printf_i+0x20a>
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	0800d7fe 	.word	0x0800d7fe
 800887c:	0800d80f 	.word	0x0800d80f

08008880 <siprintf>:
 8008880:	b40e      	push	{r1, r2, r3}
 8008882:	b500      	push	{lr}
 8008884:	490b      	ldr	r1, [pc, #44]	; (80088b4 <siprintf+0x34>)
 8008886:	b09c      	sub	sp, #112	; 0x70
 8008888:	ab1d      	add	r3, sp, #116	; 0x74
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	9006      	str	r0, [sp, #24]
 800888e:	9107      	str	r1, [sp, #28]
 8008890:	9104      	str	r1, [sp, #16]
 8008892:	4809      	ldr	r0, [pc, #36]	; (80088b8 <siprintf+0x38>)
 8008894:	4909      	ldr	r1, [pc, #36]	; (80088bc <siprintf+0x3c>)
 8008896:	cb04      	ldmia	r3!, {r2}
 8008898:	9105      	str	r1, [sp, #20]
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	a902      	add	r1, sp, #8
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	f001 fb88 	bl	8009fb4 <_svfiprintf_r>
 80088a4:	2300      	movs	r3, #0
 80088a6:	9a02      	ldr	r2, [sp, #8]
 80088a8:	7013      	strb	r3, [r2, #0]
 80088aa:	b01c      	add	sp, #112	; 0x70
 80088ac:	bc08      	pop	{r3}
 80088ae:	b003      	add	sp, #12
 80088b0:	4718      	bx	r3
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	7fffffff 	.word	0x7fffffff
 80088b8:	20000464 	.word	0x20000464
 80088bc:	ffff0208 	.word	0xffff0208

080088c0 <quorem>:
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	0006      	movs	r6, r0
 80088c4:	690d      	ldr	r5, [r1, #16]
 80088c6:	6933      	ldr	r3, [r6, #16]
 80088c8:	b087      	sub	sp, #28
 80088ca:	2000      	movs	r0, #0
 80088cc:	9102      	str	r1, [sp, #8]
 80088ce:	42ab      	cmp	r3, r5
 80088d0:	db6b      	blt.n	80089aa <quorem+0xea>
 80088d2:	000b      	movs	r3, r1
 80088d4:	3d01      	subs	r5, #1
 80088d6:	00ac      	lsls	r4, r5, #2
 80088d8:	3314      	adds	r3, #20
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	191b      	adds	r3, r3, r4
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	0033      	movs	r3, r6
 80088e2:	3314      	adds	r3, #20
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	191c      	adds	r4, r3, r4
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	6827      	ldr	r7, [r4, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	0038      	movs	r0, r7
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	0019      	movs	r1, r3
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	f7f7 fc20 	bl	800013c <__udivsi3>
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	9000      	str	r0, [sp, #0]
 8008900:	429f      	cmp	r7, r3
 8008902:	d329      	bcc.n	8008958 <quorem+0x98>
 8008904:	2300      	movs	r3, #0
 8008906:	469c      	mov	ip, r3
 8008908:	9801      	ldr	r0, [sp, #4]
 800890a:	9f05      	ldr	r7, [sp, #20]
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	cf08      	ldmia	r7!, {r3}
 8008910:	9a00      	ldr	r2, [sp, #0]
 8008912:	b299      	uxth	r1, r3
 8008914:	4351      	muls	r1, r2
 8008916:	0c1b      	lsrs	r3, r3, #16
 8008918:	4353      	muls	r3, r2
 800891a:	4461      	add	r1, ip
 800891c:	0c0a      	lsrs	r2, r1, #16
 800891e:	189b      	adds	r3, r3, r2
 8008920:	0c1a      	lsrs	r2, r3, #16
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	6803      	ldr	r3, [r0, #0]
 8008926:	4694      	mov	ip, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	b289      	uxth	r1, r1
 800892e:	18d2      	adds	r2, r2, r3
 8008930:	6803      	ldr	r3, [r0, #0]
 8008932:	1a52      	subs	r2, r2, r1
 8008934:	0c19      	lsrs	r1, r3, #16
 8008936:	466b      	mov	r3, sp
 8008938:	8a9b      	ldrh	r3, [r3, #20]
 800893a:	1acb      	subs	r3, r1, r3
 800893c:	1411      	asrs	r1, r2, #16
 800893e:	185b      	adds	r3, r3, r1
 8008940:	1419      	asrs	r1, r3, #16
 8008942:	b292      	uxth	r2, r2
 8008944:	041b      	lsls	r3, r3, #16
 8008946:	431a      	orrs	r2, r3
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	9104      	str	r1, [sp, #16]
 800894c:	c004      	stmia	r0!, {r2}
 800894e:	42bb      	cmp	r3, r7
 8008950:	d2dd      	bcs.n	800890e <quorem+0x4e>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02e      	beq.n	80089b6 <quorem+0xf6>
 8008958:	0030      	movs	r0, r6
 800895a:	9902      	ldr	r1, [sp, #8]
 800895c:	f001 f8fa 	bl	8009b54 <__mcmp>
 8008960:	2800      	cmp	r0, #0
 8008962:	db21      	blt.n	80089a8 <quorem+0xe8>
 8008964:	0030      	movs	r0, r6
 8008966:	2400      	movs	r4, #0
 8008968:	9b00      	ldr	r3, [sp, #0]
 800896a:	9902      	ldr	r1, [sp, #8]
 800896c:	3301      	adds	r3, #1
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	3014      	adds	r0, #20
 8008972:	3114      	adds	r1, #20
 8008974:	6802      	ldr	r2, [r0, #0]
 8008976:	c908      	ldmia	r1!, {r3}
 8008978:	b292      	uxth	r2, r2
 800897a:	1914      	adds	r4, r2, r4
 800897c:	b29a      	uxth	r2, r3
 800897e:	1aa2      	subs	r2, r4, r2
 8008980:	6804      	ldr	r4, [r0, #0]
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	0c24      	lsrs	r4, r4, #16
 8008986:	1ae3      	subs	r3, r4, r3
 8008988:	1414      	asrs	r4, r2, #16
 800898a:	191b      	adds	r3, r3, r4
 800898c:	141c      	asrs	r4, r3, #16
 800898e:	b292      	uxth	r2, r2
 8008990:	041b      	lsls	r3, r3, #16
 8008992:	4313      	orrs	r3, r2
 8008994:	c008      	stmia	r0!, {r3}
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	428b      	cmp	r3, r1
 800899a:	d2eb      	bcs.n	8008974 <quorem+0xb4>
 800899c:	9a01      	ldr	r2, [sp, #4]
 800899e:	00ab      	lsls	r3, r5, #2
 80089a0:	18d3      	adds	r3, r2, r3
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	d010      	beq.n	80089ca <quorem+0x10a>
 80089a8:	9800      	ldr	r0, [sp, #0]
 80089aa:	b007      	add	sp, #28
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <quorem+0xfe>
 80089b4:	3d01      	subs	r5, #1
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	3c04      	subs	r4, #4
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	d3f7      	bcc.n	80089ae <quorem+0xee>
 80089be:	6135      	str	r5, [r6, #16]
 80089c0:	e7ca      	b.n	8008958 <quorem+0x98>
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d104      	bne.n	80089d2 <quorem+0x112>
 80089c8:	3d01      	subs	r5, #1
 80089ca:	9a01      	ldr	r2, [sp, #4]
 80089cc:	3b04      	subs	r3, #4
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d3f7      	bcc.n	80089c2 <quorem+0x102>
 80089d2:	6135      	str	r5, [r6, #16]
 80089d4:	e7e8      	b.n	80089a8 <quorem+0xe8>
	...

080089d8 <_dtoa_r>:
 80089d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089da:	b09d      	sub	sp, #116	; 0x74
 80089dc:	9202      	str	r2, [sp, #8]
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	9c03      	ldr	r4, [sp, #12]
 80089e4:	930a      	str	r3, [sp, #40]	; 0x28
 80089e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80089e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089ea:	0007      	movs	r7, r0
 80089ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	d10e      	bne.n	8008a10 <_dtoa_r+0x38>
 80089f2:	2010      	movs	r0, #16
 80089f4:	f000 fe12 	bl	800961c <malloc>
 80089f8:	1e02      	subs	r2, r0, #0
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24
 80089fc:	d104      	bne.n	8008a08 <_dtoa_r+0x30>
 80089fe:	21ea      	movs	r1, #234	; 0xea
 8008a00:	4bc0      	ldr	r3, [pc, #768]	; (8008d04 <_dtoa_r+0x32c>)
 8008a02:	48c1      	ldr	r0, [pc, #772]	; (8008d08 <_dtoa_r+0x330>)
 8008a04:	f001 fbe8 	bl	800a1d8 <__assert_func>
 8008a08:	6044      	str	r4, [r0, #4]
 8008a0a:	6084      	str	r4, [r0, #8]
 8008a0c:	6004      	str	r4, [r0, #0]
 8008a0e:	60c4      	str	r4, [r0, #12]
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	2900      	cmp	r1, #0
 8008a16:	d00a      	beq.n	8008a2e <_dtoa_r+0x56>
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4093      	lsls	r3, r2
 8008a1e:	604a      	str	r2, [r1, #4]
 8008a20:	608b      	str	r3, [r1, #8]
 8008a22:	0038      	movs	r0, r7
 8008a24:	f000 fe54 	bl	80096d0 <_Bfree>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da21      	bge.n	8008a78 <_dtoa_r+0xa0>
 8008a34:	2301      	movs	r3, #1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	085b      	lsrs	r3, r3, #1
 8008a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a42:	4bb2      	ldr	r3, [pc, #712]	; (8008d0c <_dtoa_r+0x334>)
 8008a44:	002a      	movs	r2, r5
 8008a46:	9318      	str	r3, [sp, #96]	; 0x60
 8008a48:	401a      	ands	r2, r3
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d117      	bne.n	8008a7e <_dtoa_r+0xa6>
 8008a4e:	4bb0      	ldr	r3, [pc, #704]	; (8008d10 <_dtoa_r+0x338>)
 8008a50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a52:	0328      	lsls	r0, r5, #12
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	0b00      	lsrs	r0, r0, #12
 8008a5a:	4318      	orrs	r0, r3
 8008a5c:	d101      	bne.n	8008a62 <_dtoa_r+0x8a>
 8008a5e:	f000 fdc3 	bl	80095e8 <_dtoa_r+0xc10>
 8008a62:	48ac      	ldr	r0, [pc, #688]	; (8008d14 <_dtoa_r+0x33c>)
 8008a64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a66:	9005      	str	r0, [sp, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <_dtoa_r+0x9a>
 8008a6c:	4baa      	ldr	r3, [pc, #680]	; (8008d18 <_dtoa_r+0x340>)
 8008a6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	9805      	ldr	r0, [sp, #20]
 8008a74:	b01d      	add	sp, #116	; 0x74
 8008a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a78:	2300      	movs	r3, #0
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	e7e0      	b.n	8008a40 <_dtoa_r+0x68>
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008a82:	9312      	str	r3, [sp, #72]	; 0x48
 8008a84:	9413      	str	r4, [sp, #76]	; 0x4c
 8008a86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f7f7 fcdb 	bl	8000448 <__aeabi_dcmpeq>
 8008a92:	1e04      	subs	r4, r0, #0
 8008a94:	d00b      	beq.n	8008aae <_dtoa_r+0xd6>
 8008a96:	2301      	movs	r3, #1
 8008a98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	4b9f      	ldr	r3, [pc, #636]	; (8008d1c <_dtoa_r+0x344>)
 8008a9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d0e5      	beq.n	8008a72 <_dtoa_r+0x9a>
 8008aa6:	4a9e      	ldr	r2, [pc, #632]	; (8008d20 <_dtoa_r+0x348>)
 8008aa8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008aaa:	600a      	str	r2, [r1, #0]
 8008aac:	e7e1      	b.n	8008a72 <_dtoa_r+0x9a>
 8008aae:	ab1a      	add	r3, sp, #104	; 0x68
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	ab1b      	add	r3, sp, #108	; 0x6c
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	0038      	movs	r0, r7
 8008ab8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008abc:	f001 f8fe 	bl	8009cbc <__d2b>
 8008ac0:	006e      	lsls	r6, r5, #1
 8008ac2:	9004      	str	r0, [sp, #16]
 8008ac4:	0d76      	lsrs	r6, r6, #21
 8008ac6:	d100      	bne.n	8008aca <_dtoa_r+0xf2>
 8008ac8:	e07c      	b.n	8008bc4 <_dtoa_r+0x1ec>
 8008aca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008acc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ad0:	4a94      	ldr	r2, [pc, #592]	; (8008d24 <_dtoa_r+0x34c>)
 8008ad2:	031b      	lsls	r3, r3, #12
 8008ad4:	0b1b      	lsrs	r3, r3, #12
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	0011      	movs	r1, r2
 8008ada:	4b93      	ldr	r3, [pc, #588]	; (8008d28 <_dtoa_r+0x350>)
 8008adc:	9416      	str	r4, [sp, #88]	; 0x58
 8008ade:	18f6      	adds	r6, r6, r3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4b92      	ldr	r3, [pc, #584]	; (8008d2c <_dtoa_r+0x354>)
 8008ae4:	f7f9 f904 	bl	8001cf0 <__aeabi_dsub>
 8008ae8:	4a91      	ldr	r2, [pc, #580]	; (8008d30 <_dtoa_r+0x358>)
 8008aea:	4b92      	ldr	r3, [pc, #584]	; (8008d34 <_dtoa_r+0x35c>)
 8008aec:	f7f8 fe94 	bl	8001818 <__aeabi_dmul>
 8008af0:	4a91      	ldr	r2, [pc, #580]	; (8008d38 <_dtoa_r+0x360>)
 8008af2:	4b92      	ldr	r3, [pc, #584]	; (8008d3c <_dtoa_r+0x364>)
 8008af4:	f7f7 ff20 	bl	8000938 <__aeabi_dadd>
 8008af8:	0004      	movs	r4, r0
 8008afa:	0030      	movs	r0, r6
 8008afc:	000d      	movs	r5, r1
 8008afe:	f7f9 fcdd 	bl	80024bc <__aeabi_i2d>
 8008b02:	4a8f      	ldr	r2, [pc, #572]	; (8008d40 <_dtoa_r+0x368>)
 8008b04:	4b8f      	ldr	r3, [pc, #572]	; (8008d44 <_dtoa_r+0x36c>)
 8008b06:	f7f8 fe87 	bl	8001818 <__aeabi_dmul>
 8008b0a:	0002      	movs	r2, r0
 8008b0c:	000b      	movs	r3, r1
 8008b0e:	0020      	movs	r0, r4
 8008b10:	0029      	movs	r1, r5
 8008b12:	f7f7 ff11 	bl	8000938 <__aeabi_dadd>
 8008b16:	0004      	movs	r4, r0
 8008b18:	000d      	movs	r5, r1
 8008b1a:	f7f9 fc99 	bl	8002450 <__aeabi_d2iz>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	9002      	str	r0, [sp, #8]
 8008b22:	2300      	movs	r3, #0
 8008b24:	0020      	movs	r0, r4
 8008b26:	0029      	movs	r1, r5
 8008b28:	f7f7 fc94 	bl	8000454 <__aeabi_dcmplt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d00b      	beq.n	8008b48 <_dtoa_r+0x170>
 8008b30:	9802      	ldr	r0, [sp, #8]
 8008b32:	f7f9 fcc3 	bl	80024bc <__aeabi_i2d>
 8008b36:	002b      	movs	r3, r5
 8008b38:	0022      	movs	r2, r4
 8008b3a:	f7f7 fc85 	bl	8000448 <__aeabi_dcmpeq>
 8008b3e:	4243      	negs	r3, r0
 8008b40:	4158      	adcs	r0, r3
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	1a1b      	subs	r3, r3, r0
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	2b16      	cmp	r3, #22
 8008b50:	d80f      	bhi.n	8008b72 <_dtoa_r+0x19a>
 8008b52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b56:	00da      	lsls	r2, r3, #3
 8008b58:	4b7b      	ldr	r3, [pc, #492]	; (8008d48 <_dtoa_r+0x370>)
 8008b5a:	189b      	adds	r3, r3, r2
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f7f7 fc78 	bl	8000454 <__aeabi_dcmplt>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d049      	beq.n	8008bfc <_dtoa_r+0x224>
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9315      	str	r3, [sp, #84]	; 0x54
 8008b72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b74:	1b9e      	subs	r6, r3, r6
 8008b76:	2300      	movs	r3, #0
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	0033      	movs	r3, r6
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b80:	d504      	bpl.n	8008b8c <_dtoa_r+0x1b4>
 8008b82:	2301      	movs	r3, #1
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db36      	blt.n	8008c00 <_dtoa_r+0x228>
 8008b92:	9a02      	ldr	r2, [sp, #8]
 8008b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b96:	4694      	mov	ip, r2
 8008b98:	4463      	add	r3, ip
 8008b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9214      	str	r2, [sp, #80]	; 0x50
 8008ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	2b09      	cmp	r3, #9
 8008ba8:	d862      	bhi.n	8008c70 <_dtoa_r+0x298>
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	dd02      	ble.n	8008bb4 <_dtoa_r+0x1dc>
 8008bae:	2400      	movs	r4, #0
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	9322      	str	r3, [sp, #136]	; 0x88
 8008bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bb6:	1e98      	subs	r0, r3, #2
 8008bb8:	2803      	cmp	r0, #3
 8008bba:	d862      	bhi.n	8008c82 <_dtoa_r+0x2aa>
 8008bbc:	f7f7 faaa 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008bc0:	56343629 	.word	0x56343629
 8008bc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bc8:	189e      	adds	r6, r3, r2
 8008bca:	4b60      	ldr	r3, [pc, #384]	; (8008d4c <_dtoa_r+0x374>)
 8008bcc:	18f2      	adds	r2, r6, r3
 8008bce:	2a20      	cmp	r2, #32
 8008bd0:	dd0f      	ble.n	8008bf2 <_dtoa_r+0x21a>
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	409d      	lsls	r5, r3
 8008bd8:	4b5d      	ldr	r3, [pc, #372]	; (8008d50 <_dtoa_r+0x378>)
 8008bda:	9802      	ldr	r0, [sp, #8]
 8008bdc:	18f3      	adds	r3, r6, r3
 8008bde:	40d8      	lsrs	r0, r3
 8008be0:	4328      	orrs	r0, r5
 8008be2:	f7f9 fc9b 	bl	800251c <__aeabi_ui2d>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4c5a      	ldr	r4, [pc, #360]	; (8008d54 <_dtoa_r+0x37c>)
 8008bea:	3e01      	subs	r6, #1
 8008bec:	1909      	adds	r1, r1, r4
 8008bee:	9316      	str	r3, [sp, #88]	; 0x58
 8008bf0:	e776      	b.n	8008ae0 <_dtoa_r+0x108>
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	9802      	ldr	r0, [sp, #8]
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	4098      	lsls	r0, r3
 8008bfa:	e7f2      	b.n	8008be2 <_dtoa_r+0x20a>
 8008bfc:	9015      	str	r0, [sp, #84]	; 0x54
 8008bfe:	e7b8      	b.n	8008b72 <_dtoa_r+0x19a>
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	9a02      	ldr	r2, [sp, #8]
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	9308      	str	r3, [sp, #32]
 8008c08:	4253      	negs	r3, r2
 8008c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9314      	str	r3, [sp, #80]	; 0x50
 8008c10:	e7c7      	b.n	8008ba2 <_dtoa_r+0x1ca>
 8008c12:	2300      	movs	r3, #0
 8008c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dc36      	bgt.n	8008c8a <_dtoa_r+0x2b2>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	001a      	movs	r2, r3
 8008c20:	930c      	str	r3, [sp, #48]	; 0x30
 8008c22:	9306      	str	r3, [sp, #24]
 8008c24:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c26:	e00d      	b.n	8008c44 <_dtoa_r+0x26c>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e7f3      	b.n	8008c14 <_dtoa_r+0x23c>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c32:	4694      	mov	ip, r2
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	4463      	add	r3, ip
 8008c38:	930c      	str	r3, [sp, #48]	; 0x30
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	9306      	str	r3, [sp, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc00      	bgt.n	8008c44 <_dtoa_r+0x26c>
 8008c42:	2301      	movs	r3, #1
 8008c44:	2200      	movs	r2, #0
 8008c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c48:	6042      	str	r2, [r0, #4]
 8008c4a:	3204      	adds	r2, #4
 8008c4c:	0015      	movs	r5, r2
 8008c4e:	3514      	adds	r5, #20
 8008c50:	6841      	ldr	r1, [r0, #4]
 8008c52:	429d      	cmp	r5, r3
 8008c54:	d91d      	bls.n	8008c92 <_dtoa_r+0x2ba>
 8008c56:	0038      	movs	r0, r7
 8008c58:	f000 fcf6 	bl	8009648 <_Balloc>
 8008c5c:	9005      	str	r0, [sp, #20]
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d11b      	bne.n	8008c9a <_dtoa_r+0x2c2>
 8008c62:	21d5      	movs	r1, #213	; 0xd5
 8008c64:	0002      	movs	r2, r0
 8008c66:	4b3c      	ldr	r3, [pc, #240]	; (8008d58 <_dtoa_r+0x380>)
 8008c68:	0049      	lsls	r1, r1, #1
 8008c6a:	e6ca      	b.n	8008a02 <_dtoa_r+0x2a>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e7de      	b.n	8008c2e <_dtoa_r+0x256>
 8008c70:	2300      	movs	r3, #0
 8008c72:	940f      	str	r4, [sp, #60]	; 0x3c
 8008c74:	9322      	str	r3, [sp, #136]	; 0x88
 8008c76:	3b01      	subs	r3, #1
 8008c78:	930c      	str	r3, [sp, #48]	; 0x30
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	3313      	adds	r3, #19
 8008c80:	e7d0      	b.n	8008c24 <_dtoa_r+0x24c>
 8008c82:	2301      	movs	r3, #1
 8008c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c86:	3b02      	subs	r3, #2
 8008c88:	e7f6      	b.n	8008c78 <_dtoa_r+0x2a0>
 8008c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c8c:	930c      	str	r3, [sp, #48]	; 0x30
 8008c8e:	9306      	str	r3, [sp, #24]
 8008c90:	e7d8      	b.n	8008c44 <_dtoa_r+0x26c>
 8008c92:	3101      	adds	r1, #1
 8008c94:	6041      	str	r1, [r0, #4]
 8008c96:	0052      	lsls	r2, r2, #1
 8008c98:	e7d8      	b.n	8008c4c <_dtoa_r+0x274>
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	9a05      	ldr	r2, [sp, #20]
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	2b0e      	cmp	r3, #14
 8008ca4:	d900      	bls.n	8008ca8 <_dtoa_r+0x2d0>
 8008ca6:	e0eb      	b.n	8008e80 <_dtoa_r+0x4a8>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	d100      	bne.n	8008cae <_dtoa_r+0x2d6>
 8008cac:	e0e8      	b.n	8008e80 <_dtoa_r+0x4a8>
 8008cae:	9b02      	ldr	r3, [sp, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dd68      	ble.n	8008d86 <_dtoa_r+0x3ae>
 8008cb4:	001a      	movs	r2, r3
 8008cb6:	210f      	movs	r1, #15
 8008cb8:	4b23      	ldr	r3, [pc, #140]	; (8008d48 <_dtoa_r+0x370>)
 8008cba:	400a      	ands	r2, r1
 8008cbc:	00d2      	lsls	r2, r2, #3
 8008cbe:	189b      	adds	r3, r3, r2
 8008cc0:	681d      	ldr	r5, [r3, #0]
 8008cc2:	685e      	ldr	r6, [r3, #4]
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	111c      	asrs	r4, r3, #4
 8008cc8:	2302      	movs	r3, #2
 8008cca:	9310      	str	r3, [sp, #64]	; 0x40
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	05db      	lsls	r3, r3, #23
 8008cd0:	d50b      	bpl.n	8008cea <_dtoa_r+0x312>
 8008cd2:	4b22      	ldr	r3, [pc, #136]	; (8008d5c <_dtoa_r+0x384>)
 8008cd4:	400c      	ands	r4, r1
 8008cd6:	6a1a      	ldr	r2, [r3, #32]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008cdc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cde:	f7f8 f995 	bl	800100c <__aeabi_ddiv>
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ce6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ce8:	9310      	str	r3, [sp, #64]	; 0x40
 8008cea:	4b1c      	ldr	r3, [pc, #112]	; (8008d5c <_dtoa_r+0x384>)
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	d136      	bne.n	8008d60 <_dtoa_r+0x388>
 8008cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cf6:	002a      	movs	r2, r5
 8008cf8:	0033      	movs	r3, r6
 8008cfa:	f7f8 f987 	bl	800100c <__aeabi_ddiv>
 8008cfe:	900a      	str	r0, [sp, #40]	; 0x28
 8008d00:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d02:	e05c      	b.n	8008dbe <_dtoa_r+0x3e6>
 8008d04:	0800d82d 	.word	0x0800d82d
 8008d08:	0800d844 	.word	0x0800d844
 8008d0c:	7ff00000 	.word	0x7ff00000
 8008d10:	0000270f 	.word	0x0000270f
 8008d14:	0800d829 	.word	0x0800d829
 8008d18:	0800d82c 	.word	0x0800d82c
 8008d1c:	0800d7fc 	.word	0x0800d7fc
 8008d20:	0800d7fd 	.word	0x0800d7fd
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	fffffc01 	.word	0xfffffc01
 8008d2c:	3ff80000 	.word	0x3ff80000
 8008d30:	636f4361 	.word	0x636f4361
 8008d34:	3fd287a7 	.word	0x3fd287a7
 8008d38:	8b60c8b3 	.word	0x8b60c8b3
 8008d3c:	3fc68a28 	.word	0x3fc68a28
 8008d40:	509f79fb 	.word	0x509f79fb
 8008d44:	3fd34413 	.word	0x3fd34413
 8008d48:	0800d940 	.word	0x0800d940
 8008d4c:	00000432 	.word	0x00000432
 8008d50:	00000412 	.word	0x00000412
 8008d54:	fe100000 	.word	0xfe100000
 8008d58:	0800d8a3 	.word	0x0800d8a3
 8008d5c:	0800d918 	.word	0x0800d918
 8008d60:	2301      	movs	r3, #1
 8008d62:	421c      	tst	r4, r3
 8008d64:	d00b      	beq.n	8008d7e <_dtoa_r+0x3a6>
 8008d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d68:	0028      	movs	r0, r5
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	9310      	str	r3, [sp, #64]	; 0x40
 8008d6e:	9b07      	ldr	r3, [sp, #28]
 8008d70:	0031      	movs	r1, r6
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f7f8 fd4f 	bl	8001818 <__aeabi_dmul>
 8008d7a:	0005      	movs	r5, r0
 8008d7c:	000e      	movs	r6, r1
 8008d7e:	9b07      	ldr	r3, [sp, #28]
 8008d80:	1064      	asrs	r4, r4, #1
 8008d82:	3308      	adds	r3, #8
 8008d84:	e7b2      	b.n	8008cec <_dtoa_r+0x314>
 8008d86:	2302      	movs	r3, #2
 8008d88:	9310      	str	r3, [sp, #64]	; 0x40
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d016      	beq.n	8008dbe <_dtoa_r+0x3e6>
 8008d90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d94:	425c      	negs	r4, r3
 8008d96:	230f      	movs	r3, #15
 8008d98:	4ab5      	ldr	r2, [pc, #724]	; (8009070 <_dtoa_r+0x698>)
 8008d9a:	4023      	ands	r3, r4
 8008d9c:	00db      	lsls	r3, r3, #3
 8008d9e:	18d3      	adds	r3, r2, r3
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f7f8 fd38 	bl	8001818 <__aeabi_dmul>
 8008da8:	2601      	movs	r6, #1
 8008daa:	2300      	movs	r3, #0
 8008dac:	900a      	str	r0, [sp, #40]	; 0x28
 8008dae:	910b      	str	r1, [sp, #44]	; 0x2c
 8008db0:	4db0      	ldr	r5, [pc, #704]	; (8009074 <_dtoa_r+0x69c>)
 8008db2:	1124      	asrs	r4, r4, #4
 8008db4:	2c00      	cmp	r4, #0
 8008db6:	d000      	beq.n	8008dba <_dtoa_r+0x3e2>
 8008db8:	e094      	b.n	8008ee4 <_dtoa_r+0x50c>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d19f      	bne.n	8008cfe <_dtoa_r+0x326>
 8008dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d100      	bne.n	8008dc6 <_dtoa_r+0x3ee>
 8008dc4:	e09b      	b.n	8008efe <_dtoa_r+0x526>
 8008dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008dc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008dca:	2200      	movs	r2, #0
 8008dcc:	0020      	movs	r0, r4
 8008dce:	0029      	movs	r1, r5
 8008dd0:	4ba9      	ldr	r3, [pc, #676]	; (8009078 <_dtoa_r+0x6a0>)
 8008dd2:	f7f7 fb3f 	bl	8000454 <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d100      	bne.n	8008ddc <_dtoa_r+0x404>
 8008dda:	e090      	b.n	8008efe <_dtoa_r+0x526>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d100      	bne.n	8008de4 <_dtoa_r+0x40c>
 8008de2:	e08c      	b.n	8008efe <_dtoa_r+0x526>
 8008de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd46      	ble.n	8008e78 <_dtoa_r+0x4a0>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	2200      	movs	r2, #0
 8008dee:	0020      	movs	r0, r4
 8008df0:	0029      	movs	r1, r5
 8008df2:	1e5e      	subs	r6, r3, #1
 8008df4:	4ba1      	ldr	r3, [pc, #644]	; (800907c <_dtoa_r+0x6a4>)
 8008df6:	f7f8 fd0f 	bl	8001818 <__aeabi_dmul>
 8008dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8008dfe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e00:	3301      	adds	r3, #1
 8008e02:	9310      	str	r3, [sp, #64]	; 0x40
 8008e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e0c:	9307      	str	r3, [sp, #28]
 8008e0e:	f7f9 fb55 	bl	80024bc <__aeabi_i2d>
 8008e12:	0022      	movs	r2, r4
 8008e14:	002b      	movs	r3, r5
 8008e16:	f7f8 fcff 	bl	8001818 <__aeabi_dmul>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4b98      	ldr	r3, [pc, #608]	; (8009080 <_dtoa_r+0x6a8>)
 8008e1e:	f7f7 fd8b 	bl	8000938 <__aeabi_dadd>
 8008e22:	9010      	str	r0, [sp, #64]	; 0x40
 8008e24:	9111      	str	r1, [sp, #68]	; 0x44
 8008e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e2a:	920a      	str	r2, [sp, #40]	; 0x28
 8008e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2e:	4a95      	ldr	r2, [pc, #596]	; (8009084 <_dtoa_r+0x6ac>)
 8008e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e32:	4694      	mov	ip, r2
 8008e34:	4463      	add	r3, ip
 8008e36:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d161      	bne.n	8008f04 <_dtoa_r+0x52c>
 8008e40:	2200      	movs	r2, #0
 8008e42:	0020      	movs	r0, r4
 8008e44:	0029      	movs	r1, r5
 8008e46:	4b90      	ldr	r3, [pc, #576]	; (8009088 <_dtoa_r+0x6b0>)
 8008e48:	f7f8 ff52 	bl	8001cf0 <__aeabi_dsub>
 8008e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e50:	0004      	movs	r4, r0
 8008e52:	000d      	movs	r5, r1
 8008e54:	f7f7 fb12 	bl	800047c <__aeabi_dcmpgt>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d000      	beq.n	8008e5e <_dtoa_r+0x486>
 8008e5c:	e2b5      	b.n	80093ca <_dtoa_r+0x9f2>
 8008e5e:	488b      	ldr	r0, [pc, #556]	; (800908c <_dtoa_r+0x6b4>)
 8008e60:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e62:	4684      	mov	ip, r0
 8008e64:	4461      	add	r1, ip
 8008e66:	000b      	movs	r3, r1
 8008e68:	0020      	movs	r0, r4
 8008e6a:	0029      	movs	r1, r5
 8008e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e6e:	f7f7 faf1 	bl	8000454 <__aeabi_dcmplt>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d000      	beq.n	8008e78 <_dtoa_r+0x4a0>
 8008e76:	e2a5      	b.n	80093c4 <_dtoa_r+0x9ec>
 8008e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da00      	bge.n	8008e88 <_dtoa_r+0x4b0>
 8008e86:	e171      	b.n	800916c <_dtoa_r+0x794>
 8008e88:	9a02      	ldr	r2, [sp, #8]
 8008e8a:	2a0e      	cmp	r2, #14
 8008e8c:	dd00      	ble.n	8008e90 <_dtoa_r+0x4b8>
 8008e8e:	e16d      	b.n	800916c <_dtoa_r+0x794>
 8008e90:	4b77      	ldr	r3, [pc, #476]	; (8009070 <_dtoa_r+0x698>)
 8008e92:	00d2      	lsls	r2, r2, #3
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	685c      	ldr	r4, [r3, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	9409      	str	r4, [sp, #36]	; 0x24
 8008e9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db00      	blt.n	8008ea6 <_dtoa_r+0x4ce>
 8008ea4:	e0f6      	b.n	8009094 <_dtoa_r+0x6bc>
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dd00      	ble.n	8008eae <_dtoa_r+0x4d6>
 8008eac:	e0f2      	b.n	8009094 <_dtoa_r+0x6bc>
 8008eae:	d000      	beq.n	8008eb2 <_dtoa_r+0x4da>
 8008eb0:	e288      	b.n	80093c4 <_dtoa_r+0x9ec>
 8008eb2:	9808      	ldr	r0, [sp, #32]
 8008eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4b73      	ldr	r3, [pc, #460]	; (8009088 <_dtoa_r+0x6b0>)
 8008eba:	f7f8 fcad 	bl	8001818 <__aeabi_dmul>
 8008ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec2:	f7f7 fae5 	bl	8000490 <__aeabi_dcmpge>
 8008ec6:	9e06      	ldr	r6, [sp, #24]
 8008ec8:	0035      	movs	r5, r6
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d000      	beq.n	8008ed0 <_dtoa_r+0x4f8>
 8008ece:	e25f      	b.n	8009390 <_dtoa_r+0x9b8>
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	9a05      	ldr	r2, [sp, #20]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	9307      	str	r3, [sp, #28]
 8008ed8:	2331      	movs	r3, #49	; 0x31
 8008eda:	7013      	strb	r3, [r2, #0]
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	e25a      	b.n	800939a <_dtoa_r+0x9c2>
 8008ee4:	4234      	tst	r4, r6
 8008ee6:	d007      	beq.n	8008ef8 <_dtoa_r+0x520>
 8008ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eea:	3301      	adds	r3, #1
 8008eec:	9310      	str	r3, [sp, #64]	; 0x40
 8008eee:	682a      	ldr	r2, [r5, #0]
 8008ef0:	686b      	ldr	r3, [r5, #4]
 8008ef2:	f7f8 fc91 	bl	8001818 <__aeabi_dmul>
 8008ef6:	0033      	movs	r3, r6
 8008ef8:	1064      	asrs	r4, r4, #1
 8008efa:	3508      	adds	r5, #8
 8008efc:	e75a      	b.n	8008db4 <_dtoa_r+0x3dc>
 8008efe:	9e02      	ldr	r6, [sp, #8]
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	e780      	b.n	8008e06 <_dtoa_r+0x42e>
 8008f04:	9b07      	ldr	r3, [sp, #28]
 8008f06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	4b59      	ldr	r3, [pc, #356]	; (8009070 <_dtoa_r+0x698>)
 8008f0c:	00d2      	lsls	r2, r2, #3
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d051      	beq.n	8008fbc <_dtoa_r+0x5e4>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	495d      	ldr	r1, [pc, #372]	; (8009090 <_dtoa_r+0x6b8>)
 8008f1c:	f7f8 f876 	bl	800100c <__aeabi_ddiv>
 8008f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f24:	f7f8 fee4 	bl	8001cf0 <__aeabi_dsub>
 8008f28:	9a05      	ldr	r2, [sp, #20]
 8008f2a:	9b05      	ldr	r3, [sp, #20]
 8008f2c:	4694      	mov	ip, r2
 8008f2e:	9310      	str	r3, [sp, #64]	; 0x40
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	900a      	str	r0, [sp, #40]	; 0x28
 8008f34:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f36:	4463      	add	r3, ip
 8008f38:	9319      	str	r3, [sp, #100]	; 0x64
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	0020      	movs	r0, r4
 8008f3e:	f7f9 fa87 	bl	8002450 <__aeabi_d2iz>
 8008f42:	9017      	str	r0, [sp, #92]	; 0x5c
 8008f44:	f7f9 faba 	bl	80024bc <__aeabi_i2d>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	0020      	movs	r0, r4
 8008f4e:	0029      	movs	r1, r5
 8008f50:	f7f8 fece 	bl	8001cf0 <__aeabi_dsub>
 8008f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f58:	3301      	adds	r3, #1
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5e:	0004      	movs	r4, r0
 8008f60:	3330      	adds	r3, #48	; 0x30
 8008f62:	7013      	strb	r3, [r2, #0]
 8008f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f68:	000d      	movs	r5, r1
 8008f6a:	f7f7 fa73 	bl	8000454 <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d175      	bne.n	800905e <_dtoa_r+0x686>
 8008f72:	0022      	movs	r2, r4
 8008f74:	002b      	movs	r3, r5
 8008f76:	2000      	movs	r0, #0
 8008f78:	493f      	ldr	r1, [pc, #252]	; (8009078 <_dtoa_r+0x6a0>)
 8008f7a:	f7f8 feb9 	bl	8001cf0 <__aeabi_dsub>
 8008f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f82:	f7f7 fa67 	bl	8000454 <__aeabi_dcmplt>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d000      	beq.n	8008f8c <_dtoa_r+0x5b4>
 8008f8a:	e0d1      	b.n	8009130 <_dtoa_r+0x758>
 8008f8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f8e:	9a07      	ldr	r2, [sp, #28]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <_dtoa_r+0x5be>
 8008f94:	e770      	b.n	8008e78 <_dtoa_r+0x4a0>
 8008f96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b37      	ldr	r3, [pc, #220]	; (800907c <_dtoa_r+0x6a4>)
 8008f9e:	f7f8 fc3b 	bl	8001818 <__aeabi_dmul>
 8008fa2:	4b36      	ldr	r3, [pc, #216]	; (800907c <_dtoa_r+0x6a4>)
 8008fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8008fa6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fa8:	2200      	movs	r2, #0
 8008faa:	0020      	movs	r0, r4
 8008fac:	0029      	movs	r1, r5
 8008fae:	f7f8 fc33 	bl	8001818 <__aeabi_dmul>
 8008fb2:	9b07      	ldr	r3, [sp, #28]
 8008fb4:	0004      	movs	r4, r0
 8008fb6:	000d      	movs	r5, r1
 8008fb8:	9310      	str	r3, [sp, #64]	; 0x40
 8008fba:	e7be      	b.n	8008f3a <_dtoa_r+0x562>
 8008fbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fc0:	f7f8 fc2a 	bl	8001818 <__aeabi_dmul>
 8008fc4:	9a05      	ldr	r2, [sp, #20]
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	4694      	mov	ip, r2
 8008fca:	930a      	str	r3, [sp, #40]	; 0x28
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	9010      	str	r0, [sp, #64]	; 0x40
 8008fd0:	9111      	str	r1, [sp, #68]	; 0x44
 8008fd2:	4463      	add	r3, ip
 8008fd4:	9319      	str	r3, [sp, #100]	; 0x64
 8008fd6:	0029      	movs	r1, r5
 8008fd8:	0020      	movs	r0, r4
 8008fda:	f7f9 fa39 	bl	8002450 <__aeabi_d2iz>
 8008fde:	9017      	str	r0, [sp, #92]	; 0x5c
 8008fe0:	f7f9 fa6c 	bl	80024bc <__aeabi_i2d>
 8008fe4:	0002      	movs	r2, r0
 8008fe6:	000b      	movs	r3, r1
 8008fe8:	0020      	movs	r0, r4
 8008fea:	0029      	movs	r1, r5
 8008fec:	f7f8 fe80 	bl	8001cf0 <__aeabi_dsub>
 8008ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff4:	3330      	adds	r3, #48	; 0x30
 8008ff6:	7013      	strb	r3, [r2, #0]
 8008ff8:	0013      	movs	r3, r2
 8008ffa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	0004      	movs	r4, r0
 8009000:	000d      	movs	r5, r1
 8009002:	930a      	str	r3, [sp, #40]	; 0x28
 8009004:	4293      	cmp	r3, r2
 8009006:	d12c      	bne.n	8009062 <_dtoa_r+0x68a>
 8009008:	9810      	ldr	r0, [sp, #64]	; 0x40
 800900a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800900c:	9a05      	ldr	r2, [sp, #20]
 800900e:	9b07      	ldr	r3, [sp, #28]
 8009010:	4694      	mov	ip, r2
 8009012:	4463      	add	r3, ip
 8009014:	2200      	movs	r2, #0
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <_dtoa_r+0x6b8>)
 800901a:	f7f7 fc8d 	bl	8000938 <__aeabi_dadd>
 800901e:	0002      	movs	r2, r0
 8009020:	000b      	movs	r3, r1
 8009022:	0020      	movs	r0, r4
 8009024:	0029      	movs	r1, r5
 8009026:	f7f7 fa29 	bl	800047c <__aeabi_dcmpgt>
 800902a:	2800      	cmp	r0, #0
 800902c:	d000      	beq.n	8009030 <_dtoa_r+0x658>
 800902e:	e07f      	b.n	8009130 <_dtoa_r+0x758>
 8009030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009034:	2000      	movs	r0, #0
 8009036:	4916      	ldr	r1, [pc, #88]	; (8009090 <_dtoa_r+0x6b8>)
 8009038:	f7f8 fe5a 	bl	8001cf0 <__aeabi_dsub>
 800903c:	0002      	movs	r2, r0
 800903e:	000b      	movs	r3, r1
 8009040:	0020      	movs	r0, r4
 8009042:	0029      	movs	r1, r5
 8009044:	f7f7 fa06 	bl	8000454 <__aeabi_dcmplt>
 8009048:	2800      	cmp	r0, #0
 800904a:	d100      	bne.n	800904e <_dtoa_r+0x676>
 800904c:	e714      	b.n	8008e78 <_dtoa_r+0x4a0>
 800904e:	9b07      	ldr	r3, [sp, #28]
 8009050:	001a      	movs	r2, r3
 8009052:	3a01      	subs	r2, #1
 8009054:	9207      	str	r2, [sp, #28]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	2a30      	cmp	r2, #48	; 0x30
 800905a:	d0f8      	beq.n	800904e <_dtoa_r+0x676>
 800905c:	9307      	str	r3, [sp, #28]
 800905e:	9602      	str	r6, [sp, #8]
 8009060:	e054      	b.n	800910c <_dtoa_r+0x734>
 8009062:	2200      	movs	r2, #0
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <_dtoa_r+0x6a4>)
 8009066:	f7f8 fbd7 	bl	8001818 <__aeabi_dmul>
 800906a:	0004      	movs	r4, r0
 800906c:	000d      	movs	r5, r1
 800906e:	e7b2      	b.n	8008fd6 <_dtoa_r+0x5fe>
 8009070:	0800d940 	.word	0x0800d940
 8009074:	0800d918 	.word	0x0800d918
 8009078:	3ff00000 	.word	0x3ff00000
 800907c:	40240000 	.word	0x40240000
 8009080:	401c0000 	.word	0x401c0000
 8009084:	fcc00000 	.word	0xfcc00000
 8009088:	40140000 	.word	0x40140000
 800908c:	7cc00000 	.word	0x7cc00000
 8009090:	3fe00000 	.word	0x3fe00000
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	9e05      	ldr	r6, [sp, #20]
 8009098:	3b01      	subs	r3, #1
 800909a:	199b      	adds	r3, r3, r6
 800909c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800909e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090a0:	930a      	str	r3, [sp, #40]	; 0x28
 80090a2:	9a08      	ldr	r2, [sp, #32]
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	0020      	movs	r0, r4
 80090a8:	0029      	movs	r1, r5
 80090aa:	f7f7 ffaf 	bl	800100c <__aeabi_ddiv>
 80090ae:	f7f9 f9cf 	bl	8002450 <__aeabi_d2iz>
 80090b2:	9006      	str	r0, [sp, #24]
 80090b4:	f7f9 fa02 	bl	80024bc <__aeabi_i2d>
 80090b8:	9a08      	ldr	r2, [sp, #32]
 80090ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090bc:	f7f8 fbac 	bl	8001818 <__aeabi_dmul>
 80090c0:	0002      	movs	r2, r0
 80090c2:	000b      	movs	r3, r1
 80090c4:	0020      	movs	r0, r4
 80090c6:	0029      	movs	r1, r5
 80090c8:	f7f8 fe12 	bl	8001cf0 <__aeabi_dsub>
 80090cc:	0033      	movs	r3, r6
 80090ce:	9a06      	ldr	r2, [sp, #24]
 80090d0:	3601      	adds	r6, #1
 80090d2:	3230      	adds	r2, #48	; 0x30
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090d8:	9607      	str	r6, [sp, #28]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d139      	bne.n	8009152 <_dtoa_r+0x77a>
 80090de:	0002      	movs	r2, r0
 80090e0:	000b      	movs	r3, r1
 80090e2:	f7f7 fc29 	bl	8000938 <__aeabi_dadd>
 80090e6:	9a08      	ldr	r2, [sp, #32]
 80090e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ea:	0004      	movs	r4, r0
 80090ec:	000d      	movs	r5, r1
 80090ee:	f7f7 f9c5 	bl	800047c <__aeabi_dcmpgt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d11b      	bne.n	800912e <_dtoa_r+0x756>
 80090f6:	9a08      	ldr	r2, [sp, #32]
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	0020      	movs	r0, r4
 80090fc:	0029      	movs	r1, r5
 80090fe:	f7f7 f9a3 	bl	8000448 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d002      	beq.n	800910c <_dtoa_r+0x734>
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	07db      	lsls	r3, r3, #31
 800910a:	d410      	bmi.n	800912e <_dtoa_r+0x756>
 800910c:	0038      	movs	r0, r7
 800910e:	9904      	ldr	r1, [sp, #16]
 8009110:	f000 fade 	bl	80096d0 <_Bfree>
 8009114:	2300      	movs	r3, #0
 8009116:	9a07      	ldr	r2, [sp, #28]
 8009118:	9802      	ldr	r0, [sp, #8]
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800911e:	3001      	adds	r0, #1
 8009120:	6018      	str	r0, [r3, #0]
 8009122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009124:	2b00      	cmp	r3, #0
 8009126:	d100      	bne.n	800912a <_dtoa_r+0x752>
 8009128:	e4a3      	b.n	8008a72 <_dtoa_r+0x9a>
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e4a1      	b.n	8008a72 <_dtoa_r+0x9a>
 800912e:	9e02      	ldr	r6, [sp, #8]
 8009130:	9b07      	ldr	r3, [sp, #28]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	3b01      	subs	r3, #1
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	2a39      	cmp	r2, #57	; 0x39
 800913a:	d106      	bne.n	800914a <_dtoa_r+0x772>
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	429a      	cmp	r2, r3
 8009140:	d1f7      	bne.n	8009132 <_dtoa_r+0x75a>
 8009142:	2230      	movs	r2, #48	; 0x30
 8009144:	9905      	ldr	r1, [sp, #20]
 8009146:	3601      	adds	r6, #1
 8009148:	700a      	strb	r2, [r1, #0]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	e785      	b.n	800905e <_dtoa_r+0x686>
 8009152:	2200      	movs	r2, #0
 8009154:	4bad      	ldr	r3, [pc, #692]	; (800940c <_dtoa_r+0xa34>)
 8009156:	f7f8 fb5f 	bl	8001818 <__aeabi_dmul>
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	0004      	movs	r4, r0
 8009160:	000d      	movs	r5, r1
 8009162:	f7f7 f971 	bl	8000448 <__aeabi_dcmpeq>
 8009166:	2800      	cmp	r0, #0
 8009168:	d09b      	beq.n	80090a2 <_dtoa_r+0x6ca>
 800916a:	e7cf      	b.n	800910c <_dtoa_r+0x734>
 800916c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800916e:	2a00      	cmp	r2, #0
 8009170:	d100      	bne.n	8009174 <_dtoa_r+0x79c>
 8009172:	e082      	b.n	800927a <_dtoa_r+0x8a2>
 8009174:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009176:	2a01      	cmp	r2, #1
 8009178:	dc66      	bgt.n	8009248 <_dtoa_r+0x870>
 800917a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800917c:	2a00      	cmp	r2, #0
 800917e:	d05f      	beq.n	8009240 <_dtoa_r+0x868>
 8009180:	4aa3      	ldr	r2, [pc, #652]	; (8009410 <_dtoa_r+0xa38>)
 8009182:	189b      	adds	r3, r3, r2
 8009184:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009186:	9c08      	ldr	r4, [sp, #32]
 8009188:	9a08      	ldr	r2, [sp, #32]
 800918a:	2101      	movs	r1, #1
 800918c:	18d2      	adds	r2, r2, r3
 800918e:	9208      	str	r2, [sp, #32]
 8009190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009192:	0038      	movs	r0, r7
 8009194:	18d3      	adds	r3, r2, r3
 8009196:	930d      	str	r3, [sp, #52]	; 0x34
 8009198:	f000 fb4a 	bl	8009830 <__i2b>
 800919c:	0005      	movs	r5, r0
 800919e:	2c00      	cmp	r4, #0
 80091a0:	dd0e      	ble.n	80091c0 <_dtoa_r+0x7e8>
 80091a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd0b      	ble.n	80091c0 <_dtoa_r+0x7e8>
 80091a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091aa:	0023      	movs	r3, r4
 80091ac:	4294      	cmp	r4, r2
 80091ae:	dd00      	ble.n	80091b2 <_dtoa_r+0x7da>
 80091b0:	0013      	movs	r3, r2
 80091b2:	9a08      	ldr	r2, [sp, #32]
 80091b4:	1ae4      	subs	r4, r4, r3
 80091b6:	1ad2      	subs	r2, r2, r3
 80091b8:	9208      	str	r2, [sp, #32]
 80091ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	930d      	str	r3, [sp, #52]	; 0x34
 80091c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01f      	beq.n	8009206 <_dtoa_r+0x82e>
 80091c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d05a      	beq.n	8009282 <_dtoa_r+0x8aa>
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	dd11      	ble.n	80091f4 <_dtoa_r+0x81c>
 80091d0:	0029      	movs	r1, r5
 80091d2:	0032      	movs	r2, r6
 80091d4:	0038      	movs	r0, r7
 80091d6:	f000 fbf1 	bl	80099bc <__pow5mult>
 80091da:	9a04      	ldr	r2, [sp, #16]
 80091dc:	0001      	movs	r1, r0
 80091de:	0005      	movs	r5, r0
 80091e0:	0038      	movs	r0, r7
 80091e2:	f000 fb3b 	bl	800985c <__multiply>
 80091e6:	9904      	ldr	r1, [sp, #16]
 80091e8:	9007      	str	r0, [sp, #28]
 80091ea:	0038      	movs	r0, r7
 80091ec:	f000 fa70 	bl	80096d0 <_Bfree>
 80091f0:	9b07      	ldr	r3, [sp, #28]
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f6:	1b9a      	subs	r2, r3, r6
 80091f8:	42b3      	cmp	r3, r6
 80091fa:	d004      	beq.n	8009206 <_dtoa_r+0x82e>
 80091fc:	0038      	movs	r0, r7
 80091fe:	9904      	ldr	r1, [sp, #16]
 8009200:	f000 fbdc 	bl	80099bc <__pow5mult>
 8009204:	9004      	str	r0, [sp, #16]
 8009206:	2101      	movs	r1, #1
 8009208:	0038      	movs	r0, r7
 800920a:	f000 fb11 	bl	8009830 <__i2b>
 800920e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009210:	0006      	movs	r6, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	dd37      	ble.n	8009286 <_dtoa_r+0x8ae>
 8009216:	001a      	movs	r2, r3
 8009218:	0001      	movs	r1, r0
 800921a:	0038      	movs	r0, r7
 800921c:	f000 fbce 	bl	80099bc <__pow5mult>
 8009220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009222:	0006      	movs	r6, r0
 8009224:	2b01      	cmp	r3, #1
 8009226:	dd33      	ble.n	8009290 <_dtoa_r+0x8b8>
 8009228:	2300      	movs	r3, #0
 800922a:	9307      	str	r3, [sp, #28]
 800922c:	6933      	ldr	r3, [r6, #16]
 800922e:	3303      	adds	r3, #3
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	18f3      	adds	r3, r6, r3
 8009234:	6858      	ldr	r0, [r3, #4]
 8009236:	f000 fab3 	bl	80097a0 <__hi0bits>
 800923a:	2320      	movs	r3, #32
 800923c:	1a18      	subs	r0, r3, r0
 800923e:	e03f      	b.n	80092c0 <_dtoa_r+0x8e8>
 8009240:	2336      	movs	r3, #54	; 0x36
 8009242:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	e79d      	b.n	8009184 <_dtoa_r+0x7ac>
 8009248:	9b06      	ldr	r3, [sp, #24]
 800924a:	1e5e      	subs	r6, r3, #1
 800924c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800924e:	42b3      	cmp	r3, r6
 8009250:	db08      	blt.n	8009264 <_dtoa_r+0x88c>
 8009252:	1b9e      	subs	r6, r3, r6
 8009254:	9b06      	ldr	r3, [sp, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	da0c      	bge.n	8009274 <_dtoa_r+0x89c>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	1a9c      	subs	r4, r3, r2
 8009260:	2300      	movs	r3, #0
 8009262:	e791      	b.n	8009188 <_dtoa_r+0x7b0>
 8009264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009266:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009268:	1af3      	subs	r3, r6, r3
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	960e      	str	r6, [sp, #56]	; 0x38
 800926e:	9314      	str	r3, [sp, #80]	; 0x50
 8009270:	2600      	movs	r6, #0
 8009272:	e7ef      	b.n	8009254 <_dtoa_r+0x87c>
 8009274:	9c08      	ldr	r4, [sp, #32]
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	e786      	b.n	8009188 <_dtoa_r+0x7b0>
 800927a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800927c:	9c08      	ldr	r4, [sp, #32]
 800927e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009280:	e78d      	b.n	800919e <_dtoa_r+0x7c6>
 8009282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009284:	e7ba      	b.n	80091fc <_dtoa_r+0x824>
 8009286:	2300      	movs	r3, #0
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800928c:	2b01      	cmp	r3, #1
 800928e:	dc13      	bgt.n	80092b8 <_dtoa_r+0x8e0>
 8009290:	2300      	movs	r3, #0
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10e      	bne.n	80092b8 <_dtoa_r+0x8e0>
 800929a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929c:	031b      	lsls	r3, r3, #12
 800929e:	d10b      	bne.n	80092b8 <_dtoa_r+0x8e0>
 80092a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80092a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092a4:	4213      	tst	r3, r2
 80092a6:	d007      	beq.n	80092b8 <_dtoa_r+0x8e0>
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	3301      	adds	r3, #1
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b0:	3301      	adds	r3, #1
 80092b2:	930d      	str	r3, [sp, #52]	; 0x34
 80092b4:	2301      	movs	r3, #1
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ba:	2001      	movs	r0, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1b5      	bne.n	800922c <_dtoa_r+0x854>
 80092c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c2:	221f      	movs	r2, #31
 80092c4:	1818      	adds	r0, r3, r0
 80092c6:	0003      	movs	r3, r0
 80092c8:	4013      	ands	r3, r2
 80092ca:	4210      	tst	r0, r2
 80092cc:	d046      	beq.n	800935c <_dtoa_r+0x984>
 80092ce:	3201      	adds	r2, #1
 80092d0:	1ad2      	subs	r2, r2, r3
 80092d2:	2a04      	cmp	r2, #4
 80092d4:	dd3f      	ble.n	8009356 <_dtoa_r+0x97e>
 80092d6:	221c      	movs	r2, #28
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	9a08      	ldr	r2, [sp, #32]
 80092dc:	18e4      	adds	r4, r4, r3
 80092de:	18d2      	adds	r2, r2, r3
 80092e0:	9208      	str	r2, [sp, #32]
 80092e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092e4:	18d3      	adds	r3, r2, r3
 80092e6:	930d      	str	r3, [sp, #52]	; 0x34
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd05      	ble.n	80092fa <_dtoa_r+0x922>
 80092ee:	001a      	movs	r2, r3
 80092f0:	0038      	movs	r0, r7
 80092f2:	9904      	ldr	r1, [sp, #16]
 80092f4:	f000 fbbe 	bl	8009a74 <__lshift>
 80092f8:	9004      	str	r0, [sp, #16]
 80092fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	dd05      	ble.n	800930c <_dtoa_r+0x934>
 8009300:	0031      	movs	r1, r6
 8009302:	001a      	movs	r2, r3
 8009304:	0038      	movs	r0, r7
 8009306:	f000 fbb5 	bl	8009a74 <__lshift>
 800930a:	0006      	movs	r6, r0
 800930c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800930e:	2b00      	cmp	r3, #0
 8009310:	d026      	beq.n	8009360 <_dtoa_r+0x988>
 8009312:	0031      	movs	r1, r6
 8009314:	9804      	ldr	r0, [sp, #16]
 8009316:	f000 fc1d 	bl	8009b54 <__mcmp>
 800931a:	2800      	cmp	r0, #0
 800931c:	da20      	bge.n	8009360 <_dtoa_r+0x988>
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	220a      	movs	r2, #10
 8009322:	3b01      	subs	r3, #1
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	0038      	movs	r0, r7
 8009328:	2300      	movs	r3, #0
 800932a:	9904      	ldr	r1, [sp, #16]
 800932c:	f000 f9f4 	bl	8009718 <__multadd>
 8009330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009332:	9004      	str	r0, [sp, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d100      	bne.n	800933a <_dtoa_r+0x962>
 8009338:	e160      	b.n	80095fc <_dtoa_r+0xc24>
 800933a:	2300      	movs	r3, #0
 800933c:	0029      	movs	r1, r5
 800933e:	220a      	movs	r2, #10
 8009340:	0038      	movs	r0, r7
 8009342:	f000 f9e9 	bl	8009718 <__multadd>
 8009346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009348:	0005      	movs	r5, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	dc47      	bgt.n	80093de <_dtoa_r+0xa06>
 800934e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009350:	2b02      	cmp	r3, #2
 8009352:	dc0d      	bgt.n	8009370 <_dtoa_r+0x998>
 8009354:	e043      	b.n	80093de <_dtoa_r+0xa06>
 8009356:	2a04      	cmp	r2, #4
 8009358:	d0c6      	beq.n	80092e8 <_dtoa_r+0x910>
 800935a:	0013      	movs	r3, r2
 800935c:	331c      	adds	r3, #28
 800935e:	e7bc      	b.n	80092da <_dtoa_r+0x902>
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	dc35      	bgt.n	80093d2 <_dtoa_r+0x9fa>
 8009366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009368:	2b02      	cmp	r3, #2
 800936a:	dd32      	ble.n	80093d2 <_dtoa_r+0x9fa>
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	930c      	str	r3, [sp, #48]	; 0x30
 8009370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10c      	bne.n	8009390 <_dtoa_r+0x9b8>
 8009376:	0031      	movs	r1, r6
 8009378:	2205      	movs	r2, #5
 800937a:	0038      	movs	r0, r7
 800937c:	f000 f9cc 	bl	8009718 <__multadd>
 8009380:	0006      	movs	r6, r0
 8009382:	0001      	movs	r1, r0
 8009384:	9804      	ldr	r0, [sp, #16]
 8009386:	f000 fbe5 	bl	8009b54 <__mcmp>
 800938a:	2800      	cmp	r0, #0
 800938c:	dd00      	ble.n	8009390 <_dtoa_r+0x9b8>
 800938e:	e59f      	b.n	8008ed0 <_dtoa_r+0x4f8>
 8009390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009392:	43db      	mvns	r3, r3
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	9307      	str	r3, [sp, #28]
 800939a:	2400      	movs	r4, #0
 800939c:	0031      	movs	r1, r6
 800939e:	0038      	movs	r0, r7
 80093a0:	f000 f996 	bl	80096d0 <_Bfree>
 80093a4:	2d00      	cmp	r5, #0
 80093a6:	d100      	bne.n	80093aa <_dtoa_r+0x9d2>
 80093a8:	e6b0      	b.n	800910c <_dtoa_r+0x734>
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	d005      	beq.n	80093ba <_dtoa_r+0x9e2>
 80093ae:	42ac      	cmp	r4, r5
 80093b0:	d003      	beq.n	80093ba <_dtoa_r+0x9e2>
 80093b2:	0021      	movs	r1, r4
 80093b4:	0038      	movs	r0, r7
 80093b6:	f000 f98b 	bl	80096d0 <_Bfree>
 80093ba:	0029      	movs	r1, r5
 80093bc:	0038      	movs	r0, r7
 80093be:	f000 f987 	bl	80096d0 <_Bfree>
 80093c2:	e6a3      	b.n	800910c <_dtoa_r+0x734>
 80093c4:	2600      	movs	r6, #0
 80093c6:	0035      	movs	r5, r6
 80093c8:	e7e2      	b.n	8009390 <_dtoa_r+0x9b8>
 80093ca:	9602      	str	r6, [sp, #8]
 80093cc:	9e07      	ldr	r6, [sp, #28]
 80093ce:	0035      	movs	r5, r6
 80093d0:	e57e      	b.n	8008ed0 <_dtoa_r+0x4f8>
 80093d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d100      	bne.n	80093da <_dtoa_r+0xa02>
 80093d8:	e0c8      	b.n	800956c <_dtoa_r+0xb94>
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	930c      	str	r3, [sp, #48]	; 0x30
 80093de:	2c00      	cmp	r4, #0
 80093e0:	dd05      	ble.n	80093ee <_dtoa_r+0xa16>
 80093e2:	0029      	movs	r1, r5
 80093e4:	0022      	movs	r2, r4
 80093e6:	0038      	movs	r0, r7
 80093e8:	f000 fb44 	bl	8009a74 <__lshift>
 80093ec:	0005      	movs	r5, r0
 80093ee:	9b07      	ldr	r3, [sp, #28]
 80093f0:	0028      	movs	r0, r5
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01f      	beq.n	8009436 <_dtoa_r+0xa5e>
 80093f6:	0038      	movs	r0, r7
 80093f8:	6869      	ldr	r1, [r5, #4]
 80093fa:	f000 f925 	bl	8009648 <_Balloc>
 80093fe:	1e04      	subs	r4, r0, #0
 8009400:	d10c      	bne.n	800941c <_dtoa_r+0xa44>
 8009402:	0002      	movs	r2, r0
 8009404:	4b03      	ldr	r3, [pc, #12]	; (8009414 <_dtoa_r+0xa3c>)
 8009406:	4904      	ldr	r1, [pc, #16]	; (8009418 <_dtoa_r+0xa40>)
 8009408:	f7ff fafb 	bl	8008a02 <_dtoa_r+0x2a>
 800940c:	40240000 	.word	0x40240000
 8009410:	00000433 	.word	0x00000433
 8009414:	0800d8a3 	.word	0x0800d8a3
 8009418:	000002ea 	.word	0x000002ea
 800941c:	0029      	movs	r1, r5
 800941e:	692b      	ldr	r3, [r5, #16]
 8009420:	310c      	adds	r1, #12
 8009422:	1c9a      	adds	r2, r3, #2
 8009424:	0092      	lsls	r2, r2, #2
 8009426:	300c      	adds	r0, #12
 8009428:	f7fe fd8c 	bl	8007f44 <memcpy>
 800942c:	2201      	movs	r2, #1
 800942e:	0021      	movs	r1, r4
 8009430:	0038      	movs	r0, r7
 8009432:	f000 fb1f 	bl	8009a74 <__lshift>
 8009436:	002c      	movs	r4, r5
 8009438:	0005      	movs	r5, r0
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	9308      	str	r3, [sp, #32]
 800943e:	0031      	movs	r1, r6
 8009440:	9804      	ldr	r0, [sp, #16]
 8009442:	f7ff fa3d 	bl	80088c0 <quorem>
 8009446:	0003      	movs	r3, r0
 8009448:	0021      	movs	r1, r4
 800944a:	3330      	adds	r3, #48	; 0x30
 800944c:	900e      	str	r0, [sp, #56]	; 0x38
 800944e:	9804      	ldr	r0, [sp, #16]
 8009450:	9306      	str	r3, [sp, #24]
 8009452:	f000 fb7f 	bl	8009b54 <__mcmp>
 8009456:	002a      	movs	r2, r5
 8009458:	900f      	str	r0, [sp, #60]	; 0x3c
 800945a:	0031      	movs	r1, r6
 800945c:	0038      	movs	r0, r7
 800945e:	f000 fb95 	bl	8009b8c <__mdiff>
 8009462:	68c3      	ldr	r3, [r0, #12]
 8009464:	9007      	str	r0, [sp, #28]
 8009466:	9310      	str	r3, [sp, #64]	; 0x40
 8009468:	2301      	movs	r3, #1
 800946a:	930d      	str	r3, [sp, #52]	; 0x34
 800946c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <_dtoa_r+0xaa4>
 8009472:	0001      	movs	r1, r0
 8009474:	9804      	ldr	r0, [sp, #16]
 8009476:	f000 fb6d 	bl	8009b54 <__mcmp>
 800947a:	900d      	str	r0, [sp, #52]	; 0x34
 800947c:	0038      	movs	r0, r7
 800947e:	9907      	ldr	r1, [sp, #28]
 8009480:	f000 f926 	bl	80096d0 <_Bfree>
 8009484:	2301      	movs	r3, #1
 8009486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800948a:	4018      	ands	r0, r3
 800948c:	9b08      	ldr	r3, [sp, #32]
 800948e:	3301      	adds	r3, #1
 8009490:	9307      	str	r3, [sp, #28]
 8009492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009494:	4313      	orrs	r3, r2
 8009496:	4303      	orrs	r3, r0
 8009498:	d10c      	bne.n	80094b4 <_dtoa_r+0xadc>
 800949a:	9b06      	ldr	r3, [sp, #24]
 800949c:	2b39      	cmp	r3, #57	; 0x39
 800949e:	d025      	beq.n	80094ec <_dtoa_r+0xb14>
 80094a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd02      	ble.n	80094ac <_dtoa_r+0xad4>
 80094a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a8:	3331      	adds	r3, #49	; 0x31
 80094aa:	9306      	str	r3, [sp, #24]
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	9a06      	ldr	r2, [sp, #24]
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e773      	b.n	800939c <_dtoa_r+0x9c4>
 80094b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	db03      	blt.n	80094c2 <_dtoa_r+0xaea>
 80094ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80094bc:	4313      	orrs	r3, r2
 80094be:	4303      	orrs	r3, r0
 80094c0:	d11f      	bne.n	8009502 <_dtoa_r+0xb2a>
 80094c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	ddf1      	ble.n	80094ac <_dtoa_r+0xad4>
 80094c8:	9904      	ldr	r1, [sp, #16]
 80094ca:	2201      	movs	r2, #1
 80094cc:	0038      	movs	r0, r7
 80094ce:	f000 fad1 	bl	8009a74 <__lshift>
 80094d2:	0031      	movs	r1, r6
 80094d4:	9004      	str	r0, [sp, #16]
 80094d6:	f000 fb3d 	bl	8009b54 <__mcmp>
 80094da:	2800      	cmp	r0, #0
 80094dc:	dc03      	bgt.n	80094e6 <_dtoa_r+0xb0e>
 80094de:	d1e5      	bne.n	80094ac <_dtoa_r+0xad4>
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	07db      	lsls	r3, r3, #31
 80094e4:	d5e2      	bpl.n	80094ac <_dtoa_r+0xad4>
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	2b39      	cmp	r3, #57	; 0x39
 80094ea:	d1dc      	bne.n	80094a6 <_dtoa_r+0xace>
 80094ec:	2339      	movs	r3, #57	; 0x39
 80094ee:	9a08      	ldr	r2, [sp, #32]
 80094f0:	7013      	strb	r3, [r2, #0]
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	781a      	ldrb	r2, [r3, #0]
 80094fa:	2a39      	cmp	r2, #57	; 0x39
 80094fc:	d06c      	beq.n	80095d8 <_dtoa_r+0xc00>
 80094fe:	3201      	adds	r2, #1
 8009500:	e7d6      	b.n	80094b0 <_dtoa_r+0xad8>
 8009502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	dd07      	ble.n	8009518 <_dtoa_r+0xb40>
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	2b39      	cmp	r3, #57	; 0x39
 800950c:	d0ee      	beq.n	80094ec <_dtoa_r+0xb14>
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	9a08      	ldr	r2, [sp, #32]
 8009512:	3301      	adds	r3, #1
 8009514:	7013      	strb	r3, [r2, #0]
 8009516:	e741      	b.n	800939c <_dtoa_r+0x9c4>
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	9a06      	ldr	r2, [sp, #24]
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	2301      	movs	r3, #1
 8009520:	9a05      	ldr	r2, [sp, #20]
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	9a08      	ldr	r2, [sp, #32]
 8009526:	189b      	adds	r3, r3, r2
 8009528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800952a:	429a      	cmp	r2, r3
 800952c:	d03e      	beq.n	80095ac <_dtoa_r+0xbd4>
 800952e:	2300      	movs	r3, #0
 8009530:	220a      	movs	r2, #10
 8009532:	9904      	ldr	r1, [sp, #16]
 8009534:	0038      	movs	r0, r7
 8009536:	f000 f8ef 	bl	8009718 <__multadd>
 800953a:	2300      	movs	r3, #0
 800953c:	9004      	str	r0, [sp, #16]
 800953e:	220a      	movs	r2, #10
 8009540:	0021      	movs	r1, r4
 8009542:	0038      	movs	r0, r7
 8009544:	42ac      	cmp	r4, r5
 8009546:	d106      	bne.n	8009556 <_dtoa_r+0xb7e>
 8009548:	f000 f8e6 	bl	8009718 <__multadd>
 800954c:	0004      	movs	r4, r0
 800954e:	0005      	movs	r5, r0
 8009550:	9b07      	ldr	r3, [sp, #28]
 8009552:	9308      	str	r3, [sp, #32]
 8009554:	e773      	b.n	800943e <_dtoa_r+0xa66>
 8009556:	f000 f8df 	bl	8009718 <__multadd>
 800955a:	0029      	movs	r1, r5
 800955c:	0004      	movs	r4, r0
 800955e:	2300      	movs	r3, #0
 8009560:	220a      	movs	r2, #10
 8009562:	0038      	movs	r0, r7
 8009564:	f000 f8d8 	bl	8009718 <__multadd>
 8009568:	0005      	movs	r5, r0
 800956a:	e7f1      	b.n	8009550 <_dtoa_r+0xb78>
 800956c:	9b06      	ldr	r3, [sp, #24]
 800956e:	930c      	str	r3, [sp, #48]	; 0x30
 8009570:	2400      	movs	r4, #0
 8009572:	0031      	movs	r1, r6
 8009574:	9804      	ldr	r0, [sp, #16]
 8009576:	f7ff f9a3 	bl	80088c0 <quorem>
 800957a:	9b05      	ldr	r3, [sp, #20]
 800957c:	3030      	adds	r0, #48	; 0x30
 800957e:	5518      	strb	r0, [r3, r4]
 8009580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009582:	3401      	adds	r4, #1
 8009584:	9006      	str	r0, [sp, #24]
 8009586:	42a3      	cmp	r3, r4
 8009588:	dd07      	ble.n	800959a <_dtoa_r+0xbc2>
 800958a:	2300      	movs	r3, #0
 800958c:	220a      	movs	r2, #10
 800958e:	0038      	movs	r0, r7
 8009590:	9904      	ldr	r1, [sp, #16]
 8009592:	f000 f8c1 	bl	8009718 <__multadd>
 8009596:	9004      	str	r0, [sp, #16]
 8009598:	e7eb      	b.n	8009572 <_dtoa_r+0xb9a>
 800959a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959c:	2001      	movs	r0, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd00      	ble.n	80095a4 <_dtoa_r+0xbcc>
 80095a2:	0018      	movs	r0, r3
 80095a4:	2400      	movs	r4, #0
 80095a6:	9b05      	ldr	r3, [sp, #20]
 80095a8:	181b      	adds	r3, r3, r0
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	9904      	ldr	r1, [sp, #16]
 80095ae:	2201      	movs	r2, #1
 80095b0:	0038      	movs	r0, r7
 80095b2:	f000 fa5f 	bl	8009a74 <__lshift>
 80095b6:	0031      	movs	r1, r6
 80095b8:	9004      	str	r0, [sp, #16]
 80095ba:	f000 facb 	bl	8009b54 <__mcmp>
 80095be:	2800      	cmp	r0, #0
 80095c0:	dc97      	bgt.n	80094f2 <_dtoa_r+0xb1a>
 80095c2:	d102      	bne.n	80095ca <_dtoa_r+0xbf2>
 80095c4:	9b06      	ldr	r3, [sp, #24]
 80095c6:	07db      	lsls	r3, r3, #31
 80095c8:	d493      	bmi.n	80094f2 <_dtoa_r+0xb1a>
 80095ca:	9b07      	ldr	r3, [sp, #28]
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	2a30      	cmp	r2, #48	; 0x30
 80095d4:	d0fa      	beq.n	80095cc <_dtoa_r+0xbf4>
 80095d6:	e6e1      	b.n	800939c <_dtoa_r+0x9c4>
 80095d8:	9a05      	ldr	r2, [sp, #20]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d18a      	bne.n	80094f4 <_dtoa_r+0xb1c>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	3301      	adds	r3, #1
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	2331      	movs	r3, #49	; 0x31
 80095e6:	e795      	b.n	8009514 <_dtoa_r+0xb3c>
 80095e8:	4b08      	ldr	r3, [pc, #32]	; (800960c <_dtoa_r+0xc34>)
 80095ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <_dtoa_r+0xc38>)
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	d001      	beq.n	80095f8 <_dtoa_r+0xc20>
 80095f4:	f7ff fa3b 	bl	8008a6e <_dtoa_r+0x96>
 80095f8:	f7ff fa3b 	bl	8008a72 <_dtoa_r+0x9a>
 80095fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dcb6      	bgt.n	8009570 <_dtoa_r+0xb98>
 8009602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009604:	2b02      	cmp	r3, #2
 8009606:	dd00      	ble.n	800960a <_dtoa_r+0xc32>
 8009608:	e6b2      	b.n	8009370 <_dtoa_r+0x998>
 800960a:	e7b1      	b.n	8009570 <_dtoa_r+0xb98>
 800960c:	0800d820 	.word	0x0800d820
 8009610:	0800d828 	.word	0x0800d828

08009614 <_localeconv_r>:
 8009614:	4800      	ldr	r0, [pc, #0]	; (8009618 <_localeconv_r+0x4>)
 8009616:	4770      	bx	lr
 8009618:	200005b8 	.word	0x200005b8

0800961c <malloc>:
 800961c:	b510      	push	{r4, lr}
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <malloc+0x10>)
 8009620:	0001      	movs	r1, r0
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	f000 fc06 	bl	8009e34 <_malloc_r>
 8009628:	bd10      	pop	{r4, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	20000464 	.word	0x20000464

08009630 <memchr>:
 8009630:	b2c9      	uxtb	r1, r1
 8009632:	1882      	adds	r2, r0, r2
 8009634:	4290      	cmp	r0, r2
 8009636:	d101      	bne.n	800963c <memchr+0xc>
 8009638:	2000      	movs	r0, #0
 800963a:	4770      	bx	lr
 800963c:	7803      	ldrb	r3, [r0, #0]
 800963e:	428b      	cmp	r3, r1
 8009640:	d0fb      	beq.n	800963a <memchr+0xa>
 8009642:	3001      	adds	r0, #1
 8009644:	e7f6      	b.n	8009634 <memchr+0x4>
	...

08009648 <_Balloc>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800964c:	0006      	movs	r6, r0
 800964e:	000c      	movs	r4, r1
 8009650:	2d00      	cmp	r5, #0
 8009652:	d10e      	bne.n	8009672 <_Balloc+0x2a>
 8009654:	2010      	movs	r0, #16
 8009656:	f7ff ffe1 	bl	800961c <malloc>
 800965a:	1e02      	subs	r2, r0, #0
 800965c:	6270      	str	r0, [r6, #36]	; 0x24
 800965e:	d104      	bne.n	800966a <_Balloc+0x22>
 8009660:	2166      	movs	r1, #102	; 0x66
 8009662:	4b19      	ldr	r3, [pc, #100]	; (80096c8 <_Balloc+0x80>)
 8009664:	4819      	ldr	r0, [pc, #100]	; (80096cc <_Balloc+0x84>)
 8009666:	f000 fdb7 	bl	800a1d8 <__assert_func>
 800966a:	6045      	str	r5, [r0, #4]
 800966c:	6085      	str	r5, [r0, #8]
 800966e:	6005      	str	r5, [r0, #0]
 8009670:	60c5      	str	r5, [r0, #12]
 8009672:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009674:	68eb      	ldr	r3, [r5, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d013      	beq.n	80096a2 <_Balloc+0x5a>
 800967a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800967c:	00a2      	lsls	r2, r4, #2
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	189b      	adds	r3, r3, r2
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	2800      	cmp	r0, #0
 8009686:	d118      	bne.n	80096ba <_Balloc+0x72>
 8009688:	2101      	movs	r1, #1
 800968a:	000d      	movs	r5, r1
 800968c:	40a5      	lsls	r5, r4
 800968e:	1d6a      	adds	r2, r5, #5
 8009690:	0030      	movs	r0, r6
 8009692:	0092      	lsls	r2, r2, #2
 8009694:	f000 fb76 	bl	8009d84 <_calloc_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	d00c      	beq.n	80096b6 <_Balloc+0x6e>
 800969c:	6044      	str	r4, [r0, #4]
 800969e:	6085      	str	r5, [r0, #8]
 80096a0:	e00d      	b.n	80096be <_Balloc+0x76>
 80096a2:	2221      	movs	r2, #33	; 0x21
 80096a4:	2104      	movs	r1, #4
 80096a6:	0030      	movs	r0, r6
 80096a8:	f000 fb6c 	bl	8009d84 <_calloc_r>
 80096ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096ae:	60e8      	str	r0, [r5, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e1      	bne.n	800967a <_Balloc+0x32>
 80096b6:	2000      	movs	r0, #0
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	6802      	ldr	r2, [r0, #0]
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	2300      	movs	r3, #0
 80096c0:	6103      	str	r3, [r0, #16]
 80096c2:	60c3      	str	r3, [r0, #12]
 80096c4:	e7f8      	b.n	80096b8 <_Balloc+0x70>
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	0800d82d 	.word	0x0800d82d
 80096cc:	0800d8b4 	.word	0x0800d8b4

080096d0 <_Bfree>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096d4:	0005      	movs	r5, r0
 80096d6:	000c      	movs	r4, r1
 80096d8:	2e00      	cmp	r6, #0
 80096da:	d10e      	bne.n	80096fa <_Bfree+0x2a>
 80096dc:	2010      	movs	r0, #16
 80096de:	f7ff ff9d 	bl	800961c <malloc>
 80096e2:	1e02      	subs	r2, r0, #0
 80096e4:	6268      	str	r0, [r5, #36]	; 0x24
 80096e6:	d104      	bne.n	80096f2 <_Bfree+0x22>
 80096e8:	218a      	movs	r1, #138	; 0x8a
 80096ea:	4b09      	ldr	r3, [pc, #36]	; (8009710 <_Bfree+0x40>)
 80096ec:	4809      	ldr	r0, [pc, #36]	; (8009714 <_Bfree+0x44>)
 80096ee:	f000 fd73 	bl	800a1d8 <__assert_func>
 80096f2:	6046      	str	r6, [r0, #4]
 80096f4:	6086      	str	r6, [r0, #8]
 80096f6:	6006      	str	r6, [r0, #0]
 80096f8:	60c6      	str	r6, [r0, #12]
 80096fa:	2c00      	cmp	r4, #0
 80096fc:	d007      	beq.n	800970e <_Bfree+0x3e>
 80096fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009700:	6862      	ldr	r2, [r4, #4]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	0092      	lsls	r2, r2, #2
 8009706:	189b      	adds	r3, r3, r2
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	601c      	str	r4, [r3, #0]
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	0800d82d 	.word	0x0800d82d
 8009714:	0800d8b4 	.word	0x0800d8b4

08009718 <__multadd>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	000e      	movs	r6, r1
 800971c:	9001      	str	r0, [sp, #4]
 800971e:	000c      	movs	r4, r1
 8009720:	001d      	movs	r5, r3
 8009722:	2000      	movs	r0, #0
 8009724:	690f      	ldr	r7, [r1, #16]
 8009726:	3614      	adds	r6, #20
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	3001      	adds	r0, #1
 800972c:	b299      	uxth	r1, r3
 800972e:	4351      	muls	r1, r2
 8009730:	0c1b      	lsrs	r3, r3, #16
 8009732:	4353      	muls	r3, r2
 8009734:	1949      	adds	r1, r1, r5
 8009736:	0c0d      	lsrs	r5, r1, #16
 8009738:	195b      	adds	r3, r3, r5
 800973a:	0c1d      	lsrs	r5, r3, #16
 800973c:	b289      	uxth	r1, r1
 800973e:	041b      	lsls	r3, r3, #16
 8009740:	185b      	adds	r3, r3, r1
 8009742:	c608      	stmia	r6!, {r3}
 8009744:	4287      	cmp	r7, r0
 8009746:	dcef      	bgt.n	8009728 <__multadd+0x10>
 8009748:	2d00      	cmp	r5, #0
 800974a:	d022      	beq.n	8009792 <__multadd+0x7a>
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	42bb      	cmp	r3, r7
 8009750:	dc19      	bgt.n	8009786 <__multadd+0x6e>
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	9801      	ldr	r0, [sp, #4]
 8009756:	1c59      	adds	r1, r3, #1
 8009758:	f7ff ff76 	bl	8009648 <_Balloc>
 800975c:	1e06      	subs	r6, r0, #0
 800975e:	d105      	bne.n	800976c <__multadd+0x54>
 8009760:	0002      	movs	r2, r0
 8009762:	21b5      	movs	r1, #181	; 0xb5
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <__multadd+0x80>)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <__multadd+0x84>)
 8009768:	f000 fd36 	bl	800a1d8 <__assert_func>
 800976c:	0021      	movs	r1, r4
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	310c      	adds	r1, #12
 8009772:	1c9a      	adds	r2, r3, #2
 8009774:	0092      	lsls	r2, r2, #2
 8009776:	300c      	adds	r0, #12
 8009778:	f7fe fbe4 	bl	8007f44 <memcpy>
 800977c:	0021      	movs	r1, r4
 800977e:	9801      	ldr	r0, [sp, #4]
 8009780:	f7ff ffa6 	bl	80096d0 <_Bfree>
 8009784:	0034      	movs	r4, r6
 8009786:	1d3b      	adds	r3, r7, #4
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	18e3      	adds	r3, r4, r3
 800978c:	605d      	str	r5, [r3, #4]
 800978e:	1c7b      	adds	r3, r7, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	0020      	movs	r0, r4
 8009794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009796:	46c0      	nop			; (mov r8, r8)
 8009798:	0800d8a3 	.word	0x0800d8a3
 800979c:	0800d8b4 	.word	0x0800d8b4

080097a0 <__hi0bits>:
 80097a0:	0003      	movs	r3, r0
 80097a2:	0c02      	lsrs	r2, r0, #16
 80097a4:	2000      	movs	r0, #0
 80097a6:	4282      	cmp	r2, r0
 80097a8:	d101      	bne.n	80097ae <__hi0bits+0xe>
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	3010      	adds	r0, #16
 80097ae:	0e1a      	lsrs	r2, r3, #24
 80097b0:	d101      	bne.n	80097b6 <__hi0bits+0x16>
 80097b2:	3008      	adds	r0, #8
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	0f1a      	lsrs	r2, r3, #28
 80097b8:	d101      	bne.n	80097be <__hi0bits+0x1e>
 80097ba:	3004      	adds	r0, #4
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	0f9a      	lsrs	r2, r3, #30
 80097c0:	d101      	bne.n	80097c6 <__hi0bits+0x26>
 80097c2:	3002      	adds	r0, #2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	db03      	blt.n	80097d2 <__hi0bits+0x32>
 80097ca:	3001      	adds	r0, #1
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	d400      	bmi.n	80097d2 <__hi0bits+0x32>
 80097d0:	2020      	movs	r0, #32
 80097d2:	4770      	bx	lr

080097d4 <__lo0bits>:
 80097d4:	6803      	ldr	r3, [r0, #0]
 80097d6:	0002      	movs	r2, r0
 80097d8:	2107      	movs	r1, #7
 80097da:	0018      	movs	r0, r3
 80097dc:	4008      	ands	r0, r1
 80097de:	420b      	tst	r3, r1
 80097e0:	d00d      	beq.n	80097fe <__lo0bits+0x2a>
 80097e2:	3906      	subs	r1, #6
 80097e4:	2000      	movs	r0, #0
 80097e6:	420b      	tst	r3, r1
 80097e8:	d105      	bne.n	80097f6 <__lo0bits+0x22>
 80097ea:	3002      	adds	r0, #2
 80097ec:	4203      	tst	r3, r0
 80097ee:	d003      	beq.n	80097f8 <__lo0bits+0x24>
 80097f0:	40cb      	lsrs	r3, r1
 80097f2:	0008      	movs	r0, r1
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	4770      	bx	lr
 80097f8:	089b      	lsrs	r3, r3, #2
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e7fb      	b.n	80097f6 <__lo0bits+0x22>
 80097fe:	b299      	uxth	r1, r3
 8009800:	2900      	cmp	r1, #0
 8009802:	d101      	bne.n	8009808 <__lo0bits+0x34>
 8009804:	2010      	movs	r0, #16
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	b2d9      	uxtb	r1, r3
 800980a:	2900      	cmp	r1, #0
 800980c:	d101      	bne.n	8009812 <__lo0bits+0x3e>
 800980e:	3008      	adds	r0, #8
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	0719      	lsls	r1, r3, #28
 8009814:	d101      	bne.n	800981a <__lo0bits+0x46>
 8009816:	3004      	adds	r0, #4
 8009818:	091b      	lsrs	r3, r3, #4
 800981a:	0799      	lsls	r1, r3, #30
 800981c:	d101      	bne.n	8009822 <__lo0bits+0x4e>
 800981e:	3002      	adds	r0, #2
 8009820:	089b      	lsrs	r3, r3, #2
 8009822:	07d9      	lsls	r1, r3, #31
 8009824:	d4e9      	bmi.n	80097fa <__lo0bits+0x26>
 8009826:	3001      	adds	r0, #1
 8009828:	085b      	lsrs	r3, r3, #1
 800982a:	d1e6      	bne.n	80097fa <__lo0bits+0x26>
 800982c:	2020      	movs	r0, #32
 800982e:	e7e2      	b.n	80097f6 <__lo0bits+0x22>

08009830 <__i2b>:
 8009830:	b510      	push	{r4, lr}
 8009832:	000c      	movs	r4, r1
 8009834:	2101      	movs	r1, #1
 8009836:	f7ff ff07 	bl	8009648 <_Balloc>
 800983a:	2800      	cmp	r0, #0
 800983c:	d106      	bne.n	800984c <__i2b+0x1c>
 800983e:	21a0      	movs	r1, #160	; 0xa0
 8009840:	0002      	movs	r2, r0
 8009842:	4b04      	ldr	r3, [pc, #16]	; (8009854 <__i2b+0x24>)
 8009844:	4804      	ldr	r0, [pc, #16]	; (8009858 <__i2b+0x28>)
 8009846:	0049      	lsls	r1, r1, #1
 8009848:	f000 fcc6 	bl	800a1d8 <__assert_func>
 800984c:	2301      	movs	r3, #1
 800984e:	6144      	str	r4, [r0, #20]
 8009850:	6103      	str	r3, [r0, #16]
 8009852:	bd10      	pop	{r4, pc}
 8009854:	0800d8a3 	.word	0x0800d8a3
 8009858:	0800d8b4 	.word	0x0800d8b4

0800985c <__multiply>:
 800985c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985e:	690b      	ldr	r3, [r1, #16]
 8009860:	0014      	movs	r4, r2
 8009862:	6912      	ldr	r2, [r2, #16]
 8009864:	000d      	movs	r5, r1
 8009866:	b089      	sub	sp, #36	; 0x24
 8009868:	4293      	cmp	r3, r2
 800986a:	da01      	bge.n	8009870 <__multiply+0x14>
 800986c:	0025      	movs	r5, r4
 800986e:	000c      	movs	r4, r1
 8009870:	692f      	ldr	r7, [r5, #16]
 8009872:	6926      	ldr	r6, [r4, #16]
 8009874:	6869      	ldr	r1, [r5, #4]
 8009876:	19bb      	adds	r3, r7, r6
 8009878:	9302      	str	r3, [sp, #8]
 800987a:	68ab      	ldr	r3, [r5, #8]
 800987c:	19ba      	adds	r2, r7, r6
 800987e:	4293      	cmp	r3, r2
 8009880:	da00      	bge.n	8009884 <__multiply+0x28>
 8009882:	3101      	adds	r1, #1
 8009884:	f7ff fee0 	bl	8009648 <_Balloc>
 8009888:	9001      	str	r0, [sp, #4]
 800988a:	2800      	cmp	r0, #0
 800988c:	d106      	bne.n	800989c <__multiply+0x40>
 800988e:	215e      	movs	r1, #94	; 0x5e
 8009890:	0002      	movs	r2, r0
 8009892:	4b48      	ldr	r3, [pc, #288]	; (80099b4 <__multiply+0x158>)
 8009894:	4848      	ldr	r0, [pc, #288]	; (80099b8 <__multiply+0x15c>)
 8009896:	31ff      	adds	r1, #255	; 0xff
 8009898:	f000 fc9e 	bl	800a1d8 <__assert_func>
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	3314      	adds	r3, #20
 80098a2:	469c      	mov	ip, r3
 80098a4:	19bb      	adds	r3, r7, r6
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4463      	add	r3, ip
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	4663      	mov	r3, ip
 80098ae:	9903      	ldr	r1, [sp, #12]
 80098b0:	428b      	cmp	r3, r1
 80098b2:	d32c      	bcc.n	800990e <__multiply+0xb2>
 80098b4:	002b      	movs	r3, r5
 80098b6:	0022      	movs	r2, r4
 80098b8:	3314      	adds	r3, #20
 80098ba:	00bf      	lsls	r7, r7, #2
 80098bc:	3214      	adds	r2, #20
 80098be:	9306      	str	r3, [sp, #24]
 80098c0:	00b6      	lsls	r6, r6, #2
 80098c2:	19db      	adds	r3, r3, r7
 80098c4:	9304      	str	r3, [sp, #16]
 80098c6:	1993      	adds	r3, r2, r6
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	2304      	movs	r3, #4
 80098cc:	9305      	str	r3, [sp, #20]
 80098ce:	002b      	movs	r3, r5
 80098d0:	9904      	ldr	r1, [sp, #16]
 80098d2:	3315      	adds	r3, #21
 80098d4:	9200      	str	r2, [sp, #0]
 80098d6:	4299      	cmp	r1, r3
 80098d8:	d305      	bcc.n	80098e6 <__multiply+0x8a>
 80098da:	1b4b      	subs	r3, r1, r5
 80098dc:	3b15      	subs	r3, #21
 80098de:	089b      	lsrs	r3, r3, #2
 80098e0:	3301      	adds	r3, #1
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	9a00      	ldr	r2, [sp, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d311      	bcc.n	8009912 <__multiply+0xb6>
 80098ee:	9b02      	ldr	r3, [sp, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dd06      	ble.n	8009902 <__multiply+0xa6>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	3b04      	subs	r3, #4
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d054      	beq.n	80099ac <__multiply+0x150>
 8009902:	9b01      	ldr	r3, [sp, #4]
 8009904:	9a02      	ldr	r2, [sp, #8]
 8009906:	0018      	movs	r0, r3
 8009908:	611a      	str	r2, [r3, #16]
 800990a:	b009      	add	sp, #36	; 0x24
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	c304      	stmia	r3!, {r2}
 8009910:	e7cd      	b.n	80098ae <__multiply+0x52>
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	b298      	uxth	r0, r3
 8009918:	2800      	cmp	r0, #0
 800991a:	d01c      	beq.n	8009956 <__multiply+0xfa>
 800991c:	4667      	mov	r7, ip
 800991e:	2400      	movs	r4, #0
 8009920:	9e06      	ldr	r6, [sp, #24]
 8009922:	ce02      	ldmia	r6!, {r1}
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	b28b      	uxth	r3, r1
 8009928:	4343      	muls	r3, r0
 800992a:	0c09      	lsrs	r1, r1, #16
 800992c:	4341      	muls	r1, r0
 800992e:	b292      	uxth	r2, r2
 8009930:	189b      	adds	r3, r3, r2
 8009932:	191b      	adds	r3, r3, r4
 8009934:	000c      	movs	r4, r1
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	0c11      	lsrs	r1, r2, #16
 800993a:	1861      	adds	r1, r4, r1
 800993c:	0c1c      	lsrs	r4, r3, #16
 800993e:	1909      	adds	r1, r1, r4
 8009940:	0c0c      	lsrs	r4, r1, #16
 8009942:	b29b      	uxth	r3, r3
 8009944:	0409      	lsls	r1, r1, #16
 8009946:	430b      	orrs	r3, r1
 8009948:	c708      	stmia	r7!, {r3}
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	42b3      	cmp	r3, r6
 800994e:	d8e8      	bhi.n	8009922 <__multiply+0xc6>
 8009950:	4663      	mov	r3, ip
 8009952:	9a05      	ldr	r2, [sp, #20]
 8009954:	509c      	str	r4, [r3, r2]
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	0c1e      	lsrs	r6, r3, #16
 800995c:	d020      	beq.n	80099a0 <__multiply+0x144>
 800995e:	4663      	mov	r3, ip
 8009960:	002c      	movs	r4, r5
 8009962:	4660      	mov	r0, ip
 8009964:	2700      	movs	r7, #0
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3414      	adds	r4, #20
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	b291      	uxth	r1, r2
 8009970:	4371      	muls	r1, r6
 8009972:	6802      	ldr	r2, [r0, #0]
 8009974:	0c12      	lsrs	r2, r2, #16
 8009976:	1889      	adds	r1, r1, r2
 8009978:	19cf      	adds	r7, r1, r7
 800997a:	0439      	lsls	r1, r7, #16
 800997c:	430b      	orrs	r3, r1
 800997e:	6003      	str	r3, [r0, #0]
 8009980:	cc02      	ldmia	r4!, {r1}
 8009982:	6843      	ldr	r3, [r0, #4]
 8009984:	0c09      	lsrs	r1, r1, #16
 8009986:	4371      	muls	r1, r6
 8009988:	b29b      	uxth	r3, r3
 800998a:	0c3f      	lsrs	r7, r7, #16
 800998c:	18cb      	adds	r3, r1, r3
 800998e:	9a04      	ldr	r2, [sp, #16]
 8009990:	19db      	adds	r3, r3, r7
 8009992:	0c1f      	lsrs	r7, r3, #16
 8009994:	3004      	adds	r0, #4
 8009996:	42a2      	cmp	r2, r4
 8009998:	d8e7      	bhi.n	800996a <__multiply+0x10e>
 800999a:	4662      	mov	r2, ip
 800999c:	9905      	ldr	r1, [sp, #20]
 800999e:	5053      	str	r3, [r2, r1]
 80099a0:	9b00      	ldr	r3, [sp, #0]
 80099a2:	3304      	adds	r3, #4
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	2304      	movs	r3, #4
 80099a8:	449c      	add	ip, r3
 80099aa:	e79c      	b.n	80098e6 <__multiply+0x8a>
 80099ac:	9b02      	ldr	r3, [sp, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	e79c      	b.n	80098ee <__multiply+0x92>
 80099b4:	0800d8a3 	.word	0x0800d8a3
 80099b8:	0800d8b4 	.word	0x0800d8b4

080099bc <__pow5mult>:
 80099bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099be:	2303      	movs	r3, #3
 80099c0:	0015      	movs	r5, r2
 80099c2:	0007      	movs	r7, r0
 80099c4:	000e      	movs	r6, r1
 80099c6:	401a      	ands	r2, r3
 80099c8:	421d      	tst	r5, r3
 80099ca:	d008      	beq.n	80099de <__pow5mult+0x22>
 80099cc:	4925      	ldr	r1, [pc, #148]	; (8009a64 <__pow5mult+0xa8>)
 80099ce:	3a01      	subs	r2, #1
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	5852      	ldr	r2, [r2, r1]
 80099d4:	2300      	movs	r3, #0
 80099d6:	0031      	movs	r1, r6
 80099d8:	f7ff fe9e 	bl	8009718 <__multadd>
 80099dc:	0006      	movs	r6, r0
 80099de:	10ad      	asrs	r5, r5, #2
 80099e0:	d03d      	beq.n	8009a5e <__pow5mult+0xa2>
 80099e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	d10f      	bne.n	8009a08 <__pow5mult+0x4c>
 80099e8:	2010      	movs	r0, #16
 80099ea:	f7ff fe17 	bl	800961c <malloc>
 80099ee:	1e02      	subs	r2, r0, #0
 80099f0:	6278      	str	r0, [r7, #36]	; 0x24
 80099f2:	d105      	bne.n	8009a00 <__pow5mult+0x44>
 80099f4:	21d7      	movs	r1, #215	; 0xd7
 80099f6:	4b1c      	ldr	r3, [pc, #112]	; (8009a68 <__pow5mult+0xac>)
 80099f8:	481c      	ldr	r0, [pc, #112]	; (8009a6c <__pow5mult+0xb0>)
 80099fa:	0049      	lsls	r1, r1, #1
 80099fc:	f000 fbec 	bl	800a1d8 <__assert_func>
 8009a00:	6044      	str	r4, [r0, #4]
 8009a02:	6084      	str	r4, [r0, #8]
 8009a04:	6004      	str	r4, [r0, #0]
 8009a06:	60c4      	str	r4, [r0, #12]
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	689c      	ldr	r4, [r3, #8]
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	2c00      	cmp	r4, #0
 8009a10:	d108      	bne.n	8009a24 <__pow5mult+0x68>
 8009a12:	0038      	movs	r0, r7
 8009a14:	4916      	ldr	r1, [pc, #88]	; (8009a70 <__pow5mult+0xb4>)
 8009a16:	f7ff ff0b 	bl	8009830 <__i2b>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	0004      	movs	r4, r0
 8009a1e:	6098      	str	r0, [r3, #8]
 8009a20:	2300      	movs	r3, #0
 8009a22:	6003      	str	r3, [r0, #0]
 8009a24:	2301      	movs	r3, #1
 8009a26:	421d      	tst	r5, r3
 8009a28:	d00a      	beq.n	8009a40 <__pow5mult+0x84>
 8009a2a:	0031      	movs	r1, r6
 8009a2c:	0022      	movs	r2, r4
 8009a2e:	0038      	movs	r0, r7
 8009a30:	f7ff ff14 	bl	800985c <__multiply>
 8009a34:	0031      	movs	r1, r6
 8009a36:	9001      	str	r0, [sp, #4]
 8009a38:	0038      	movs	r0, r7
 8009a3a:	f7ff fe49 	bl	80096d0 <_Bfree>
 8009a3e:	9e01      	ldr	r6, [sp, #4]
 8009a40:	106d      	asrs	r5, r5, #1
 8009a42:	d00c      	beq.n	8009a5e <__pow5mult+0xa2>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d107      	bne.n	8009a5a <__pow5mult+0x9e>
 8009a4a:	0022      	movs	r2, r4
 8009a4c:	0021      	movs	r1, r4
 8009a4e:	0038      	movs	r0, r7
 8009a50:	f7ff ff04 	bl	800985c <__multiply>
 8009a54:	2300      	movs	r3, #0
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	0004      	movs	r4, r0
 8009a5c:	e7e2      	b.n	8009a24 <__pow5mult+0x68>
 8009a5e:	0030      	movs	r0, r6
 8009a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	0800da08 	.word	0x0800da08
 8009a68:	0800d82d 	.word	0x0800d82d
 8009a6c:	0800d8b4 	.word	0x0800d8b4
 8009a70:	00000271 	.word	0x00000271

08009a74 <__lshift>:
 8009a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a76:	000c      	movs	r4, r1
 8009a78:	0017      	movs	r7, r2
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	1155      	asrs	r5, r2, #5
 8009a7e:	b087      	sub	sp, #28
 8009a80:	18eb      	adds	r3, r5, r3
 8009a82:	9302      	str	r3, [sp, #8]
 8009a84:	3301      	adds	r3, #1
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	6849      	ldr	r1, [r1, #4]
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	9004      	str	r0, [sp, #16]
 8009a8e:	9a01      	ldr	r2, [sp, #4]
 8009a90:	4293      	cmp	r3, r2
 8009a92:	db11      	blt.n	8009ab8 <__lshift+0x44>
 8009a94:	9804      	ldr	r0, [sp, #16]
 8009a96:	f7ff fdd7 	bl	8009648 <_Balloc>
 8009a9a:	0002      	movs	r2, r0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	3214      	adds	r2, #20
 8009aa0:	0006      	movs	r6, r0
 8009aa2:	0011      	movs	r1, r2
 8009aa4:	9203      	str	r2, [sp, #12]
 8009aa6:	4298      	cmp	r0, r3
 8009aa8:	d10d      	bne.n	8009ac6 <__lshift+0x52>
 8009aaa:	21da      	movs	r1, #218	; 0xda
 8009aac:	0002      	movs	r2, r0
 8009aae:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <__lshift+0xd8>)
 8009ab0:	4827      	ldr	r0, [pc, #156]	; (8009b50 <__lshift+0xdc>)
 8009ab2:	31ff      	adds	r1, #255	; 0xff
 8009ab4:	f000 fb90 	bl	800a1d8 <__assert_func>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	e7e7      	b.n	8009a8e <__lshift+0x1a>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	0098      	lsls	r0, r3, #2
 8009ac2:	500a      	str	r2, [r1, r0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	42ab      	cmp	r3, r5
 8009ac8:	dbf9      	blt.n	8009abe <__lshift+0x4a>
 8009aca:	43eb      	mvns	r3, r5
 8009acc:	17db      	asrs	r3, r3, #31
 8009ace:	401d      	ands	r5, r3
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	00ad      	lsls	r5, r5, #2
 8009ad4:	211f      	movs	r1, #31
 8009ad6:	0038      	movs	r0, r7
 8009ad8:	195d      	adds	r5, r3, r5
 8009ada:	0023      	movs	r3, r4
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	3314      	adds	r3, #20
 8009ae0:	0092      	lsls	r2, r2, #2
 8009ae2:	4008      	ands	r0, r1
 8009ae4:	4684      	mov	ip, r0
 8009ae6:	189a      	adds	r2, r3, r2
 8009ae8:	420f      	tst	r7, r1
 8009aea:	d02a      	beq.n	8009b42 <__lshift+0xce>
 8009aec:	3101      	adds	r1, #1
 8009aee:	1a09      	subs	r1, r1, r0
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	2100      	movs	r1, #0
 8009af4:	9503      	str	r5, [sp, #12]
 8009af6:	4667      	mov	r7, ip
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	40b8      	lsls	r0, r7
 8009afc:	4301      	orrs	r1, r0
 8009afe:	9803      	ldr	r0, [sp, #12]
 8009b00:	c002      	stmia	r0!, {r1}
 8009b02:	cb02      	ldmia	r3!, {r1}
 8009b04:	9003      	str	r0, [sp, #12]
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	40c1      	lsrs	r1, r0
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d8f3      	bhi.n	8009af6 <__lshift+0x82>
 8009b0e:	0020      	movs	r0, r4
 8009b10:	3015      	adds	r0, #21
 8009b12:	2304      	movs	r3, #4
 8009b14:	4282      	cmp	r2, r0
 8009b16:	d304      	bcc.n	8009b22 <__lshift+0xae>
 8009b18:	1b13      	subs	r3, r2, r4
 8009b1a:	3b15      	subs	r3, #21
 8009b1c:	089b      	lsrs	r3, r3, #2
 8009b1e:	3301      	adds	r3, #1
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	50e9      	str	r1, [r5, r3]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d002      	beq.n	8009b2e <__lshift+0xba>
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	9b01      	ldr	r3, [sp, #4]
 8009b30:	9804      	ldr	r0, [sp, #16]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	0021      	movs	r1, r4
 8009b36:	6133      	str	r3, [r6, #16]
 8009b38:	f7ff fdca 	bl	80096d0 <_Bfree>
 8009b3c:	0030      	movs	r0, r6
 8009b3e:	b007      	add	sp, #28
 8009b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b42:	cb02      	ldmia	r3!, {r1}
 8009b44:	c502      	stmia	r5!, {r1}
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d8fb      	bhi.n	8009b42 <__lshift+0xce>
 8009b4a:	e7f0      	b.n	8009b2e <__lshift+0xba>
 8009b4c:	0800d8a3 	.word	0x0800d8a3
 8009b50:	0800d8b4 	.word	0x0800d8b4

08009b54 <__mcmp>:
 8009b54:	6902      	ldr	r2, [r0, #16]
 8009b56:	690b      	ldr	r3, [r1, #16]
 8009b58:	b530      	push	{r4, r5, lr}
 8009b5a:	0004      	movs	r4, r0
 8009b5c:	1ad0      	subs	r0, r2, r3
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d10d      	bne.n	8009b7e <__mcmp+0x2a>
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	3414      	adds	r4, #20
 8009b66:	3114      	adds	r1, #20
 8009b68:	18e2      	adds	r2, r4, r3
 8009b6a:	18c9      	adds	r1, r1, r3
 8009b6c:	3a04      	subs	r2, #4
 8009b6e:	3904      	subs	r1, #4
 8009b70:	6815      	ldr	r5, [r2, #0]
 8009b72:	680b      	ldr	r3, [r1, #0]
 8009b74:	429d      	cmp	r5, r3
 8009b76:	d003      	beq.n	8009b80 <__mcmp+0x2c>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	d303      	bcc.n	8009b86 <__mcmp+0x32>
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	4294      	cmp	r4, r2
 8009b82:	d3f3      	bcc.n	8009b6c <__mcmp+0x18>
 8009b84:	e7fb      	b.n	8009b7e <__mcmp+0x2a>
 8009b86:	4240      	negs	r0, r0
 8009b88:	e7f9      	b.n	8009b7e <__mcmp+0x2a>
	...

08009b8c <__mdiff>:
 8009b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8e:	000e      	movs	r6, r1
 8009b90:	0007      	movs	r7, r0
 8009b92:	0011      	movs	r1, r2
 8009b94:	0030      	movs	r0, r6
 8009b96:	b087      	sub	sp, #28
 8009b98:	0014      	movs	r4, r2
 8009b9a:	f7ff ffdb 	bl	8009b54 <__mcmp>
 8009b9e:	1e05      	subs	r5, r0, #0
 8009ba0:	d110      	bne.n	8009bc4 <__mdiff+0x38>
 8009ba2:	0001      	movs	r1, r0
 8009ba4:	0038      	movs	r0, r7
 8009ba6:	f7ff fd4f 	bl	8009648 <_Balloc>
 8009baa:	1e02      	subs	r2, r0, #0
 8009bac:	d104      	bne.n	8009bb8 <__mdiff+0x2c>
 8009bae:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <__mdiff+0x124>)
 8009bb0:	4940      	ldr	r1, [pc, #256]	; (8009cb4 <__mdiff+0x128>)
 8009bb2:	4841      	ldr	r0, [pc, #260]	; (8009cb8 <__mdiff+0x12c>)
 8009bb4:	f000 fb10 	bl	800a1d8 <__assert_func>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	6145      	str	r5, [r0, #20]
 8009bbc:	6103      	str	r3, [r0, #16]
 8009bbe:	0010      	movs	r0, r2
 8009bc0:	b007      	add	sp, #28
 8009bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	db04      	blt.n	8009bd6 <__mdiff+0x4a>
 8009bcc:	0023      	movs	r3, r4
 8009bce:	0034      	movs	r4, r6
 8009bd0:	001e      	movs	r6, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	0038      	movs	r0, r7
 8009bd8:	6861      	ldr	r1, [r4, #4]
 8009bda:	f7ff fd35 	bl	8009648 <_Balloc>
 8009bde:	1e02      	subs	r2, r0, #0
 8009be0:	d103      	bne.n	8009bea <__mdiff+0x5e>
 8009be2:	2190      	movs	r1, #144	; 0x90
 8009be4:	4b32      	ldr	r3, [pc, #200]	; (8009cb0 <__mdiff+0x124>)
 8009be6:	0089      	lsls	r1, r1, #2
 8009be8:	e7e3      	b.n	8009bb2 <__mdiff+0x26>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	2700      	movs	r7, #0
 8009bee:	60c3      	str	r3, [r0, #12]
 8009bf0:	6920      	ldr	r0, [r4, #16]
 8009bf2:	3414      	adds	r4, #20
 8009bf4:	9401      	str	r4, [sp, #4]
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	0084      	lsls	r4, r0, #2
 8009bfa:	191b      	adds	r3, r3, r4
 8009bfc:	0034      	movs	r4, r6
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	6933      	ldr	r3, [r6, #16]
 8009c02:	3414      	adds	r4, #20
 8009c04:	0099      	lsls	r1, r3, #2
 8009c06:	1863      	adds	r3, r4, r1
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	0013      	movs	r3, r2
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	469c      	mov	ip, r3
 8009c10:	9305      	str	r3, [sp, #20]
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	cc02      	ldmia	r4!, {r1}
 8009c1a:	cb20      	ldmia	r3!, {r5}
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	b2ab      	uxth	r3, r5
 8009c20:	19df      	adds	r7, r3, r7
 8009c22:	b28b      	uxth	r3, r1
 8009c24:	1afb      	subs	r3, r7, r3
 8009c26:	0c2d      	lsrs	r5, r5, #16
 8009c28:	0c09      	lsrs	r1, r1, #16
 8009c2a:	1a69      	subs	r1, r5, r1
 8009c2c:	141d      	asrs	r5, r3, #16
 8009c2e:	1949      	adds	r1, r1, r5
 8009c30:	140f      	asrs	r7, r1, #16
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	0409      	lsls	r1, r1, #16
 8009c36:	430b      	orrs	r3, r1
 8009c38:	4661      	mov	r1, ip
 8009c3a:	c108      	stmia	r1!, {r3}
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	468c      	mov	ip, r1
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	d8e8      	bhi.n	8009c16 <__mdiff+0x8a>
 8009c44:	0031      	movs	r1, r6
 8009c46:	9c03      	ldr	r4, [sp, #12]
 8009c48:	3115      	adds	r1, #21
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	428c      	cmp	r4, r1
 8009c4e:	d304      	bcc.n	8009c5a <__mdiff+0xce>
 8009c50:	1ba3      	subs	r3, r4, r6
 8009c52:	3b15      	subs	r3, #21
 8009c54:	089b      	lsrs	r3, r3, #2
 8009c56:	3301      	adds	r3, #1
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	9901      	ldr	r1, [sp, #4]
 8009c5c:	18cc      	adds	r4, r1, r3
 8009c5e:	9905      	ldr	r1, [sp, #20]
 8009c60:	0026      	movs	r6, r4
 8009c62:	18cb      	adds	r3, r1, r3
 8009c64:	469c      	mov	ip, r3
 8009c66:	9902      	ldr	r1, [sp, #8]
 8009c68:	428e      	cmp	r6, r1
 8009c6a:	d310      	bcc.n	8009c8e <__mdiff+0x102>
 8009c6c:	9e02      	ldr	r6, [sp, #8]
 8009c6e:	1ee5      	subs	r5, r4, #3
 8009c70:	2100      	movs	r1, #0
 8009c72:	42ae      	cmp	r6, r5
 8009c74:	d304      	bcc.n	8009c80 <__mdiff+0xf4>
 8009c76:	0031      	movs	r1, r6
 8009c78:	3103      	adds	r1, #3
 8009c7a:	1b09      	subs	r1, r1, r4
 8009c7c:	0889      	lsrs	r1, r1, #2
 8009c7e:	0089      	lsls	r1, r1, #2
 8009c80:	185b      	adds	r3, r3, r1
 8009c82:	3b04      	subs	r3, #4
 8009c84:	6819      	ldr	r1, [r3, #0]
 8009c86:	2900      	cmp	r1, #0
 8009c88:	d00f      	beq.n	8009caa <__mdiff+0x11e>
 8009c8a:	6110      	str	r0, [r2, #16]
 8009c8c:	e797      	b.n	8009bbe <__mdiff+0x32>
 8009c8e:	ce02      	ldmia	r6!, {r1}
 8009c90:	b28d      	uxth	r5, r1
 8009c92:	19ed      	adds	r5, r5, r7
 8009c94:	0c0f      	lsrs	r7, r1, #16
 8009c96:	1429      	asrs	r1, r5, #16
 8009c98:	1879      	adds	r1, r7, r1
 8009c9a:	140f      	asrs	r7, r1, #16
 8009c9c:	b2ad      	uxth	r5, r5
 8009c9e:	0409      	lsls	r1, r1, #16
 8009ca0:	430d      	orrs	r5, r1
 8009ca2:	4661      	mov	r1, ip
 8009ca4:	c120      	stmia	r1!, {r5}
 8009ca6:	468c      	mov	ip, r1
 8009ca8:	e7dd      	b.n	8009c66 <__mdiff+0xda>
 8009caa:	3801      	subs	r0, #1
 8009cac:	e7e9      	b.n	8009c82 <__mdiff+0xf6>
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	0800d8a3 	.word	0x0800d8a3
 8009cb4:	00000232 	.word	0x00000232
 8009cb8:	0800d8b4 	.word	0x0800d8b4

08009cbc <__d2b>:
 8009cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	0014      	movs	r4, r2
 8009cc2:	001e      	movs	r6, r3
 8009cc4:	9f08      	ldr	r7, [sp, #32]
 8009cc6:	f7ff fcbf 	bl	8009648 <_Balloc>
 8009cca:	1e05      	subs	r5, r0, #0
 8009ccc:	d105      	bne.n	8009cda <__d2b+0x1e>
 8009cce:	0002      	movs	r2, r0
 8009cd0:	4b26      	ldr	r3, [pc, #152]	; (8009d6c <__d2b+0xb0>)
 8009cd2:	4927      	ldr	r1, [pc, #156]	; (8009d70 <__d2b+0xb4>)
 8009cd4:	4827      	ldr	r0, [pc, #156]	; (8009d74 <__d2b+0xb8>)
 8009cd6:	f000 fa7f 	bl	800a1d8 <__assert_func>
 8009cda:	0333      	lsls	r3, r6, #12
 8009cdc:	0076      	lsls	r6, r6, #1
 8009cde:	0b1b      	lsrs	r3, r3, #12
 8009ce0:	0d76      	lsrs	r6, r6, #21
 8009ce2:	d124      	bne.n	8009d2e <__d2b+0x72>
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	2c00      	cmp	r4, #0
 8009ce8:	d027      	beq.n	8009d3a <__d2b+0x7e>
 8009cea:	4668      	mov	r0, sp
 8009cec:	9400      	str	r4, [sp, #0]
 8009cee:	f7ff fd71 	bl	80097d4 <__lo0bits>
 8009cf2:	9c00      	ldr	r4, [sp, #0]
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d01e      	beq.n	8009d36 <__d2b+0x7a>
 8009cf8:	9b01      	ldr	r3, [sp, #4]
 8009cfa:	2120      	movs	r1, #32
 8009cfc:	001a      	movs	r2, r3
 8009cfe:	1a09      	subs	r1, r1, r0
 8009d00:	408a      	lsls	r2, r1
 8009d02:	40c3      	lsrs	r3, r0
 8009d04:	4322      	orrs	r2, r4
 8009d06:	616a      	str	r2, [r5, #20]
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	9c01      	ldr	r4, [sp, #4]
 8009d0c:	61ac      	str	r4, [r5, #24]
 8009d0e:	1e63      	subs	r3, r4, #1
 8009d10:	419c      	sbcs	r4, r3
 8009d12:	3401      	adds	r4, #1
 8009d14:	612c      	str	r4, [r5, #16]
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d018      	beq.n	8009d4c <__d2b+0x90>
 8009d1a:	4b17      	ldr	r3, [pc, #92]	; (8009d78 <__d2b+0xbc>)
 8009d1c:	18f6      	adds	r6, r6, r3
 8009d1e:	2335      	movs	r3, #53	; 0x35
 8009d20:	1836      	adds	r6, r6, r0
 8009d22:	1a18      	subs	r0, r3, r0
 8009d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d26:	603e      	str	r6, [r7, #0]
 8009d28:	6018      	str	r0, [r3, #0]
 8009d2a:	0028      	movs	r0, r5
 8009d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d2e:	2280      	movs	r2, #128	; 0x80
 8009d30:	0352      	lsls	r2, r2, #13
 8009d32:	4313      	orrs	r3, r2
 8009d34:	e7d6      	b.n	8009ce4 <__d2b+0x28>
 8009d36:	616c      	str	r4, [r5, #20]
 8009d38:	e7e7      	b.n	8009d0a <__d2b+0x4e>
 8009d3a:	a801      	add	r0, sp, #4
 8009d3c:	f7ff fd4a 	bl	80097d4 <__lo0bits>
 8009d40:	2401      	movs	r4, #1
 8009d42:	9b01      	ldr	r3, [sp, #4]
 8009d44:	612c      	str	r4, [r5, #16]
 8009d46:	616b      	str	r3, [r5, #20]
 8009d48:	3020      	adds	r0, #32
 8009d4a:	e7e4      	b.n	8009d16 <__d2b+0x5a>
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <__d2b+0xc0>)
 8009d4e:	18c0      	adds	r0, r0, r3
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <__d2b+0xc4>)
 8009d52:	6038      	str	r0, [r7, #0]
 8009d54:	18e3      	adds	r3, r4, r3
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	18eb      	adds	r3, r5, r3
 8009d5a:	6958      	ldr	r0, [r3, #20]
 8009d5c:	f7ff fd20 	bl	80097a0 <__hi0bits>
 8009d60:	0164      	lsls	r4, r4, #5
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	1a24      	subs	r4, r4, r0
 8009d66:	601c      	str	r4, [r3, #0]
 8009d68:	e7df      	b.n	8009d2a <__d2b+0x6e>
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	0800d8a3 	.word	0x0800d8a3
 8009d70:	0000030a 	.word	0x0000030a
 8009d74:	0800d8b4 	.word	0x0800d8b4
 8009d78:	fffffbcd 	.word	0xfffffbcd
 8009d7c:	fffffbce 	.word	0xfffffbce
 8009d80:	3fffffff 	.word	0x3fffffff

08009d84 <_calloc_r>:
 8009d84:	434a      	muls	r2, r1
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	0011      	movs	r1, r2
 8009d8a:	0015      	movs	r5, r2
 8009d8c:	f000 f852 	bl	8009e34 <_malloc_r>
 8009d90:	1e04      	subs	r4, r0, #0
 8009d92:	d003      	beq.n	8009d9c <_calloc_r+0x18>
 8009d94:	002a      	movs	r2, r5
 8009d96:	2100      	movs	r1, #0
 8009d98:	f7fe f8f0 	bl	8007f7c <memset>
 8009d9c:	0020      	movs	r0, r4
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}

08009da0 <_free_r>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	0005      	movs	r5, r0
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d010      	beq.n	8009dca <_free_r+0x2a>
 8009da8:	1f0c      	subs	r4, r1, #4
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da00      	bge.n	8009db2 <_free_r+0x12>
 8009db0:	18e4      	adds	r4, r4, r3
 8009db2:	0028      	movs	r0, r5
 8009db4:	f000 fa50 	bl	800a258 <__malloc_lock>
 8009db8:	4a1d      	ldr	r2, [pc, #116]	; (8009e30 <_free_r+0x90>)
 8009dba:	6813      	ldr	r3, [r2, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d105      	bne.n	8009dcc <_free_r+0x2c>
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	6014      	str	r4, [r2, #0]
 8009dc4:	0028      	movs	r0, r5
 8009dc6:	f000 fa4f 	bl	800a268 <__malloc_unlock>
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d908      	bls.n	8009de2 <_free_r+0x42>
 8009dd0:	6821      	ldr	r1, [r4, #0]
 8009dd2:	1860      	adds	r0, r4, r1
 8009dd4:	4283      	cmp	r3, r0
 8009dd6:	d1f3      	bne.n	8009dc0 <_free_r+0x20>
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	1841      	adds	r1, r0, r1
 8009dde:	6021      	str	r1, [r4, #0]
 8009de0:	e7ee      	b.n	8009dc0 <_free_r+0x20>
 8009de2:	001a      	movs	r2, r3
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <_free_r+0x4e>
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	d9f9      	bls.n	8009de2 <_free_r+0x42>
 8009dee:	6811      	ldr	r1, [r2, #0]
 8009df0:	1850      	adds	r0, r2, r1
 8009df2:	42a0      	cmp	r0, r4
 8009df4:	d10b      	bne.n	8009e0e <_free_r+0x6e>
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	1809      	adds	r1, r1, r0
 8009dfa:	1850      	adds	r0, r2, r1
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	4283      	cmp	r3, r0
 8009e00:	d1e0      	bne.n	8009dc4 <_free_r+0x24>
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	1841      	adds	r1, r0, r1
 8009e08:	6011      	str	r1, [r2, #0]
 8009e0a:	6053      	str	r3, [r2, #4]
 8009e0c:	e7da      	b.n	8009dc4 <_free_r+0x24>
 8009e0e:	42a0      	cmp	r0, r4
 8009e10:	d902      	bls.n	8009e18 <_free_r+0x78>
 8009e12:	230c      	movs	r3, #12
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	e7d5      	b.n	8009dc4 <_free_r+0x24>
 8009e18:	6821      	ldr	r1, [r4, #0]
 8009e1a:	1860      	adds	r0, r4, r1
 8009e1c:	4283      	cmp	r3, r0
 8009e1e:	d103      	bne.n	8009e28 <_free_r+0x88>
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	1841      	adds	r1, r0, r1
 8009e26:	6021      	str	r1, [r4, #0]
 8009e28:	6063      	str	r3, [r4, #4]
 8009e2a:	6054      	str	r4, [r2, #4]
 8009e2c:	e7ca      	b.n	8009dc4 <_free_r+0x24>
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	20000a74 	.word	0x20000a74

08009e34 <_malloc_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	2303      	movs	r3, #3
 8009e38:	1ccd      	adds	r5, r1, #3
 8009e3a:	439d      	bics	r5, r3
 8009e3c:	3508      	adds	r5, #8
 8009e3e:	0006      	movs	r6, r0
 8009e40:	2d0c      	cmp	r5, #12
 8009e42:	d21f      	bcs.n	8009e84 <_malloc_r+0x50>
 8009e44:	250c      	movs	r5, #12
 8009e46:	42a9      	cmp	r1, r5
 8009e48:	d81e      	bhi.n	8009e88 <_malloc_r+0x54>
 8009e4a:	0030      	movs	r0, r6
 8009e4c:	f000 fa04 	bl	800a258 <__malloc_lock>
 8009e50:	4925      	ldr	r1, [pc, #148]	; (8009ee8 <_malloc_r+0xb4>)
 8009e52:	680a      	ldr	r2, [r1, #0]
 8009e54:	0014      	movs	r4, r2
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d11a      	bne.n	8009e90 <_malloc_r+0x5c>
 8009e5a:	4f24      	ldr	r7, [pc, #144]	; (8009eec <_malloc_r+0xb8>)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d104      	bne.n	8009e6c <_malloc_r+0x38>
 8009e62:	0021      	movs	r1, r4
 8009e64:	0030      	movs	r0, r6
 8009e66:	f000 f9a5 	bl	800a1b4 <_sbrk_r>
 8009e6a:	6038      	str	r0, [r7, #0]
 8009e6c:	0029      	movs	r1, r5
 8009e6e:	0030      	movs	r0, r6
 8009e70:	f000 f9a0 	bl	800a1b4 <_sbrk_r>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d12b      	bne.n	8009ed0 <_malloc_r+0x9c>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	0030      	movs	r0, r6
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	f000 f9f3 	bl	800a268 <__malloc_unlock>
 8009e82:	e003      	b.n	8009e8c <_malloc_r+0x58>
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	dade      	bge.n	8009e46 <_malloc_r+0x12>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	6033      	str	r3, [r6, #0]
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1b5b      	subs	r3, r3, r5
 8009e94:	d419      	bmi.n	8009eca <_malloc_r+0x96>
 8009e96:	2b0b      	cmp	r3, #11
 8009e98:	d903      	bls.n	8009ea2 <_malloc_r+0x6e>
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	18e4      	adds	r4, r4, r3
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	e003      	b.n	8009eaa <_malloc_r+0x76>
 8009ea2:	6863      	ldr	r3, [r4, #4]
 8009ea4:	42a2      	cmp	r2, r4
 8009ea6:	d10e      	bne.n	8009ec6 <_malloc_r+0x92>
 8009ea8:	600b      	str	r3, [r1, #0]
 8009eaa:	0030      	movs	r0, r6
 8009eac:	f000 f9dc 	bl	800a268 <__malloc_unlock>
 8009eb0:	0020      	movs	r0, r4
 8009eb2:	2207      	movs	r2, #7
 8009eb4:	300b      	adds	r0, #11
 8009eb6:	1d23      	adds	r3, r4, #4
 8009eb8:	4390      	bics	r0, r2
 8009eba:	1ac2      	subs	r2, r0, r3
 8009ebc:	4298      	cmp	r0, r3
 8009ebe:	d0e6      	beq.n	8009e8e <_malloc_r+0x5a>
 8009ec0:	1a1b      	subs	r3, r3, r0
 8009ec2:	50a3      	str	r3, [r4, r2]
 8009ec4:	e7e3      	b.n	8009e8e <_malloc_r+0x5a>
 8009ec6:	6053      	str	r3, [r2, #4]
 8009ec8:	e7ef      	b.n	8009eaa <_malloc_r+0x76>
 8009eca:	0022      	movs	r2, r4
 8009ecc:	6864      	ldr	r4, [r4, #4]
 8009ece:	e7c2      	b.n	8009e56 <_malloc_r+0x22>
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	1cc4      	adds	r4, r0, #3
 8009ed4:	439c      	bics	r4, r3
 8009ed6:	42a0      	cmp	r0, r4
 8009ed8:	d0e1      	beq.n	8009e9e <_malloc_r+0x6a>
 8009eda:	1a21      	subs	r1, r4, r0
 8009edc:	0030      	movs	r0, r6
 8009ede:	f000 f969 	bl	800a1b4 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d1db      	bne.n	8009e9e <_malloc_r+0x6a>
 8009ee6:	e7c7      	b.n	8009e78 <_malloc_r+0x44>
 8009ee8:	20000a74 	.word	0x20000a74
 8009eec:	20000a78 	.word	0x20000a78

08009ef0 <__ssputs_r>:
 8009ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef2:	688e      	ldr	r6, [r1, #8]
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	0007      	movs	r7, r0
 8009ef8:	000c      	movs	r4, r1
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	429e      	cmp	r6, r3
 8009f00:	d83c      	bhi.n	8009f7c <__ssputs_r+0x8c>
 8009f02:	2390      	movs	r3, #144	; 0x90
 8009f04:	898a      	ldrh	r2, [r1, #12]
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	421a      	tst	r2, r3
 8009f0a:	d034      	beq.n	8009f76 <__ssputs_r+0x86>
 8009f0c:	2503      	movs	r5, #3
 8009f0e:	6909      	ldr	r1, [r1, #16]
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	1a5b      	subs	r3, r3, r1
 8009f14:	9302      	str	r3, [sp, #8]
 8009f16:	6963      	ldr	r3, [r4, #20]
 8009f18:	9802      	ldr	r0, [sp, #8]
 8009f1a:	435d      	muls	r5, r3
 8009f1c:	0feb      	lsrs	r3, r5, #31
 8009f1e:	195d      	adds	r5, r3, r5
 8009f20:	9b01      	ldr	r3, [sp, #4]
 8009f22:	106d      	asrs	r5, r5, #1
 8009f24:	3301      	adds	r3, #1
 8009f26:	181b      	adds	r3, r3, r0
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	d900      	bls.n	8009f2e <__ssputs_r+0x3e>
 8009f2c:	001d      	movs	r5, r3
 8009f2e:	0553      	lsls	r3, r2, #21
 8009f30:	d532      	bpl.n	8009f98 <__ssputs_r+0xa8>
 8009f32:	0029      	movs	r1, r5
 8009f34:	0038      	movs	r0, r7
 8009f36:	f7ff ff7d 	bl	8009e34 <_malloc_r>
 8009f3a:	1e06      	subs	r6, r0, #0
 8009f3c:	d109      	bne.n	8009f52 <__ssputs_r+0x62>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	603b      	str	r3, [r7, #0]
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	2001      	movs	r0, #1
 8009f46:	89a2      	ldrh	r2, [r4, #12]
 8009f48:	4240      	negs	r0, r0
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	b005      	add	sp, #20
 8009f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f52:	9a02      	ldr	r2, [sp, #8]
 8009f54:	6921      	ldr	r1, [r4, #16]
 8009f56:	f7fd fff5 	bl	8007f44 <memcpy>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	4a14      	ldr	r2, [pc, #80]	; (8009fb0 <__ssputs_r+0xc0>)
 8009f5e:	401a      	ands	r2, r3
 8009f60:	2380      	movs	r3, #128	; 0x80
 8009f62:	4313      	orrs	r3, r2
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	6126      	str	r6, [r4, #16]
 8009f6a:	18f6      	adds	r6, r6, r3
 8009f6c:	6026      	str	r6, [r4, #0]
 8009f6e:	6165      	str	r5, [r4, #20]
 8009f70:	9e01      	ldr	r6, [sp, #4]
 8009f72:	1aed      	subs	r5, r5, r3
 8009f74:	60a5      	str	r5, [r4, #8]
 8009f76:	9b01      	ldr	r3, [sp, #4]
 8009f78:	429e      	cmp	r6, r3
 8009f7a:	d900      	bls.n	8009f7e <__ssputs_r+0x8e>
 8009f7c:	9e01      	ldr	r6, [sp, #4]
 8009f7e:	0032      	movs	r2, r6
 8009f80:	9903      	ldr	r1, [sp, #12]
 8009f82:	6820      	ldr	r0, [r4, #0]
 8009f84:	f7fd ffe7 	bl	8007f56 <memmove>
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	1b9b      	subs	r3, r3, r6
 8009f8e:	60a3      	str	r3, [r4, #8]
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	199e      	adds	r6, r3, r6
 8009f94:	6026      	str	r6, [r4, #0]
 8009f96:	e7da      	b.n	8009f4e <__ssputs_r+0x5e>
 8009f98:	002a      	movs	r2, r5
 8009f9a:	0038      	movs	r0, r7
 8009f9c:	f000 f96c 	bl	800a278 <_realloc_r>
 8009fa0:	1e06      	subs	r6, r0, #0
 8009fa2:	d1e0      	bne.n	8009f66 <__ssputs_r+0x76>
 8009fa4:	0038      	movs	r0, r7
 8009fa6:	6921      	ldr	r1, [r4, #16]
 8009fa8:	f7ff fefa 	bl	8009da0 <_free_r>
 8009fac:	e7c7      	b.n	8009f3e <__ssputs_r+0x4e>
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	fffffb7f 	.word	0xfffffb7f

08009fb4 <_svfiprintf_r>:
 8009fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb6:	b0a1      	sub	sp, #132	; 0x84
 8009fb8:	9003      	str	r0, [sp, #12]
 8009fba:	001d      	movs	r5, r3
 8009fbc:	898b      	ldrh	r3, [r1, #12]
 8009fbe:	000f      	movs	r7, r1
 8009fc0:	0016      	movs	r6, r2
 8009fc2:	061b      	lsls	r3, r3, #24
 8009fc4:	d511      	bpl.n	8009fea <_svfiprintf_r+0x36>
 8009fc6:	690b      	ldr	r3, [r1, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10e      	bne.n	8009fea <_svfiprintf_r+0x36>
 8009fcc:	2140      	movs	r1, #64	; 0x40
 8009fce:	f7ff ff31 	bl	8009e34 <_malloc_r>
 8009fd2:	6038      	str	r0, [r7, #0]
 8009fd4:	6138      	str	r0, [r7, #16]
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d105      	bne.n	8009fe6 <_svfiprintf_r+0x32>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	9a03      	ldr	r2, [sp, #12]
 8009fde:	3801      	subs	r0, #1
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	b021      	add	sp, #132	; 0x84
 8009fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe6:	2340      	movs	r3, #64	; 0x40
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	2300      	movs	r3, #0
 8009fec:	ac08      	add	r4, sp, #32
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	3320      	adds	r3, #32
 8009ff2:	7663      	strb	r3, [r4, #25]
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	76a3      	strb	r3, [r4, #26]
 8009ff8:	9507      	str	r5, [sp, #28]
 8009ffa:	0035      	movs	r5, r6
 8009ffc:	782b      	ldrb	r3, [r5, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <_svfiprintf_r+0x52>
 800a002:	2b25      	cmp	r3, #37	; 0x25
 800a004:	d147      	bne.n	800a096 <_svfiprintf_r+0xe2>
 800a006:	1bab      	subs	r3, r5, r6
 800a008:	9305      	str	r3, [sp, #20]
 800a00a:	42b5      	cmp	r5, r6
 800a00c:	d00c      	beq.n	800a028 <_svfiprintf_r+0x74>
 800a00e:	0032      	movs	r2, r6
 800a010:	0039      	movs	r1, r7
 800a012:	9803      	ldr	r0, [sp, #12]
 800a014:	f7ff ff6c 	bl	8009ef0 <__ssputs_r>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d100      	bne.n	800a01e <_svfiprintf_r+0x6a>
 800a01c:	e0ae      	b.n	800a17c <_svfiprintf_r+0x1c8>
 800a01e:	6962      	ldr	r2, [r4, #20]
 800a020:	9b05      	ldr	r3, [sp, #20]
 800a022:	4694      	mov	ip, r2
 800a024:	4463      	add	r3, ip
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	782b      	ldrb	r3, [r5, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d100      	bne.n	800a030 <_svfiprintf_r+0x7c>
 800a02e:	e0a5      	b.n	800a17c <_svfiprintf_r+0x1c8>
 800a030:	2201      	movs	r2, #1
 800a032:	2300      	movs	r3, #0
 800a034:	4252      	negs	r2, r2
 800a036:	6062      	str	r2, [r4, #4]
 800a038:	a904      	add	r1, sp, #16
 800a03a:	3254      	adds	r2, #84	; 0x54
 800a03c:	1852      	adds	r2, r2, r1
 800a03e:	1c6e      	adds	r6, r5, #1
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	60e3      	str	r3, [r4, #12]
 800a044:	60a3      	str	r3, [r4, #8]
 800a046:	7013      	strb	r3, [r2, #0]
 800a048:	65a3      	str	r3, [r4, #88]	; 0x58
 800a04a:	2205      	movs	r2, #5
 800a04c:	7831      	ldrb	r1, [r6, #0]
 800a04e:	4854      	ldr	r0, [pc, #336]	; (800a1a0 <_svfiprintf_r+0x1ec>)
 800a050:	f7ff faee 	bl	8009630 <memchr>
 800a054:	1c75      	adds	r5, r6, #1
 800a056:	2800      	cmp	r0, #0
 800a058:	d11f      	bne.n	800a09a <_svfiprintf_r+0xe6>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	06d3      	lsls	r3, r2, #27
 800a05e:	d504      	bpl.n	800a06a <_svfiprintf_r+0xb6>
 800a060:	2353      	movs	r3, #83	; 0x53
 800a062:	a904      	add	r1, sp, #16
 800a064:	185b      	adds	r3, r3, r1
 800a066:	2120      	movs	r1, #32
 800a068:	7019      	strb	r1, [r3, #0]
 800a06a:	0713      	lsls	r3, r2, #28
 800a06c:	d504      	bpl.n	800a078 <_svfiprintf_r+0xc4>
 800a06e:	2353      	movs	r3, #83	; 0x53
 800a070:	a904      	add	r1, sp, #16
 800a072:	185b      	adds	r3, r3, r1
 800a074:	212b      	movs	r1, #43	; 0x2b
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	7833      	ldrb	r3, [r6, #0]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d016      	beq.n	800a0ac <_svfiprintf_r+0xf8>
 800a07e:	0035      	movs	r5, r6
 800a080:	2100      	movs	r1, #0
 800a082:	200a      	movs	r0, #10
 800a084:	68e3      	ldr	r3, [r4, #12]
 800a086:	782a      	ldrb	r2, [r5, #0]
 800a088:	1c6e      	adds	r6, r5, #1
 800a08a:	3a30      	subs	r2, #48	; 0x30
 800a08c:	2a09      	cmp	r2, #9
 800a08e:	d94e      	bls.n	800a12e <_svfiprintf_r+0x17a>
 800a090:	2900      	cmp	r1, #0
 800a092:	d111      	bne.n	800a0b8 <_svfiprintf_r+0x104>
 800a094:	e017      	b.n	800a0c6 <_svfiprintf_r+0x112>
 800a096:	3501      	adds	r5, #1
 800a098:	e7b0      	b.n	8009ffc <_svfiprintf_r+0x48>
 800a09a:	4b41      	ldr	r3, [pc, #260]	; (800a1a0 <_svfiprintf_r+0x1ec>)
 800a09c:	6822      	ldr	r2, [r4, #0]
 800a09e:	1ac0      	subs	r0, r0, r3
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4083      	lsls	r3, r0
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	002e      	movs	r6, r5
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	e7ce      	b.n	800a04a <_svfiprintf_r+0x96>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9107      	str	r1, [sp, #28]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	db01      	blt.n	800a0bc <_svfiprintf_r+0x108>
 800a0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ba:	e004      	b.n	800a0c6 <_svfiprintf_r+0x112>
 800a0bc:	425b      	negs	r3, r3
 800a0be:	60e3      	str	r3, [r4, #12]
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	782b      	ldrb	r3, [r5, #0]
 800a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ca:	d10a      	bne.n	800a0e2 <_svfiprintf_r+0x12e>
 800a0cc:	786b      	ldrb	r3, [r5, #1]
 800a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d0:	d135      	bne.n	800a13e <_svfiprintf_r+0x18a>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	3502      	adds	r5, #2
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9207      	str	r2, [sp, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db2b      	blt.n	800a138 <_svfiprintf_r+0x184>
 800a0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e2:	4e30      	ldr	r6, [pc, #192]	; (800a1a4 <_svfiprintf_r+0x1f0>)
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	0030      	movs	r0, r6
 800a0e8:	7829      	ldrb	r1, [r5, #0]
 800a0ea:	f7ff faa1 	bl	8009630 <memchr>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d006      	beq.n	800a100 <_svfiprintf_r+0x14c>
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	1b80      	subs	r0, r0, r6
 800a0f6:	4083      	lsls	r3, r0
 800a0f8:	6822      	ldr	r2, [r4, #0]
 800a0fa:	3501      	adds	r5, #1
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	7829      	ldrb	r1, [r5, #0]
 800a102:	2206      	movs	r2, #6
 800a104:	4828      	ldr	r0, [pc, #160]	; (800a1a8 <_svfiprintf_r+0x1f4>)
 800a106:	1c6e      	adds	r6, r5, #1
 800a108:	7621      	strb	r1, [r4, #24]
 800a10a:	f7ff fa91 	bl	8009630 <memchr>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d03c      	beq.n	800a18c <_svfiprintf_r+0x1d8>
 800a112:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <_svfiprintf_r+0x1f8>)
 800a114:	2b00      	cmp	r3, #0
 800a116:	d125      	bne.n	800a164 <_svfiprintf_r+0x1b0>
 800a118:	2207      	movs	r2, #7
 800a11a:	9b07      	ldr	r3, [sp, #28]
 800a11c:	3307      	adds	r3, #7
 800a11e:	4393      	bics	r3, r2
 800a120:	3308      	adds	r3, #8
 800a122:	9307      	str	r3, [sp, #28]
 800a124:	6963      	ldr	r3, [r4, #20]
 800a126:	9a04      	ldr	r2, [sp, #16]
 800a128:	189b      	adds	r3, r3, r2
 800a12a:	6163      	str	r3, [r4, #20]
 800a12c:	e765      	b.n	8009ffa <_svfiprintf_r+0x46>
 800a12e:	4343      	muls	r3, r0
 800a130:	0035      	movs	r5, r6
 800a132:	2101      	movs	r1, #1
 800a134:	189b      	adds	r3, r3, r2
 800a136:	e7a6      	b.n	800a086 <_svfiprintf_r+0xd2>
 800a138:	2301      	movs	r3, #1
 800a13a:	425b      	negs	r3, r3
 800a13c:	e7d0      	b.n	800a0e0 <_svfiprintf_r+0x12c>
 800a13e:	2300      	movs	r3, #0
 800a140:	200a      	movs	r0, #10
 800a142:	001a      	movs	r2, r3
 800a144:	3501      	adds	r5, #1
 800a146:	6063      	str	r3, [r4, #4]
 800a148:	7829      	ldrb	r1, [r5, #0]
 800a14a:	1c6e      	adds	r6, r5, #1
 800a14c:	3930      	subs	r1, #48	; 0x30
 800a14e:	2909      	cmp	r1, #9
 800a150:	d903      	bls.n	800a15a <_svfiprintf_r+0x1a6>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0c5      	beq.n	800a0e2 <_svfiprintf_r+0x12e>
 800a156:	9209      	str	r2, [sp, #36]	; 0x24
 800a158:	e7c3      	b.n	800a0e2 <_svfiprintf_r+0x12e>
 800a15a:	4342      	muls	r2, r0
 800a15c:	0035      	movs	r5, r6
 800a15e:	2301      	movs	r3, #1
 800a160:	1852      	adds	r2, r2, r1
 800a162:	e7f1      	b.n	800a148 <_svfiprintf_r+0x194>
 800a164:	ab07      	add	r3, sp, #28
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	003a      	movs	r2, r7
 800a16a:	0021      	movs	r1, r4
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <_svfiprintf_r+0x1fc>)
 800a16e:	9803      	ldr	r0, [sp, #12]
 800a170:	f7fd ffb6 	bl	80080e0 <_printf_float>
 800a174:	9004      	str	r0, [sp, #16]
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	3301      	adds	r3, #1
 800a17a:	d1d3      	bne.n	800a124 <_svfiprintf_r+0x170>
 800a17c:	89bb      	ldrh	r3, [r7, #12]
 800a17e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a180:	065b      	lsls	r3, r3, #25
 800a182:	d400      	bmi.n	800a186 <_svfiprintf_r+0x1d2>
 800a184:	e72d      	b.n	8009fe2 <_svfiprintf_r+0x2e>
 800a186:	2001      	movs	r0, #1
 800a188:	4240      	negs	r0, r0
 800a18a:	e72a      	b.n	8009fe2 <_svfiprintf_r+0x2e>
 800a18c:	ab07      	add	r3, sp, #28
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	003a      	movs	r2, r7
 800a192:	0021      	movs	r1, r4
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <_svfiprintf_r+0x1fc>)
 800a196:	9803      	ldr	r0, [sp, #12]
 800a198:	f7fe fa60 	bl	800865c <_printf_i>
 800a19c:	e7ea      	b.n	800a174 <_svfiprintf_r+0x1c0>
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	0800da14 	.word	0x0800da14
 800a1a4:	0800da1a 	.word	0x0800da1a
 800a1a8:	0800da1e 	.word	0x0800da1e
 800a1ac:	080080e1 	.word	0x080080e1
 800a1b0:	08009ef1 	.word	0x08009ef1

0800a1b4 <_sbrk_r>:
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	b570      	push	{r4, r5, r6, lr}
 800a1b8:	4d06      	ldr	r5, [pc, #24]	; (800a1d4 <_sbrk_r+0x20>)
 800a1ba:	0004      	movs	r4, r0
 800a1bc:	0008      	movs	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f9 fdc4 	bl	8003d4c <_sbrk>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d103      	bne.n	800a1d0 <_sbrk_r+0x1c>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d000      	beq.n	800a1d0 <_sbrk_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	46c0      	nop			; (mov r8, r8)
 800a1d4:	20000cac 	.word	0x20000cac

0800a1d8 <__assert_func>:
 800a1d8:	b530      	push	{r4, r5, lr}
 800a1da:	0014      	movs	r4, r2
 800a1dc:	001a      	movs	r2, r3
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <__assert_func+0x2c>)
 800a1e0:	0005      	movs	r5, r0
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	68d8      	ldr	r0, [r3, #12]
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <__assert_func+0x30>)
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	d101      	bne.n	800a1f2 <__assert_func+0x1a>
 800a1ee:	4b07      	ldr	r3, [pc, #28]	; (800a20c <__assert_func+0x34>)
 800a1f0:	001c      	movs	r4, r3
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	9100      	str	r1, [sp, #0]
 800a1f6:	002b      	movs	r3, r5
 800a1f8:	4905      	ldr	r1, [pc, #20]	; (800a210 <__assert_func+0x38>)
 800a1fa:	9402      	str	r4, [sp, #8]
 800a1fc:	f000 f80a 	bl	800a214 <fiprintf>
 800a200:	f000 fa9e 	bl	800a740 <abort>
 800a204:	20000464 	.word	0x20000464
 800a208:	0800da25 	.word	0x0800da25
 800a20c:	0800da60 	.word	0x0800da60
 800a210:	0800da32 	.word	0x0800da32

0800a214 <fiprintf>:
 800a214:	b40e      	push	{r1, r2, r3}
 800a216:	b503      	push	{r0, r1, lr}
 800a218:	0001      	movs	r1, r0
 800a21a:	ab03      	add	r3, sp, #12
 800a21c:	4804      	ldr	r0, [pc, #16]	; (800a230 <fiprintf+0x1c>)
 800a21e:	cb04      	ldmia	r3!, {r2}
 800a220:	6800      	ldr	r0, [r0, #0]
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	f000 f876 	bl	800a314 <_vfiprintf_r>
 800a228:	b002      	add	sp, #8
 800a22a:	bc08      	pop	{r3}
 800a22c:	b003      	add	sp, #12
 800a22e:	4718      	bx	r3
 800a230:	20000464 	.word	0x20000464

0800a234 <__ascii_mbtowc>:
 800a234:	b082      	sub	sp, #8
 800a236:	2900      	cmp	r1, #0
 800a238:	d100      	bne.n	800a23c <__ascii_mbtowc+0x8>
 800a23a:	a901      	add	r1, sp, #4
 800a23c:	1e10      	subs	r0, r2, #0
 800a23e:	d006      	beq.n	800a24e <__ascii_mbtowc+0x1a>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <__ascii_mbtowc+0x1e>
 800a244:	7813      	ldrb	r3, [r2, #0]
 800a246:	600b      	str	r3, [r1, #0]
 800a248:	7810      	ldrb	r0, [r2, #0]
 800a24a:	1e43      	subs	r3, r0, #1
 800a24c:	4198      	sbcs	r0, r3
 800a24e:	b002      	add	sp, #8
 800a250:	4770      	bx	lr
 800a252:	2002      	movs	r0, #2
 800a254:	4240      	negs	r0, r0
 800a256:	e7fa      	b.n	800a24e <__ascii_mbtowc+0x1a>

0800a258 <__malloc_lock>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4802      	ldr	r0, [pc, #8]	; (800a264 <__malloc_lock+0xc>)
 800a25c:	f000 fc47 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a260:	bd10      	pop	{r4, pc}
 800a262:	46c0      	nop			; (mov r8, r8)
 800a264:	20000cb4 	.word	0x20000cb4

0800a268 <__malloc_unlock>:
 800a268:	b510      	push	{r4, lr}
 800a26a:	4802      	ldr	r0, [pc, #8]	; (800a274 <__malloc_unlock+0xc>)
 800a26c:	f000 fc40 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	20000cb4 	.word	0x20000cb4

0800a278 <_realloc_r>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	0007      	movs	r7, r0
 800a27c:	000d      	movs	r5, r1
 800a27e:	0016      	movs	r6, r2
 800a280:	2900      	cmp	r1, #0
 800a282:	d105      	bne.n	800a290 <_realloc_r+0x18>
 800a284:	0011      	movs	r1, r2
 800a286:	f7ff fdd5 	bl	8009e34 <_malloc_r>
 800a28a:	0004      	movs	r4, r0
 800a28c:	0020      	movs	r0, r4
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a290:	2a00      	cmp	r2, #0
 800a292:	d103      	bne.n	800a29c <_realloc_r+0x24>
 800a294:	f7ff fd84 	bl	8009da0 <_free_r>
 800a298:	0034      	movs	r4, r6
 800a29a:	e7f7      	b.n	800a28c <_realloc_r+0x14>
 800a29c:	f000 fc96 	bl	800abcc <_malloc_usable_size_r>
 800a2a0:	002c      	movs	r4, r5
 800a2a2:	42b0      	cmp	r0, r6
 800a2a4:	d2f2      	bcs.n	800a28c <_realloc_r+0x14>
 800a2a6:	0031      	movs	r1, r6
 800a2a8:	0038      	movs	r0, r7
 800a2aa:	f7ff fdc3 	bl	8009e34 <_malloc_r>
 800a2ae:	1e04      	subs	r4, r0, #0
 800a2b0:	d0ec      	beq.n	800a28c <_realloc_r+0x14>
 800a2b2:	0029      	movs	r1, r5
 800a2b4:	0032      	movs	r2, r6
 800a2b6:	f7fd fe45 	bl	8007f44 <memcpy>
 800a2ba:	0029      	movs	r1, r5
 800a2bc:	0038      	movs	r0, r7
 800a2be:	f7ff fd6f 	bl	8009da0 <_free_r>
 800a2c2:	e7e3      	b.n	800a28c <_realloc_r+0x14>

0800a2c4 <__sfputc_r>:
 800a2c4:	6893      	ldr	r3, [r2, #8]
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	6093      	str	r3, [r2, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	da04      	bge.n	800a2da <__sfputc_r+0x16>
 800a2d0:	6994      	ldr	r4, [r2, #24]
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	db07      	blt.n	800a2e6 <__sfputc_r+0x22>
 800a2d6:	290a      	cmp	r1, #10
 800a2d8:	d005      	beq.n	800a2e6 <__sfputc_r+0x22>
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	1c58      	adds	r0, r3, #1
 800a2de:	6010      	str	r0, [r2, #0]
 800a2e0:	7019      	strb	r1, [r3, #0]
 800a2e2:	0008      	movs	r0, r1
 800a2e4:	bd10      	pop	{r4, pc}
 800a2e6:	f000 f94f 	bl	800a588 <__swbuf_r>
 800a2ea:	0001      	movs	r1, r0
 800a2ec:	e7f9      	b.n	800a2e2 <__sfputc_r+0x1e>

0800a2ee <__sfputs_r>:
 800a2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f0:	0006      	movs	r6, r0
 800a2f2:	000f      	movs	r7, r1
 800a2f4:	0014      	movs	r4, r2
 800a2f6:	18d5      	adds	r5, r2, r3
 800a2f8:	42ac      	cmp	r4, r5
 800a2fa:	d101      	bne.n	800a300 <__sfputs_r+0x12>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	e007      	b.n	800a310 <__sfputs_r+0x22>
 800a300:	7821      	ldrb	r1, [r4, #0]
 800a302:	003a      	movs	r2, r7
 800a304:	0030      	movs	r0, r6
 800a306:	f7ff ffdd 	bl	800a2c4 <__sfputc_r>
 800a30a:	3401      	adds	r4, #1
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d1f3      	bne.n	800a2f8 <__sfputs_r+0xa>
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a314 <_vfiprintf_r>:
 800a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a316:	b0a1      	sub	sp, #132	; 0x84
 800a318:	0006      	movs	r6, r0
 800a31a:	000c      	movs	r4, r1
 800a31c:	001f      	movs	r7, r3
 800a31e:	9203      	str	r2, [sp, #12]
 800a320:	2800      	cmp	r0, #0
 800a322:	d004      	beq.n	800a32e <_vfiprintf_r+0x1a>
 800a324:	6983      	ldr	r3, [r0, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <_vfiprintf_r+0x1a>
 800a32a:	f000 fb3f 	bl	800a9ac <__sinit>
 800a32e:	4b8e      	ldr	r3, [pc, #568]	; (800a568 <_vfiprintf_r+0x254>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d11c      	bne.n	800a36e <_vfiprintf_r+0x5a>
 800a334:	6874      	ldr	r4, [r6, #4]
 800a336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a338:	07db      	lsls	r3, r3, #31
 800a33a:	d405      	bmi.n	800a348 <_vfiprintf_r+0x34>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	059b      	lsls	r3, r3, #22
 800a340:	d402      	bmi.n	800a348 <_vfiprintf_r+0x34>
 800a342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a344:	f000 fbd3 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	071b      	lsls	r3, r3, #28
 800a34c:	d502      	bpl.n	800a354 <_vfiprintf_r+0x40>
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11d      	bne.n	800a390 <_vfiprintf_r+0x7c>
 800a354:	0021      	movs	r1, r4
 800a356:	0030      	movs	r0, r6
 800a358:	f000 f97a 	bl	800a650 <__swsetup_r>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d017      	beq.n	800a390 <_vfiprintf_r+0x7c>
 800a360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d50d      	bpl.n	800a382 <_vfiprintf_r+0x6e>
 800a366:	2001      	movs	r0, #1
 800a368:	4240      	negs	r0, r0
 800a36a:	b021      	add	sp, #132	; 0x84
 800a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36e:	4b7f      	ldr	r3, [pc, #508]	; (800a56c <_vfiprintf_r+0x258>)
 800a370:	429c      	cmp	r4, r3
 800a372:	d101      	bne.n	800a378 <_vfiprintf_r+0x64>
 800a374:	68b4      	ldr	r4, [r6, #8]
 800a376:	e7de      	b.n	800a336 <_vfiprintf_r+0x22>
 800a378:	4b7d      	ldr	r3, [pc, #500]	; (800a570 <_vfiprintf_r+0x25c>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d1db      	bne.n	800a336 <_vfiprintf_r+0x22>
 800a37e:	68f4      	ldr	r4, [r6, #12]
 800a380:	e7d9      	b.n	800a336 <_vfiprintf_r+0x22>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	059b      	lsls	r3, r3, #22
 800a386:	d4ee      	bmi.n	800a366 <_vfiprintf_r+0x52>
 800a388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a38a:	f000 fbb1 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a38e:	e7ea      	b.n	800a366 <_vfiprintf_r+0x52>
 800a390:	2300      	movs	r3, #0
 800a392:	ad08      	add	r5, sp, #32
 800a394:	616b      	str	r3, [r5, #20]
 800a396:	3320      	adds	r3, #32
 800a398:	766b      	strb	r3, [r5, #25]
 800a39a:	3310      	adds	r3, #16
 800a39c:	76ab      	strb	r3, [r5, #26]
 800a39e:	9707      	str	r7, [sp, #28]
 800a3a0:	9f03      	ldr	r7, [sp, #12]
 800a3a2:	783b      	ldrb	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <_vfiprintf_r+0x98>
 800a3a8:	2b25      	cmp	r3, #37	; 0x25
 800a3aa:	d14e      	bne.n	800a44a <_vfiprintf_r+0x136>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1afb      	subs	r3, r7, r3
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	429f      	cmp	r7, r3
 800a3b6:	d00d      	beq.n	800a3d4 <_vfiprintf_r+0xc0>
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	0021      	movs	r1, r4
 800a3bc:	0030      	movs	r0, r6
 800a3be:	9a03      	ldr	r2, [sp, #12]
 800a3c0:	f7ff ff95 	bl	800a2ee <__sfputs_r>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d100      	bne.n	800a3ca <_vfiprintf_r+0xb6>
 800a3c8:	e0b5      	b.n	800a536 <_vfiprintf_r+0x222>
 800a3ca:	696a      	ldr	r2, [r5, #20]
 800a3cc:	9b05      	ldr	r3, [sp, #20]
 800a3ce:	4694      	mov	ip, r2
 800a3d0:	4463      	add	r3, ip
 800a3d2:	616b      	str	r3, [r5, #20]
 800a3d4:	783b      	ldrb	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d100      	bne.n	800a3dc <_vfiprintf_r+0xc8>
 800a3da:	e0ac      	b.n	800a536 <_vfiprintf_r+0x222>
 800a3dc:	2201      	movs	r2, #1
 800a3de:	1c7b      	adds	r3, r7, #1
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4252      	negs	r2, r2
 800a3e6:	606a      	str	r2, [r5, #4]
 800a3e8:	a904      	add	r1, sp, #16
 800a3ea:	3254      	adds	r2, #84	; 0x54
 800a3ec:	1852      	adds	r2, r2, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	60eb      	str	r3, [r5, #12]
 800a3f2:	60ab      	str	r3, [r5, #8]
 800a3f4:	7013      	strb	r3, [r2, #0]
 800a3f6:	65ab      	str	r3, [r5, #88]	; 0x58
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	7819      	ldrb	r1, [r3, #0]
 800a3fe:	485d      	ldr	r0, [pc, #372]	; (800a574 <_vfiprintf_r+0x260>)
 800a400:	f7ff f916 	bl	8009630 <memchr>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1c5f      	adds	r7, r3, #1
 800a408:	2800      	cmp	r0, #0
 800a40a:	d120      	bne.n	800a44e <_vfiprintf_r+0x13a>
 800a40c:	682a      	ldr	r2, [r5, #0]
 800a40e:	06d3      	lsls	r3, r2, #27
 800a410:	d504      	bpl.n	800a41c <_vfiprintf_r+0x108>
 800a412:	2353      	movs	r3, #83	; 0x53
 800a414:	a904      	add	r1, sp, #16
 800a416:	185b      	adds	r3, r3, r1
 800a418:	2120      	movs	r1, #32
 800a41a:	7019      	strb	r1, [r3, #0]
 800a41c:	0713      	lsls	r3, r2, #28
 800a41e:	d504      	bpl.n	800a42a <_vfiprintf_r+0x116>
 800a420:	2353      	movs	r3, #83	; 0x53
 800a422:	a904      	add	r1, sp, #16
 800a424:	185b      	adds	r3, r3, r1
 800a426:	212b      	movs	r1, #43	; 0x2b
 800a428:	7019      	strb	r1, [r3, #0]
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b2a      	cmp	r3, #42	; 0x2a
 800a430:	d016      	beq.n	800a460 <_vfiprintf_r+0x14c>
 800a432:	2100      	movs	r1, #0
 800a434:	68eb      	ldr	r3, [r5, #12]
 800a436:	9f03      	ldr	r7, [sp, #12]
 800a438:	783a      	ldrb	r2, [r7, #0]
 800a43a:	1c78      	adds	r0, r7, #1
 800a43c:	3a30      	subs	r2, #48	; 0x30
 800a43e:	4684      	mov	ip, r0
 800a440:	2a09      	cmp	r2, #9
 800a442:	d94f      	bls.n	800a4e4 <_vfiprintf_r+0x1d0>
 800a444:	2900      	cmp	r1, #0
 800a446:	d111      	bne.n	800a46c <_vfiprintf_r+0x158>
 800a448:	e017      	b.n	800a47a <_vfiprintf_r+0x166>
 800a44a:	3701      	adds	r7, #1
 800a44c:	e7a9      	b.n	800a3a2 <_vfiprintf_r+0x8e>
 800a44e:	4b49      	ldr	r3, [pc, #292]	; (800a574 <_vfiprintf_r+0x260>)
 800a450:	682a      	ldr	r2, [r5, #0]
 800a452:	1ac0      	subs	r0, r0, r3
 800a454:	2301      	movs	r3, #1
 800a456:	4083      	lsls	r3, r0
 800a458:	4313      	orrs	r3, r2
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	9703      	str	r7, [sp, #12]
 800a45e:	e7cb      	b.n	800a3f8 <_vfiprintf_r+0xe4>
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	9107      	str	r1, [sp, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db01      	blt.n	800a470 <_vfiprintf_r+0x15c>
 800a46c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a46e:	e004      	b.n	800a47a <_vfiprintf_r+0x166>
 800a470:	425b      	negs	r3, r3
 800a472:	60eb      	str	r3, [r5, #12]
 800a474:	2302      	movs	r3, #2
 800a476:	4313      	orrs	r3, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	783b      	ldrb	r3, [r7, #0]
 800a47c:	2b2e      	cmp	r3, #46	; 0x2e
 800a47e:	d10a      	bne.n	800a496 <_vfiprintf_r+0x182>
 800a480:	787b      	ldrb	r3, [r7, #1]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d137      	bne.n	800a4f6 <_vfiprintf_r+0x1e2>
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	3702      	adds	r7, #2
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	9207      	str	r2, [sp, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db2d      	blt.n	800a4f0 <_vfiprintf_r+0x1dc>
 800a494:	9309      	str	r3, [sp, #36]	; 0x24
 800a496:	2203      	movs	r2, #3
 800a498:	7839      	ldrb	r1, [r7, #0]
 800a49a:	4837      	ldr	r0, [pc, #220]	; (800a578 <_vfiprintf_r+0x264>)
 800a49c:	f7ff f8c8 	bl	8009630 <memchr>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d007      	beq.n	800a4b4 <_vfiprintf_r+0x1a0>
 800a4a4:	4b34      	ldr	r3, [pc, #208]	; (800a578 <_vfiprintf_r+0x264>)
 800a4a6:	682a      	ldr	r2, [r5, #0]
 800a4a8:	1ac0      	subs	r0, r0, r3
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	4083      	lsls	r3, r0
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	3701      	adds	r7, #1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	7839      	ldrb	r1, [r7, #0]
 800a4b6:	1c7b      	adds	r3, r7, #1
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	4830      	ldr	r0, [pc, #192]	; (800a57c <_vfiprintf_r+0x268>)
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	7629      	strb	r1, [r5, #24]
 800a4c0:	f7ff f8b6 	bl	8009630 <memchr>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d045      	beq.n	800a554 <_vfiprintf_r+0x240>
 800a4c8:	4b2d      	ldr	r3, [pc, #180]	; (800a580 <_vfiprintf_r+0x26c>)
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d127      	bne.n	800a51e <_vfiprintf_r+0x20a>
 800a4ce:	2207      	movs	r2, #7
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	4393      	bics	r3, r2
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	696b      	ldr	r3, [r5, #20]
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	616b      	str	r3, [r5, #20]
 800a4e2:	e75d      	b.n	800a3a0 <_vfiprintf_r+0x8c>
 800a4e4:	210a      	movs	r1, #10
 800a4e6:	434b      	muls	r3, r1
 800a4e8:	4667      	mov	r7, ip
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	3909      	subs	r1, #9
 800a4ee:	e7a3      	b.n	800a438 <_vfiprintf_r+0x124>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	425b      	negs	r3, r3
 800a4f4:	e7ce      	b.n	800a494 <_vfiprintf_r+0x180>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	001a      	movs	r2, r3
 800a4fa:	3701      	adds	r7, #1
 800a4fc:	606b      	str	r3, [r5, #4]
 800a4fe:	7839      	ldrb	r1, [r7, #0]
 800a500:	1c78      	adds	r0, r7, #1
 800a502:	3930      	subs	r1, #48	; 0x30
 800a504:	4684      	mov	ip, r0
 800a506:	2909      	cmp	r1, #9
 800a508:	d903      	bls.n	800a512 <_vfiprintf_r+0x1fe>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c3      	beq.n	800a496 <_vfiprintf_r+0x182>
 800a50e:	9209      	str	r2, [sp, #36]	; 0x24
 800a510:	e7c1      	b.n	800a496 <_vfiprintf_r+0x182>
 800a512:	230a      	movs	r3, #10
 800a514:	435a      	muls	r2, r3
 800a516:	4667      	mov	r7, ip
 800a518:	1852      	adds	r2, r2, r1
 800a51a:	3b09      	subs	r3, #9
 800a51c:	e7ef      	b.n	800a4fe <_vfiprintf_r+0x1ea>
 800a51e:	ab07      	add	r3, sp, #28
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	0022      	movs	r2, r4
 800a524:	0029      	movs	r1, r5
 800a526:	0030      	movs	r0, r6
 800a528:	4b16      	ldr	r3, [pc, #88]	; (800a584 <_vfiprintf_r+0x270>)
 800a52a:	f7fd fdd9 	bl	80080e0 <_printf_float>
 800a52e:	9004      	str	r0, [sp, #16]
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	3301      	adds	r3, #1
 800a534:	d1d1      	bne.n	800a4da <_vfiprintf_r+0x1c6>
 800a536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a538:	07db      	lsls	r3, r3, #31
 800a53a:	d405      	bmi.n	800a548 <_vfiprintf_r+0x234>
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	059b      	lsls	r3, r3, #22
 800a540:	d402      	bmi.n	800a548 <_vfiprintf_r+0x234>
 800a542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a544:	f000 fad4 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	065b      	lsls	r3, r3, #25
 800a54c:	d500      	bpl.n	800a550 <_vfiprintf_r+0x23c>
 800a54e:	e70a      	b.n	800a366 <_vfiprintf_r+0x52>
 800a550:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a552:	e70a      	b.n	800a36a <_vfiprintf_r+0x56>
 800a554:	ab07      	add	r3, sp, #28
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	0022      	movs	r2, r4
 800a55a:	0029      	movs	r1, r5
 800a55c:	0030      	movs	r0, r6
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <_vfiprintf_r+0x270>)
 800a560:	f7fe f87c 	bl	800865c <_printf_i>
 800a564:	e7e3      	b.n	800a52e <_vfiprintf_r+0x21a>
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	0800db8c 	.word	0x0800db8c
 800a56c:	0800dbac 	.word	0x0800dbac
 800a570:	0800db6c 	.word	0x0800db6c
 800a574:	0800da14 	.word	0x0800da14
 800a578:	0800da1a 	.word	0x0800da1a
 800a57c:	0800da1e 	.word	0x0800da1e
 800a580:	080080e1 	.word	0x080080e1
 800a584:	0800a2ef 	.word	0x0800a2ef

0800a588 <__swbuf_r>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	0005      	movs	r5, r0
 800a58c:	000e      	movs	r6, r1
 800a58e:	0014      	movs	r4, r2
 800a590:	2800      	cmp	r0, #0
 800a592:	d004      	beq.n	800a59e <__swbuf_r+0x16>
 800a594:	6983      	ldr	r3, [r0, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <__swbuf_r+0x16>
 800a59a:	f000 fa07 	bl	800a9ac <__sinit>
 800a59e:	4b22      	ldr	r3, [pc, #136]	; (800a628 <__swbuf_r+0xa0>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d12e      	bne.n	800a602 <__swbuf_r+0x7a>
 800a5a4:	686c      	ldr	r4, [r5, #4]
 800a5a6:	69a3      	ldr	r3, [r4, #24]
 800a5a8:	60a3      	str	r3, [r4, #8]
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	071b      	lsls	r3, r3, #28
 800a5ae:	d532      	bpl.n	800a616 <__swbuf_r+0x8e>
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d02f      	beq.n	800a616 <__swbuf_r+0x8e>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	b2f7      	uxtb	r7, r6
 800a5bc:	1a98      	subs	r0, r3, r2
 800a5be:	6963      	ldr	r3, [r4, #20]
 800a5c0:	b2f6      	uxtb	r6, r6
 800a5c2:	4283      	cmp	r3, r0
 800a5c4:	dc05      	bgt.n	800a5d2 <__swbuf_r+0x4a>
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	0028      	movs	r0, r5
 800a5ca:	f000 f94d 	bl	800a868 <_fflush_r>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d127      	bne.n	800a622 <__swbuf_r+0x9a>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	701f      	strb	r7, [r3, #0]
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d004      	beq.n	800a5f2 <__swbuf_r+0x6a>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	07db      	lsls	r3, r3, #31
 800a5ec:	d507      	bpl.n	800a5fe <__swbuf_r+0x76>
 800a5ee:	2e0a      	cmp	r6, #10
 800a5f0:	d105      	bne.n	800a5fe <__swbuf_r+0x76>
 800a5f2:	0021      	movs	r1, r4
 800a5f4:	0028      	movs	r0, r5
 800a5f6:	f000 f937 	bl	800a868 <_fflush_r>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d111      	bne.n	800a622 <__swbuf_r+0x9a>
 800a5fe:	0030      	movs	r0, r6
 800a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a602:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <__swbuf_r+0xa4>)
 800a604:	429c      	cmp	r4, r3
 800a606:	d101      	bne.n	800a60c <__swbuf_r+0x84>
 800a608:	68ac      	ldr	r4, [r5, #8]
 800a60a:	e7cc      	b.n	800a5a6 <__swbuf_r+0x1e>
 800a60c:	4b08      	ldr	r3, [pc, #32]	; (800a630 <__swbuf_r+0xa8>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d1c9      	bne.n	800a5a6 <__swbuf_r+0x1e>
 800a612:	68ec      	ldr	r4, [r5, #12]
 800a614:	e7c7      	b.n	800a5a6 <__swbuf_r+0x1e>
 800a616:	0021      	movs	r1, r4
 800a618:	0028      	movs	r0, r5
 800a61a:	f000 f819 	bl	800a650 <__swsetup_r>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d0c9      	beq.n	800a5b6 <__swbuf_r+0x2e>
 800a622:	2601      	movs	r6, #1
 800a624:	4276      	negs	r6, r6
 800a626:	e7ea      	b.n	800a5fe <__swbuf_r+0x76>
 800a628:	0800db8c 	.word	0x0800db8c
 800a62c:	0800dbac 	.word	0x0800dbac
 800a630:	0800db6c 	.word	0x0800db6c

0800a634 <__ascii_wctomb>:
 800a634:	0003      	movs	r3, r0
 800a636:	1e08      	subs	r0, r1, #0
 800a638:	d005      	beq.n	800a646 <__ascii_wctomb+0x12>
 800a63a:	2aff      	cmp	r2, #255	; 0xff
 800a63c:	d904      	bls.n	800a648 <__ascii_wctomb+0x14>
 800a63e:	228a      	movs	r2, #138	; 0x8a
 800a640:	2001      	movs	r0, #1
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	4240      	negs	r0, r0
 800a646:	4770      	bx	lr
 800a648:	2001      	movs	r0, #1
 800a64a:	700a      	strb	r2, [r1, #0]
 800a64c:	e7fb      	b.n	800a646 <__ascii_wctomb+0x12>
	...

0800a650 <__swsetup_r>:
 800a650:	4b37      	ldr	r3, [pc, #220]	; (800a730 <__swsetup_r+0xe0>)
 800a652:	b570      	push	{r4, r5, r6, lr}
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	0006      	movs	r6, r0
 800a658:	000c      	movs	r4, r1
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d005      	beq.n	800a66a <__swsetup_r+0x1a>
 800a65e:	69ab      	ldr	r3, [r5, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <__swsetup_r+0x1a>
 800a664:	0028      	movs	r0, r5
 800a666:	f000 f9a1 	bl	800a9ac <__sinit>
 800a66a:	4b32      	ldr	r3, [pc, #200]	; (800a734 <__swsetup_r+0xe4>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d10f      	bne.n	800a690 <__swsetup_r+0x40>
 800a670:	686c      	ldr	r4, [r5, #4]
 800a672:	230c      	movs	r3, #12
 800a674:	5ee2      	ldrsh	r2, [r4, r3]
 800a676:	b293      	uxth	r3, r2
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	d42d      	bmi.n	800a6d8 <__swsetup_r+0x88>
 800a67c:	06d9      	lsls	r1, r3, #27
 800a67e:	d411      	bmi.n	800a6a4 <__swsetup_r+0x54>
 800a680:	2309      	movs	r3, #9
 800a682:	2001      	movs	r0, #1
 800a684:	6033      	str	r3, [r6, #0]
 800a686:	3337      	adds	r3, #55	; 0x37
 800a688:	4313      	orrs	r3, r2
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	4240      	negs	r0, r0
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	4b29      	ldr	r3, [pc, #164]	; (800a738 <__swsetup_r+0xe8>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swsetup_r+0x4a>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7eb      	b.n	800a672 <__swsetup_r+0x22>
 800a69a:	4b28      	ldr	r3, [pc, #160]	; (800a73c <__swsetup_r+0xec>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	d1e8      	bne.n	800a672 <__swsetup_r+0x22>
 800a6a0:	68ec      	ldr	r4, [r5, #12]
 800a6a2:	e7e6      	b.n	800a672 <__swsetup_r+0x22>
 800a6a4:	075b      	lsls	r3, r3, #29
 800a6a6:	d513      	bpl.n	800a6d0 <__swsetup_r+0x80>
 800a6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	d008      	beq.n	800a6c0 <__swsetup_r+0x70>
 800a6ae:	0023      	movs	r3, r4
 800a6b0:	3344      	adds	r3, #68	; 0x44
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d002      	beq.n	800a6bc <__swsetup_r+0x6c>
 800a6b6:	0030      	movs	r0, r6
 800a6b8:	f7ff fb72 	bl	8009da0 <_free_r>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6363      	str	r3, [r4, #52]	; 0x34
 800a6c0:	2224      	movs	r2, #36	; 0x24
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	4393      	bics	r3, r2
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	89a2      	ldrh	r2, [r4, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <__swsetup_r+0xa6>
 800a6de:	21a0      	movs	r1, #160	; 0xa0
 800a6e0:	2280      	movs	r2, #128	; 0x80
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	0089      	lsls	r1, r1, #2
 800a6e6:	0092      	lsls	r2, r2, #2
 800a6e8:	400b      	ands	r3, r1
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <__swsetup_r+0xa6>
 800a6ee:	0021      	movs	r1, r4
 800a6f0:	0030      	movs	r0, r6
 800a6f2:	f000 fa27 	bl	800ab44 <__smakebuf_r>
 800a6f6:	220c      	movs	r2, #12
 800a6f8:	5ea3      	ldrsh	r3, [r4, r2]
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	001a      	movs	r2, r3
 800a6fe:	b299      	uxth	r1, r3
 800a700:	4002      	ands	r2, r0
 800a702:	4203      	tst	r3, r0
 800a704:	d00f      	beq.n	800a726 <__swsetup_r+0xd6>
 800a706:	2200      	movs	r2, #0
 800a708:	60a2      	str	r2, [r4, #8]
 800a70a:	6962      	ldr	r2, [r4, #20]
 800a70c:	4252      	negs	r2, r2
 800a70e:	61a2      	str	r2, [r4, #24]
 800a710:	2000      	movs	r0, #0
 800a712:	6922      	ldr	r2, [r4, #16]
 800a714:	4282      	cmp	r2, r0
 800a716:	d1ba      	bne.n	800a68e <__swsetup_r+0x3e>
 800a718:	060a      	lsls	r2, r1, #24
 800a71a:	d5b8      	bpl.n	800a68e <__swsetup_r+0x3e>
 800a71c:	2240      	movs	r2, #64	; 0x40
 800a71e:	4313      	orrs	r3, r2
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	3801      	subs	r0, #1
 800a724:	e7b3      	b.n	800a68e <__swsetup_r+0x3e>
 800a726:	0788      	lsls	r0, r1, #30
 800a728:	d400      	bmi.n	800a72c <__swsetup_r+0xdc>
 800a72a:	6962      	ldr	r2, [r4, #20]
 800a72c:	60a2      	str	r2, [r4, #8]
 800a72e:	e7ef      	b.n	800a710 <__swsetup_r+0xc0>
 800a730:	20000464 	.word	0x20000464
 800a734:	0800db8c 	.word	0x0800db8c
 800a738:	0800dbac 	.word	0x0800dbac
 800a73c:	0800db6c 	.word	0x0800db6c

0800a740 <abort>:
 800a740:	2006      	movs	r0, #6
 800a742:	b510      	push	{r4, lr}
 800a744:	f000 fa74 	bl	800ac30 <raise>
 800a748:	2001      	movs	r0, #1
 800a74a:	f7f9 fa8d 	bl	8003c68 <_exit>
	...

0800a750 <__sflush_r>:
 800a750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a752:	898b      	ldrh	r3, [r1, #12]
 800a754:	0005      	movs	r5, r0
 800a756:	000c      	movs	r4, r1
 800a758:	071a      	lsls	r2, r3, #28
 800a75a:	d45f      	bmi.n	800a81c <__sflush_r+0xcc>
 800a75c:	684a      	ldr	r2, [r1, #4]
 800a75e:	2a00      	cmp	r2, #0
 800a760:	dc04      	bgt.n	800a76c <__sflush_r+0x1c>
 800a762:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a764:	2a00      	cmp	r2, #0
 800a766:	dc01      	bgt.n	800a76c <__sflush_r+0x1c>
 800a768:	2000      	movs	r0, #0
 800a76a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a76c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a76e:	2f00      	cmp	r7, #0
 800a770:	d0fa      	beq.n	800a768 <__sflush_r+0x18>
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	682e      	ldr	r6, [r5, #0]
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	001a      	movs	r2, r3
 800a77c:	0149      	lsls	r1, r1, #5
 800a77e:	400a      	ands	r2, r1
 800a780:	420b      	tst	r3, r1
 800a782:	d034      	beq.n	800a7ee <__sflush_r+0x9e>
 800a784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	075b      	lsls	r3, r3, #29
 800a78a:	d506      	bpl.n	800a79a <__sflush_r+0x4a>
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	1ac0      	subs	r0, r0, r3
 800a790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <__sflush_r+0x4a>
 800a796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a798:	1ac0      	subs	r0, r0, r3
 800a79a:	0002      	movs	r2, r0
 800a79c:	6a21      	ldr	r1, [r4, #32]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	0028      	movs	r0, r5
 800a7a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a7a4:	47b8      	blx	r7
 800a7a6:	89a1      	ldrh	r1, [r4, #12]
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d106      	bne.n	800a7ba <__sflush_r+0x6a>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	2b1d      	cmp	r3, #29
 800a7b0:	d831      	bhi.n	800a816 <__sflush_r+0xc6>
 800a7b2:	4a2c      	ldr	r2, [pc, #176]	; (800a864 <__sflush_r+0x114>)
 800a7b4:	40da      	lsrs	r2, r3
 800a7b6:	07d3      	lsls	r3, r2, #31
 800a7b8:	d52d      	bpl.n	800a816 <__sflush_r+0xc6>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6063      	str	r3, [r4, #4]
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	04cb      	lsls	r3, r1, #19
 800a7c4:	d505      	bpl.n	800a7d2 <__sflush_r+0x82>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d102      	bne.n	800a7d0 <__sflush_r+0x80>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d100      	bne.n	800a7d2 <__sflush_r+0x82>
 800a7d0:	6560      	str	r0, [r4, #84]	; 0x54
 800a7d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d4:	602e      	str	r6, [r5, #0]
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	d0c6      	beq.n	800a768 <__sflush_r+0x18>
 800a7da:	0023      	movs	r3, r4
 800a7dc:	3344      	adds	r3, #68	; 0x44
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	d002      	beq.n	800a7e8 <__sflush_r+0x98>
 800a7e2:	0028      	movs	r0, r5
 800a7e4:	f7ff fadc 	bl	8009da0 <_free_r>
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	6360      	str	r0, [r4, #52]	; 0x34
 800a7ec:	e7bd      	b.n	800a76a <__sflush_r+0x1a>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	0028      	movs	r0, r5
 800a7f2:	6a21      	ldr	r1, [r4, #32]
 800a7f4:	47b8      	blx	r7
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d1c5      	bne.n	800a786 <__sflush_r+0x36>
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0c2      	beq.n	800a786 <__sflush_r+0x36>
 800a800:	2b1d      	cmp	r3, #29
 800a802:	d001      	beq.n	800a808 <__sflush_r+0xb8>
 800a804:	2b16      	cmp	r3, #22
 800a806:	d101      	bne.n	800a80c <__sflush_r+0xbc>
 800a808:	602e      	str	r6, [r5, #0]
 800a80a:	e7ad      	b.n	800a768 <__sflush_r+0x18>
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	89a2      	ldrh	r2, [r4, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	e7a9      	b.n	800a76a <__sflush_r+0x1a>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	430b      	orrs	r3, r1
 800a81a:	e7fa      	b.n	800a812 <__sflush_r+0xc2>
 800a81c:	690f      	ldr	r7, [r1, #16]
 800a81e:	2f00      	cmp	r7, #0
 800a820:	d0a2      	beq.n	800a768 <__sflush_r+0x18>
 800a822:	680a      	ldr	r2, [r1, #0]
 800a824:	600f      	str	r7, [r1, #0]
 800a826:	1bd2      	subs	r2, r2, r7
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	079b      	lsls	r3, r3, #30
 800a82e:	d100      	bne.n	800a832 <__sflush_r+0xe2>
 800a830:	694a      	ldr	r2, [r1, #20]
 800a832:	60a2      	str	r2, [r4, #8]
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	dc00      	bgt.n	800a83c <__sflush_r+0xec>
 800a83a:	e795      	b.n	800a768 <__sflush_r+0x18>
 800a83c:	003a      	movs	r2, r7
 800a83e:	0028      	movs	r0, r5
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	6a21      	ldr	r1, [r4, #32]
 800a844:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a846:	47b0      	blx	r6
 800a848:	2800      	cmp	r0, #0
 800a84a:	dc06      	bgt.n	800a85a <__sflush_r+0x10a>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	2001      	movs	r0, #1
 800a850:	89a2      	ldrh	r2, [r4, #12]
 800a852:	4240      	negs	r0, r0
 800a854:	4313      	orrs	r3, r2
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	e787      	b.n	800a76a <__sflush_r+0x1a>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	183f      	adds	r7, r7, r0
 800a85e:	1a1b      	subs	r3, r3, r0
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	e7e7      	b.n	800a834 <__sflush_r+0xe4>
 800a864:	20400001 	.word	0x20400001

0800a868 <_fflush_r>:
 800a868:	690b      	ldr	r3, [r1, #16]
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	0005      	movs	r5, r0
 800a86e:	000c      	movs	r4, r1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <_fflush_r+0x12>
 800a874:	2500      	movs	r5, #0
 800a876:	0028      	movs	r0, r5
 800a878:	bd70      	pop	{r4, r5, r6, pc}
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d004      	beq.n	800a888 <_fflush_r+0x20>
 800a87e:	6983      	ldr	r3, [r0, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <_fflush_r+0x20>
 800a884:	f000 f892 	bl	800a9ac <__sinit>
 800a888:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <_fflush_r+0x74>)
 800a88a:	429c      	cmp	r4, r3
 800a88c:	d11b      	bne.n	800a8c6 <_fflush_r+0x5e>
 800a88e:	686c      	ldr	r4, [r5, #4]
 800a890:	220c      	movs	r2, #12
 800a892:	5ea3      	ldrsh	r3, [r4, r2]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0ed      	beq.n	800a874 <_fflush_r+0xc>
 800a898:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a89a:	07d2      	lsls	r2, r2, #31
 800a89c:	d404      	bmi.n	800a8a8 <_fflush_r+0x40>
 800a89e:	059b      	lsls	r3, r3, #22
 800a8a0:	d402      	bmi.n	800a8a8 <_fflush_r+0x40>
 800a8a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a4:	f000 f923 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a8a8:	0028      	movs	r0, r5
 800a8aa:	0021      	movs	r1, r4
 800a8ac:	f7ff ff50 	bl	800a750 <__sflush_r>
 800a8b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b2:	0005      	movs	r5, r0
 800a8b4:	07db      	lsls	r3, r3, #31
 800a8b6:	d4de      	bmi.n	800a876 <_fflush_r+0xe>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	059b      	lsls	r3, r3, #22
 800a8bc:	d4db      	bmi.n	800a876 <_fflush_r+0xe>
 800a8be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c0:	f000 f916 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a8c4:	e7d7      	b.n	800a876 <_fflush_r+0xe>
 800a8c6:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <_fflush_r+0x78>)
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	d101      	bne.n	800a8d0 <_fflush_r+0x68>
 800a8cc:	68ac      	ldr	r4, [r5, #8]
 800a8ce:	e7df      	b.n	800a890 <_fflush_r+0x28>
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <_fflush_r+0x7c>)
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d1dc      	bne.n	800a890 <_fflush_r+0x28>
 800a8d6:	68ec      	ldr	r4, [r5, #12]
 800a8d8:	e7da      	b.n	800a890 <_fflush_r+0x28>
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	0800db8c 	.word	0x0800db8c
 800a8e0:	0800dbac 	.word	0x0800dbac
 800a8e4:	0800db6c 	.word	0x0800db6c

0800a8e8 <std>:
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	0004      	movs	r4, r0
 800a8ee:	6003      	str	r3, [r0, #0]
 800a8f0:	6043      	str	r3, [r0, #4]
 800a8f2:	6083      	str	r3, [r0, #8]
 800a8f4:	8181      	strh	r1, [r0, #12]
 800a8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	81c2      	strh	r2, [r0, #14]
 800a8fc:	6103      	str	r3, [r0, #16]
 800a8fe:	6143      	str	r3, [r0, #20]
 800a900:	6183      	str	r3, [r0, #24]
 800a902:	2208      	movs	r2, #8
 800a904:	305c      	adds	r0, #92	; 0x5c
 800a906:	f7fd fb39 	bl	8007f7c <memset>
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <std+0x38>)
 800a90c:	6263      	str	r3, [r4, #36]	; 0x24
 800a90e:	4b05      	ldr	r3, [pc, #20]	; (800a924 <std+0x3c>)
 800a910:	6224      	str	r4, [r4, #32]
 800a912:	62a3      	str	r3, [r4, #40]	; 0x28
 800a914:	4b04      	ldr	r3, [pc, #16]	; (800a928 <std+0x40>)
 800a916:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <std+0x44>)
 800a91a:	6323      	str	r3, [r4, #48]	; 0x30
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	0800ac71 	.word	0x0800ac71
 800a924:	0800ac99 	.word	0x0800ac99
 800a928:	0800acd1 	.word	0x0800acd1
 800a92c:	0800acfd 	.word	0x0800acfd

0800a930 <_cleanup_r>:
 800a930:	b510      	push	{r4, lr}
 800a932:	4902      	ldr	r1, [pc, #8]	; (800a93c <_cleanup_r+0xc>)
 800a934:	f000 f8ba 	bl	800aaac <_fwalk_reent>
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	0800a869 	.word	0x0800a869

0800a940 <__sfmoreglue>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	2568      	movs	r5, #104	; 0x68
 800a944:	1e4a      	subs	r2, r1, #1
 800a946:	4355      	muls	r5, r2
 800a948:	000e      	movs	r6, r1
 800a94a:	0029      	movs	r1, r5
 800a94c:	3174      	adds	r1, #116	; 0x74
 800a94e:	f7ff fa71 	bl	8009e34 <_malloc_r>
 800a952:	1e04      	subs	r4, r0, #0
 800a954:	d008      	beq.n	800a968 <__sfmoreglue+0x28>
 800a956:	2100      	movs	r1, #0
 800a958:	002a      	movs	r2, r5
 800a95a:	6001      	str	r1, [r0, #0]
 800a95c:	6046      	str	r6, [r0, #4]
 800a95e:	300c      	adds	r0, #12
 800a960:	60a0      	str	r0, [r4, #8]
 800a962:	3268      	adds	r2, #104	; 0x68
 800a964:	f7fd fb0a 	bl	8007f7c <memset>
 800a968:	0020      	movs	r0, r4
 800a96a:	bd70      	pop	{r4, r5, r6, pc}

0800a96c <__sfp_lock_acquire>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	4802      	ldr	r0, [pc, #8]	; (800a978 <__sfp_lock_acquire+0xc>)
 800a970:	f000 f8bd 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	20000cb8 	.word	0x20000cb8

0800a97c <__sfp_lock_release>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4802      	ldr	r0, [pc, #8]	; (800a988 <__sfp_lock_release+0xc>)
 800a980:	f000 f8b6 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	20000cb8 	.word	0x20000cb8

0800a98c <__sinit_lock_acquire>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4802      	ldr	r0, [pc, #8]	; (800a998 <__sinit_lock_acquire+0xc>)
 800a990:	f000 f8ad 	bl	800aaee <__retarget_lock_acquire_recursive>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	20000cb3 	.word	0x20000cb3

0800a99c <__sinit_lock_release>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4802      	ldr	r0, [pc, #8]	; (800a9a8 <__sinit_lock_release+0xc>)
 800a9a0:	f000 f8a6 	bl	800aaf0 <__retarget_lock_release_recursive>
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	20000cb3 	.word	0x20000cb3

0800a9ac <__sinit>:
 800a9ac:	b513      	push	{r0, r1, r4, lr}
 800a9ae:	0004      	movs	r4, r0
 800a9b0:	f7ff ffec 	bl	800a98c <__sinit_lock_acquire>
 800a9b4:	69a3      	ldr	r3, [r4, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <__sinit+0x14>
 800a9ba:	f7ff ffef 	bl	800a99c <__sinit_lock_release>
 800a9be:	bd13      	pop	{r0, r1, r4, pc}
 800a9c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a9c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a9c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9c6:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <__sinit+0x68>)
 800a9c8:	4a13      	ldr	r2, [pc, #76]	; (800aa18 <__sinit+0x6c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d101      	bne.n	800a9d8 <__sinit+0x2c>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	61a3      	str	r3, [r4, #24]
 800a9d8:	0020      	movs	r0, r4
 800a9da:	f000 f81f 	bl	800aa1c <__sfp>
 800a9de:	6060      	str	r0, [r4, #4]
 800a9e0:	0020      	movs	r0, r4
 800a9e2:	f000 f81b 	bl	800aa1c <__sfp>
 800a9e6:	60a0      	str	r0, [r4, #8]
 800a9e8:	0020      	movs	r0, r4
 800a9ea:	f000 f817 	bl	800aa1c <__sfp>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	60e0      	str	r0, [r4, #12]
 800a9f4:	6860      	ldr	r0, [r4, #4]
 800a9f6:	f7ff ff77 	bl	800a8e8 <std>
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	2109      	movs	r1, #9
 800a9fe:	68a0      	ldr	r0, [r4, #8]
 800aa00:	f7ff ff72 	bl	800a8e8 <std>
 800aa04:	2202      	movs	r2, #2
 800aa06:	2112      	movs	r1, #18
 800aa08:	68e0      	ldr	r0, [r4, #12]
 800aa0a:	f7ff ff6d 	bl	800a8e8 <std>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	61a3      	str	r3, [r4, #24]
 800aa12:	e7d2      	b.n	800a9ba <__sinit+0xe>
 800aa14:	0800d7e8 	.word	0x0800d7e8
 800aa18:	0800a931 	.word	0x0800a931

0800aa1c <__sfp>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	0007      	movs	r7, r0
 800aa20:	f7ff ffa4 	bl	800a96c <__sfp_lock_acquire>
 800aa24:	4b1f      	ldr	r3, [pc, #124]	; (800aaa4 <__sfp+0x88>)
 800aa26:	681e      	ldr	r6, [r3, #0]
 800aa28:	69b3      	ldr	r3, [r6, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <__sfp+0x18>
 800aa2e:	0030      	movs	r0, r6
 800aa30:	f7ff ffbc 	bl	800a9ac <__sinit>
 800aa34:	3648      	adds	r6, #72	; 0x48
 800aa36:	68b4      	ldr	r4, [r6, #8]
 800aa38:	6873      	ldr	r3, [r6, #4]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	d504      	bpl.n	800aa48 <__sfp+0x2c>
 800aa3e:	6833      	ldr	r3, [r6, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d022      	beq.n	800aa8a <__sfp+0x6e>
 800aa44:	6836      	ldr	r6, [r6, #0]
 800aa46:	e7f6      	b.n	800aa36 <__sfp+0x1a>
 800aa48:	220c      	movs	r2, #12
 800aa4a:	5ea5      	ldrsh	r5, [r4, r2]
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	d11a      	bne.n	800aa86 <__sfp+0x6a>
 800aa50:	0020      	movs	r0, r4
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <__sfp+0x8c>)
 800aa54:	3058      	adds	r0, #88	; 0x58
 800aa56:	60e3      	str	r3, [r4, #12]
 800aa58:	6665      	str	r5, [r4, #100]	; 0x64
 800aa5a:	f000 f847 	bl	800aaec <__retarget_lock_init_recursive>
 800aa5e:	f7ff ff8d 	bl	800a97c <__sfp_lock_release>
 800aa62:	0020      	movs	r0, r4
 800aa64:	2208      	movs	r2, #8
 800aa66:	0029      	movs	r1, r5
 800aa68:	6025      	str	r5, [r4, #0]
 800aa6a:	60a5      	str	r5, [r4, #8]
 800aa6c:	6065      	str	r5, [r4, #4]
 800aa6e:	6125      	str	r5, [r4, #16]
 800aa70:	6165      	str	r5, [r4, #20]
 800aa72:	61a5      	str	r5, [r4, #24]
 800aa74:	305c      	adds	r0, #92	; 0x5c
 800aa76:	f7fd fa81 	bl	8007f7c <memset>
 800aa7a:	6365      	str	r5, [r4, #52]	; 0x34
 800aa7c:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa7e:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa80:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa82:	0020      	movs	r0, r4
 800aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa86:	3468      	adds	r4, #104	; 0x68
 800aa88:	e7d7      	b.n	800aa3a <__sfp+0x1e>
 800aa8a:	2104      	movs	r1, #4
 800aa8c:	0038      	movs	r0, r7
 800aa8e:	f7ff ff57 	bl	800a940 <__sfmoreglue>
 800aa92:	1e04      	subs	r4, r0, #0
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	d1d5      	bne.n	800aa44 <__sfp+0x28>
 800aa98:	f7ff ff70 	bl	800a97c <__sfp_lock_release>
 800aa9c:	230c      	movs	r3, #12
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	e7ef      	b.n	800aa82 <__sfp+0x66>
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	0800d7e8 	.word	0x0800d7e8
 800aaa8:	ffff0001 	.word	0xffff0001

0800aaac <_fwalk_reent>:
 800aaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaae:	0004      	movs	r4, r0
 800aab0:	0006      	movs	r6, r0
 800aab2:	2700      	movs	r7, #0
 800aab4:	9101      	str	r1, [sp, #4]
 800aab6:	3448      	adds	r4, #72	; 0x48
 800aab8:	6863      	ldr	r3, [r4, #4]
 800aaba:	68a5      	ldr	r5, [r4, #8]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	d504      	bpl.n	800aad0 <_fwalk_reent+0x24>
 800aac6:	6824      	ldr	r4, [r4, #0]
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	d1f5      	bne.n	800aab8 <_fwalk_reent+0xc>
 800aacc:	0038      	movs	r0, r7
 800aace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aad0:	89ab      	ldrh	r3, [r5, #12]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d908      	bls.n	800aae8 <_fwalk_reent+0x3c>
 800aad6:	220e      	movs	r2, #14
 800aad8:	5eab      	ldrsh	r3, [r5, r2]
 800aada:	3301      	adds	r3, #1
 800aadc:	d004      	beq.n	800aae8 <_fwalk_reent+0x3c>
 800aade:	0029      	movs	r1, r5
 800aae0:	0030      	movs	r0, r6
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	4798      	blx	r3
 800aae6:	4307      	orrs	r7, r0
 800aae8:	3568      	adds	r5, #104	; 0x68
 800aaea:	e7e8      	b.n	800aabe <_fwalk_reent+0x12>

0800aaec <__retarget_lock_init_recursive>:
 800aaec:	4770      	bx	lr

0800aaee <__retarget_lock_acquire_recursive>:
 800aaee:	4770      	bx	lr

0800aaf0 <__retarget_lock_release_recursive>:
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <__swhatbuf_r>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	000e      	movs	r6, r1
 800aaf8:	001d      	movs	r5, r3
 800aafa:	230e      	movs	r3, #14
 800aafc:	5ec9      	ldrsh	r1, [r1, r3]
 800aafe:	0014      	movs	r4, r2
 800ab00:	b096      	sub	sp, #88	; 0x58
 800ab02:	2900      	cmp	r1, #0
 800ab04:	da07      	bge.n	800ab16 <__swhatbuf_r+0x22>
 800ab06:	2300      	movs	r3, #0
 800ab08:	602b      	str	r3, [r5, #0]
 800ab0a:	89b3      	ldrh	r3, [r6, #12]
 800ab0c:	061b      	lsls	r3, r3, #24
 800ab0e:	d411      	bmi.n	800ab34 <__swhatbuf_r+0x40>
 800ab10:	2380      	movs	r3, #128	; 0x80
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	e00f      	b.n	800ab36 <__swhatbuf_r+0x42>
 800ab16:	466a      	mov	r2, sp
 800ab18:	f000 f91c 	bl	800ad54 <_fstat_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	dbf2      	blt.n	800ab06 <__swhatbuf_r+0x12>
 800ab20:	23f0      	movs	r3, #240	; 0xf0
 800ab22:	9901      	ldr	r1, [sp, #4]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	4019      	ands	r1, r3
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <__swhatbuf_r+0x4c>)
 800ab2a:	18c9      	adds	r1, r1, r3
 800ab2c:	424b      	negs	r3, r1
 800ab2e:	4159      	adcs	r1, r3
 800ab30:	6029      	str	r1, [r5, #0]
 800ab32:	e7ed      	b.n	800ab10 <__swhatbuf_r+0x1c>
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	2000      	movs	r0, #0
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	b016      	add	sp, #88	; 0x58
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	ffffe000 	.word	0xffffe000

0800ab44 <__smakebuf_r>:
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	2602      	movs	r6, #2
 800ab48:	898b      	ldrh	r3, [r1, #12]
 800ab4a:	0005      	movs	r5, r0
 800ab4c:	000c      	movs	r4, r1
 800ab4e:	4233      	tst	r3, r6
 800ab50:	d006      	beq.n	800ab60 <__smakebuf_r+0x1c>
 800ab52:	0023      	movs	r3, r4
 800ab54:	3347      	adds	r3, #71	; 0x47
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	6163      	str	r3, [r4, #20]
 800ab5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ab60:	466a      	mov	r2, sp
 800ab62:	ab01      	add	r3, sp, #4
 800ab64:	f7ff ffc6 	bl	800aaf4 <__swhatbuf_r>
 800ab68:	9900      	ldr	r1, [sp, #0]
 800ab6a:	0007      	movs	r7, r0
 800ab6c:	0028      	movs	r0, r5
 800ab6e:	f7ff f961 	bl	8009e34 <_malloc_r>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d108      	bne.n	800ab88 <__smakebuf_r+0x44>
 800ab76:	220c      	movs	r2, #12
 800ab78:	5ea3      	ldrsh	r3, [r4, r2]
 800ab7a:	059a      	lsls	r2, r3, #22
 800ab7c:	d4ef      	bmi.n	800ab5e <__smakebuf_r+0x1a>
 800ab7e:	2203      	movs	r2, #3
 800ab80:	4393      	bics	r3, r2
 800ab82:	431e      	orrs	r6, r3
 800ab84:	81a6      	strh	r6, [r4, #12]
 800ab86:	e7e4      	b.n	800ab52 <__smakebuf_r+0xe>
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <__smakebuf_r+0x84>)
 800ab8a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	89a2      	ldrh	r2, [r4, #12]
 800ab90:	6020      	str	r0, [r4, #0]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	6120      	str	r0, [r4, #16]
 800ab9a:	6163      	str	r3, [r4, #20]
 800ab9c:	9b01      	ldr	r3, [sp, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00d      	beq.n	800abbe <__smakebuf_r+0x7a>
 800aba2:	0028      	movs	r0, r5
 800aba4:	230e      	movs	r3, #14
 800aba6:	5ee1      	ldrsh	r1, [r4, r3]
 800aba8:	f000 f8e6 	bl	800ad78 <_isatty_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d006      	beq.n	800abbe <__smakebuf_r+0x7a>
 800abb0:	2203      	movs	r2, #3
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	4393      	bics	r3, r2
 800abb6:	001a      	movs	r2, r3
 800abb8:	2301      	movs	r3, #1
 800abba:	4313      	orrs	r3, r2
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	89a0      	ldrh	r0, [r4, #12]
 800abc0:	4307      	orrs	r7, r0
 800abc2:	81a7      	strh	r7, [r4, #12]
 800abc4:	e7cb      	b.n	800ab5e <__smakebuf_r+0x1a>
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	0800a931 	.word	0x0800a931

0800abcc <_malloc_usable_size_r>:
 800abcc:	1f0b      	subs	r3, r1, #4
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	1f18      	subs	r0, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da01      	bge.n	800abda <_malloc_usable_size_r+0xe>
 800abd6:	580b      	ldr	r3, [r1, r0]
 800abd8:	18c0      	adds	r0, r0, r3
 800abda:	4770      	bx	lr

0800abdc <_raise_r>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	0004      	movs	r4, r0
 800abe0:	000d      	movs	r5, r1
 800abe2:	291f      	cmp	r1, #31
 800abe4:	d904      	bls.n	800abf0 <_raise_r+0x14>
 800abe6:	2316      	movs	r3, #22
 800abe8:	6003      	str	r3, [r0, #0]
 800abea:	2001      	movs	r0, #1
 800abec:	4240      	negs	r0, r0
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <_raise_r+0x24>
 800abf6:	008a      	lsls	r2, r1, #2
 800abf8:	189b      	adds	r3, r3, r2
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	d108      	bne.n	800ac12 <_raise_r+0x36>
 800ac00:	0020      	movs	r0, r4
 800ac02:	f000 f831 	bl	800ac68 <_getpid_r>
 800ac06:	002a      	movs	r2, r5
 800ac08:	0001      	movs	r1, r0
 800ac0a:	0020      	movs	r0, r4
 800ac0c:	f000 f81a 	bl	800ac44 <_kill_r>
 800ac10:	e7ed      	b.n	800abee <_raise_r+0x12>
 800ac12:	2000      	movs	r0, #0
 800ac14:	2a01      	cmp	r2, #1
 800ac16:	d0ea      	beq.n	800abee <_raise_r+0x12>
 800ac18:	1c51      	adds	r1, r2, #1
 800ac1a:	d103      	bne.n	800ac24 <_raise_r+0x48>
 800ac1c:	2316      	movs	r3, #22
 800ac1e:	3001      	adds	r0, #1
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	e7e4      	b.n	800abee <_raise_r+0x12>
 800ac24:	2400      	movs	r4, #0
 800ac26:	0028      	movs	r0, r5
 800ac28:	601c      	str	r4, [r3, #0]
 800ac2a:	4790      	blx	r2
 800ac2c:	0020      	movs	r0, r4
 800ac2e:	e7de      	b.n	800abee <_raise_r+0x12>

0800ac30 <raise>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <raise+0x10>)
 800ac34:	0001      	movs	r1, r0
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	f7ff ffd0 	bl	800abdc <_raise_r>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	20000464 	.word	0x20000464

0800ac44 <_kill_r>:
 800ac44:	2300      	movs	r3, #0
 800ac46:	b570      	push	{r4, r5, r6, lr}
 800ac48:	4d06      	ldr	r5, [pc, #24]	; (800ac64 <_kill_r+0x20>)
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	f7f8 fff9 	bl	8003c48 <_kill>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d103      	bne.n	800ac62 <_kill_r+0x1e>
 800ac5a:	682b      	ldr	r3, [r5, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d000      	beq.n	800ac62 <_kill_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	20000cac 	.word	0x20000cac

0800ac68 <_getpid_r>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	f7f8 ffe7 	bl	8003c3c <_getpid>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <__sread>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	000c      	movs	r4, r1
 800ac74:	250e      	movs	r5, #14
 800ac76:	5f49      	ldrsh	r1, [r1, r5]
 800ac78:	f000 f8a4 	bl	800adc4 <_read_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	db03      	blt.n	800ac88 <__sread+0x18>
 800ac80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac82:	181b      	adds	r3, r3, r0
 800ac84:	6563      	str	r3, [r4, #84]	; 0x54
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	4a02      	ldr	r2, [pc, #8]	; (800ac94 <__sread+0x24>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	e7f9      	b.n	800ac86 <__sread+0x16>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	ffffefff 	.word	0xffffefff

0800ac98 <__swrite>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	001f      	movs	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	0005      	movs	r5, r0
 800aca0:	000c      	movs	r4, r1
 800aca2:	0016      	movs	r6, r2
 800aca4:	05db      	lsls	r3, r3, #23
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1c>
 800aca8:	230e      	movs	r3, #14
 800acaa:	5ec9      	ldrsh	r1, [r1, r3]
 800acac:	2200      	movs	r2, #0
 800acae:	2302      	movs	r3, #2
 800acb0:	f000 f874 	bl	800ad9c <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	4a05      	ldr	r2, [pc, #20]	; (800accc <__swrite+0x34>)
 800acb8:	0028      	movs	r0, r5
 800acba:	4013      	ands	r3, r2
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	0032      	movs	r2, r6
 800acc0:	230e      	movs	r3, #14
 800acc2:	5ee1      	ldrsh	r1, [r4, r3]
 800acc4:	003b      	movs	r3, r7
 800acc6:	f000 f81f 	bl	800ad08 <_write_r>
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	ffffefff 	.word	0xffffefff

0800acd0 <__sseek>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	000c      	movs	r4, r1
 800acd4:	250e      	movs	r5, #14
 800acd6:	5f49      	ldrsh	r1, [r1, r5]
 800acd8:	f000 f860 	bl	800ad9c <_lseek_r>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	1c42      	adds	r2, r0, #1
 800ace0:	d103      	bne.n	800acea <__sseek+0x1a>
 800ace2:	4a05      	ldr	r2, [pc, #20]	; (800acf8 <__sseek+0x28>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	2280      	movs	r2, #128	; 0x80
 800acec:	0152      	lsls	r2, r2, #5
 800acee:	4313      	orrs	r3, r2
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	6560      	str	r0, [r4, #84]	; 0x54
 800acf4:	e7f8      	b.n	800ace8 <__sseek+0x18>
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	ffffefff 	.word	0xffffefff

0800acfc <__sclose>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	230e      	movs	r3, #14
 800ad00:	5ec9      	ldrsh	r1, [r1, r3]
 800ad02:	f000 f815 	bl	800ad30 <_close_r>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <_write_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	0008      	movs	r0, r1
 800ad0e:	0011      	movs	r1, r2
 800ad10:	001a      	movs	r2, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	4d05      	ldr	r5, [pc, #20]	; (800ad2c <_write_r+0x24>)
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f8 ffcf 	bl	8003cba <_write>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d103      	bne.n	800ad28 <_write_r+0x20>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d000      	beq.n	800ad28 <_write_r+0x20>
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	20000cac 	.word	0x20000cac

0800ad30 <_close_r>:
 800ad30:	2300      	movs	r3, #0
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	4d06      	ldr	r5, [pc, #24]	; (800ad50 <_close_r+0x20>)
 800ad36:	0004      	movs	r4, r0
 800ad38:	0008      	movs	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f8 ffd9 	bl	8003cf2 <_close>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d103      	bne.n	800ad4c <_close_r+0x1c>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d000      	beq.n	800ad4c <_close_r+0x1c>
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	20000cac 	.word	0x20000cac

0800ad54 <_fstat_r>:
 800ad54:	2300      	movs	r3, #0
 800ad56:	b570      	push	{r4, r5, r6, lr}
 800ad58:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_fstat_r+0x20>)
 800ad5a:	0004      	movs	r4, r0
 800ad5c:	0008      	movs	r0, r1
 800ad5e:	0011      	movs	r1, r2
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f7f8 ffd0 	bl	8003d06 <_fstat>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d103      	bne.n	800ad72 <_fstat_r+0x1e>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d000      	beq.n	800ad72 <_fstat_r+0x1e>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	20000cac 	.word	0x20000cac

0800ad78 <_isatty_r>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b570      	push	{r4, r5, r6, lr}
 800ad7c:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_isatty_r+0x20>)
 800ad7e:	0004      	movs	r4, r0
 800ad80:	0008      	movs	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f8 ffcd 	bl	8003d22 <_isatty>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d103      	bne.n	800ad94 <_isatty_r+0x1c>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d000      	beq.n	800ad94 <_isatty_r+0x1c>
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	20000cac 	.word	0x20000cac

0800ad9c <_lseek_r>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	0004      	movs	r4, r0
 800ada0:	0008      	movs	r0, r1
 800ada2:	0011      	movs	r1, r2
 800ada4:	001a      	movs	r2, r3
 800ada6:	2300      	movs	r3, #0
 800ada8:	4d05      	ldr	r5, [pc, #20]	; (800adc0 <_lseek_r+0x24>)
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f8 ffc2 	bl	8003d34 <_lseek>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d103      	bne.n	800adbc <_lseek_r+0x20>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d000      	beq.n	800adbc <_lseek_r+0x20>
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	20000cac 	.word	0x20000cac

0800adc4 <_read_r>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	0004      	movs	r4, r0
 800adc8:	0008      	movs	r0, r1
 800adca:	0011      	movs	r1, r2
 800adcc:	001a      	movs	r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	4d05      	ldr	r5, [pc, #20]	; (800ade8 <_read_r+0x24>)
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f8 ff54 	bl	8003c80 <_read>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d103      	bne.n	800ade4 <_read_r+0x20>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d000      	beq.n	800ade4 <_read_r+0x20>
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	bd70      	pop	{r4, r5, r6, pc}
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	20000cac 	.word	0x20000cac

0800adec <_init>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr

0800adf8 <_fini>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr
